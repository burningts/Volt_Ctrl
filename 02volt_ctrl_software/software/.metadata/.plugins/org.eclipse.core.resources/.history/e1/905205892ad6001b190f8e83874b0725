#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "io.h"
#include "system.h"
#include "sys/alt_cache.h"
#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h" //pio ¼Ä´æÆ÷Í·ÎÄ¼þ
#include "volt_ctrl.h"

//This is the ISR that runs when the SPI Slave receives data

static void spi_rx_isr(void *isr_context)
{

    alt_printf("ISR :) %x \n", IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE));

    //This resets the IRQ flag. Otherwise the IRQ will continuously run.
    IOWR_ALTERA_AVALON_SPI_STATUS(SPI_BASE, 0x0);
}

int main()
{
    alt_printf("Hello from Nios II!\n");

    int return_code;
    int ret;
    alt_u8 spi_command_string_tx[80];

    alt_u8 spi_command_string_rx[10] = "1HELLOABC*";

    // DAC register
    // WR_AD5504_CTRL_SET_ALLDAC_H 0X5 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_A_H 0X1 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_B_H 0X2 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_C_H 0X3 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_D_H 0X4 + 12bit data

    // DAC init
    spi_command_string_tx[0] = WR_AD5504_CTRL_ALL_POWERUP_H;
    spi_command_string_tx[1] = WR_AD5504_CTRL_ALL_POWERUP_L;

    //DAC data
    spi_command_string_tx[2] = 0x58;
    spi_command_string_tx[3] = 0x00;

    IOWR_ALTERA_AVALON_PIO_DATA(PIO_BASE, OE_MSK_11);

    //This registers the Slave IRQ with NIOS
    ret = alt_ic_isr_register(SPI_IRQ_INTERRUPT_CONTROLLER_ID, SPI_IRQ, spi_rx_isr, (void *)spi_command_string_tx, 0x0);
    alt_printf("IRQ register return %x \n", ret);

    //You need to enable the IRQ in the IP core control register as well.
    IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK | ALTERA_AVALON_SPI_CONTROL_IRRDY_MSK);

    //Just calling the ISR to see if the function is OK.
    spi_rx_isr(NULL);

    //flag = 0,ss_n turns to 1 when transmit is down
    //flag = ALT_AVALON_SPI_COMMAND_MERGE,ss_n always keep 0.

    return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                         2, spi_command_string_tx,
                                         0, spi_command_string_rx,
                                         0);

    return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                         2, &(spi_command_string_tx[2]),
                                         0, &spi_command_string_rx[1],
                                         0);

    // return_code = alt_avalon_spi_command(SPI_BASE, 0,
    //                                      1, &spi_command_string_tx[2],
    //                                      0, &spi_command_string_rx[2],
    //                                      0);

    // return_code = alt_avalon_spi_command(SPI_BASE, 0,
    //                                      1, &spi_command_string_tx[3],
    //                                      0, &spi_command_string_rx[3],
    //                                      0);

    if (return_code < 0)
        alt_printf("ERROR SPI TX RET = %x \n", return_code);

    alt_printf("Transmit done. RET = %x spi_rx %x\n", return_code, spi_command_string_rx);

    //RX is done via interrupts.
    alt_printf("Rx done \n");
    return 0;
}


volt_ctrl.elf:     file format elf32-littlenios2
volt_ctrl.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004244

Program Header:
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00003090 memsz 0x00003354 flags rwx
    LOAD off    0x00005000 vaddr 0x00011000 paddr 0x00011000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00011000  00011000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002bac  00004244  00004244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00006df0  00006df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000290  00006e20  00006e20  00003e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c4  000070b0  000070b0  000040b0  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00007374  00007374  00005000  2**0
                  CONTENTS
  7 .rom          00000000  0000c000  0000c000  00005000  2**0
                  CONTENTS
  8 .epcs_flash   00000000  00011020  00011020  00005000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000518  00000000  00000000  00005028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004ba6  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001da1  00000000  00000000  0000a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002153  00000000  00000000  0000be87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a0c  00000000  00000000  0000dfdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000015d9  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000580  00000000  00000000  0000ffc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  00010544  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000118  00000000  00000000  00010598  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000121a5  2**0
                  CONTENTS, READONLY
 20 .cpu          00000004  00000000  00000000  000121a8  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000121ac  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000121ad  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000121ae  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000121b2  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000121b6  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  000121ba  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  000121be  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  000121c2  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000004  00000000  00000000  000121c6  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003a  00000000  00000000  000121ca  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00061af5  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00011000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004244 l    d  .text	00000000 .text
00006df0 l    d  .rodata	00000000 .rodata
00006e20 l    d  .rwdata	00000000 .rwdata
000070b0 l    d  .bss	00000000 .bss
00007374 l    d  .ram	00000000 .ram
0000c000 l    d  .rom	00000000 .rom
00011020 l    d  .epcs_flash	00000000 .epcs_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/master_WHU/voltage_control/02volt_ctrl_software/software/volt_ctrl_bsp//obj/HAL/src/crt0.o
0000428c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 spi.c
00004290 l     F .text	00000034 spi_rx_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000056f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000587c l     F .text	00000034 alt_dev_reg
00006e90 l     O .rwdata	0000002c jtag
00006ebc l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00005e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00005f30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000061a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000062f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00006324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00006508 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00006648 l     F .text	0000003c alt_get_errno
00006684 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000070dc g     O .bss	00000004 alt_instruction_exception_handler
000057e0 g     F .text	0000006c alt_main
00007274 g     O .bss	00000100 alt_irq
00006e20 g       *ABS*	00000000 __flash_rwdata_start
000070c0 g     O .bss	00000004 out_delay
00011000 g       *ABS*	00000000 __alt_mem_epcs_flash
000070bc g     O .bss	00000004 oe_cnt2
00006900 g     F .text	00000024 altera_nios2_gen2_irq_init
00011000 g     F .entry	00000000 __reset
00007090 g     O .rwdata	00000004 IsSettingInfo
00004020 g       *ABS*	00000000 __flash_exceptions_start
000070e0 g     O .bss	00000004 errno
0000c000 g       *ABS*	00000000 __alt_mem_rom
000070d4 g     O .bss	00000004 alt_argv
0000f090 g       *ABS*	00000000 _gp
0000584c g     F .text	00000030 usleep
000070b2 g     O .bss	00000001 Datalength
00006f10 g     O .rwdata	00000180 alt_fd_list
00006924 g     F .text	00000090 alt_find_dev
000065cc g     F .text	0000007c alt_io_redirect
0000646c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000059f4 g     F .text	000000ec altera_avalon_jtag_uart_read
00006d34 g     F .text	00000064 .hidden __udivsi3
00006b60 g     F .text	00000090 alt_icache_flush
00004000 g       *ABS*	00000000 __alt_mem_ram
000070a8 g     O .rwdata	00000004 alt_max_fd
00007374 g       *ABS*	00000000 __bss_end
00005604 g     F .text	000000f0 alt_iic_isr_register
000055b8 g     F .text	0000004c alt_ic_irq_enabled
000070cc g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
00006ee8 g     O .rwdata	00000028 alt_dev_null
000062b0 g     F .text	00000048 alt_dcache_flush_all
000070b0 g       *ABS*	00000000 __ram_rwdata_end
000070a0 g     O .rwdata	00000008 alt_dev_list
00006e20 g       *ABS*	00000000 __ram_rodata_end
000070e4 g     O .bss	000000c8 rxdata
00006d98 g     F .text	00000058 .hidden __umodsi3
00007374 g       *ABS*	00000000 end
00005f6c g     F .text	000000e0 altera_avalon_uart_write
000041d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005dd0 g     F .text	00000060 altera_avalon_uart_write_fd
00005ae0 g     F .text	00000094 altera_avalon_jtag_uart_write
000070b1 g     O .bss	00000001 txdata
00004244 g     F .text	0000004c _start
00005b74 g     F .text	000001fc alt_avalon_spi_command
000058e8 g     F .text	0000004c alt_sys_init
00006e20 g       *ABS*	00000000 __ram_rwdata_start
00006df0 g       *ABS*	00000000 __ram_rodata_start
00005934 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006abc g     F .text	000000a4 alt_get_fd
0000604c g     F .text	00000158 alt_busy_sleep
00004748 g     F .text	00000074 IRQ_init
000070b0 g     O .bss	00000001 UartReceiveCnt
00006bf0 g     F .text	00000030 memcmp
00007374 g       *ABS*	00000000 __alt_stack_base
000069b4 g     F .text	00000108 alt_find_file
00006360 g     F .text	000000a4 alt_dev_llist_insert
000070b0 g       *ABS*	00000000 __bss_start
000042c4 g     F .text	00000484 main
000070d8 g     O .bss	00000004 alt_envp
00005994 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000070ac g     O .rwdata	00000004 alt_errno
000070b8 g     O .bss	00000004 oe_cnt1
00006c3c g     F .text	00000084 .hidden __divsi3
000070b4 g     O .bss	00000004 oe_cnt
00006df0 g       *ABS*	00000000 __flash_rodata_start
00006e84 g     O .rwdata	0000000a spi_command_string_rx
000058b0 g     F .text	00000038 alt_irq_init
000047bc g     F .text	00000078 IRQ_UART_Interrupts
0000689c g     F .text	00000064 alt_release_fd
000070c4 g     O .bss	00000004 return_code
000070d0 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00007098 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005454 g     F .text	00000050 alt_ic_isr_register
000070b0 g       *ABS*	00000000 _edata
00005d70 g     F .text	00000060 altera_avalon_uart_read_fd
00007374 g       *ABS*	00000000 _end
00004244 g       *ABS*	00000000 __ram_exceptions_end
0000552c g     F .text	0000008c alt_ic_irq_disable
00006e20 g     O .rwdata	00000064 oe_msk
00006cc0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00006404 g     F .text	00000034 _exit
000070c8 g     O .bss	00000004 ret
00006c20 g     F .text	0000001c strlen
00006748 g     F .text	00000154 open
00006438 g     F .text	00000034 alt_icache_flush_all
00007094 g     O .rwdata	00000004 alt_priority_mask
000054a4 g     F .text	00000088 alt_ic_irq_enable
00004834 g     F .text	00000c20 WriteFileData
00005e6c g     F .text	000000c4 altera_avalon_uart_read
000061e0 g     F .text	000000d0 close
0000575c g     F .text	00000084 alt_load
000071ac g     O .bss	000000c8 spi_command_string_tx



Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00800034 	movhi	r2,0
    4140:	109c9d04 	addi	r2,r2,29300
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00800034 	movhi	r2,0
    4158:	109c9d04 	addi	r2,r2,29300
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <__alt_mem_epcs_flash+0xffff312c>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <__alt_mem_epcs_flash+0xffff3120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    41e4:	000531fa 	rdctl	r2,exception
    41e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    41ec:	e0bffd17 	ldw	r2,-12(fp)
    41f0:	10801f0c 	andi	r2,r2,124
    41f4:	1004d0ba 	srli	r2,r2,2
    41f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    41fc:	0005333a 	rdctl	r2,badaddr
    4200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    4204:	d0a01317 	ldw	r2,-32692(gp)
    4208:	10000726 	beq	r2,zero,4228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    420c:	d0a01317 	ldw	r2,-32692(gp)
    4210:	e0fffd17 	ldw	r3,-12(fp)
    4214:	e1bffe17 	ldw	r6,-8(fp)
    4218:	e17fff17 	ldw	r5,-4(fp)
    421c:	1809883a 	mov	r4,r3
    4220:	103ee83a 	callr	r2
    4224:	00000206 	br	4230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    422c:	0005883a 	mov	r2,zero
}
    4230:	e037883a 	mov	sp,fp
    4234:	dfc00117 	ldw	ra,4(sp)
    4238:	df000017 	ldw	fp,0(sp)
    423c:	dec00204 	addi	sp,sp,8
    4240:	f800283a 	ret

Disassembly of section .text:

00004244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    424c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    4250:	00bffd16 	blt	zero,r2,4248 <__alt_mem_epcs_flash+0xffff3248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4258:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    425c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    4260:	d6bc2414 	ori	gp,gp,61584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4268:	109c2c14 	ori	r2,r2,28848

    movhi r3, %hi(__bss_end)
    426c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    4270:	18dcdd14 	ori	r3,r3,29556

    beq r2, r3, 1f
    4274:	10c00326 	beq	r2,r3,4284 <_start+0x40>

0:
    stw zero, (r2)
    4278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    427c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    4280:	10fffd36 	bltu	r2,r3,4278 <__alt_mem_epcs_flash+0xffff3278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4284:	000575c0 	call	575c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4288:	00057e00 	call	57e0 <alt_main>

0000428c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    428c:	003fff06 	br	428c <__alt_mem_epcs_flash+0xffff328c>

00004290 <spi_rx_isr>:
void WriteFileData();

//This is the ISR that runs when the SPI Slave receives data

static void spi_rx_isr(void *isr_context)
{
    4290:	defffe04 	addi	sp,sp,-8
    4294:	df000115 	stw	fp,4(sp)
    4298:	df000104 	addi	fp,sp,4
    429c:	e13fff15 	stw	r4,-4(fp)

    // alt_printf("ISR :) %x \n", IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE));

    //This resets the IRQ flag. Otherwise the IRQ will continuously run.
    IOWR_ALTERA_AVALON_SPI_STATUS(SPI_BASE, 0x0);
    42a0:	0007883a 	mov	r3,zero
    42a4:	00800074 	movhi	r2,1
    42a8:	10880204 	addi	r2,r2,8200
    42ac:	10c00035 	stwio	r3,0(r2)
}
    42b0:	0001883a 	nop
    42b4:	e037883a 	mov	sp,fp
    42b8:	df000017 	ldw	fp,0(sp)
    42bc:	dec00104 	addi	sp,sp,4
    42c0:	f800283a 	ret

000042c4 <main>:

int main()
{
    42c4:	defff704 	addi	sp,sp,-36
    42c8:	dfc00815 	stw	ra,32(sp)
    42cc:	df000715 	stw	fp,28(sp)
    42d0:	df000704 	addi	fp,sp,28
    // WR_AD5504_CTRL_SET_DAC_B_H 0X2 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_C_H 0X3 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_D_H 0X4 + 12bit data

    // DAC init
    spi_command_string_tx[0] = WR_AD5504_CTRL_ALL_POWERUP_H;
    42d4:	00800034 	movhi	r2,0
    42d8:	109c6b04 	addi	r2,r2,29100
    42dc:	00c01c04 	movi	r3,112
    42e0:	10c00005 	stb	r3,0(r2)
    spi_command_string_tx[1] = WR_AD5504_CTRL_ALL_POWERUP_L;
    42e4:	00800034 	movhi	r2,0
    42e8:	109c6b04 	addi	r2,r2,29100
    42ec:	00c00f04 	movi	r3,60
    42f0:	10c00045 	stb	r3,1(r2)
    // spi_command_string_tx[0] = WR_AD5504_CTRL_ALL_POWERDOWN_H;
    // spi_command_string_tx[1] = WR_AD5504_CTRL_ALL_POWERDOWN_L;

    //DAC all set 0
    spi_command_string_tx[2] = 0x50;
    42f4:	00800034 	movhi	r2,0
    42f8:	109c6b04 	addi	r2,r2,29100
    42fc:	00c01404 	movi	r3,80
    4300:	10c00085 	stb	r3,2(r2)
    spi_command_string_tx[3] = 0x00;
    4304:	00800034 	movhi	r2,0
    4308:	109c6b04 	addi	r2,r2,29100
    430c:	100000c5 	stb	zero,3(r2)

    spi_command_string_tx[4] = 0x00;
    4310:	00800034 	movhi	r2,0
    4314:	109c6b04 	addi	r2,r2,29100
    4318:	10000105 	stb	zero,4(r2)
    spi_command_string_tx[5] = 0x00;
    431c:	00800034 	movhi	r2,0
    4320:	109c6b04 	addi	r2,r2,29100
    4324:	10000145 	stb	zero,5(r2)

    IRQ_init();
    4328:	00047480 	call	4748 <IRQ_init>

    // //Just calling the ISR to see if the function is OK.
    // spi_rx_isr(NULL);

    // //DAC power-up
    for (int i = 20; i < 142; i = i + 8)
    432c:	00800504 	movi	r2,20
    4330:	e0bffc15 	stw	r2,-16(fp)
    4334:	00002906 	br	43dc <main+0x118>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    4338:	00c00044 	movi	r3,1
    433c:	00800074 	movhi	r2,1
    4340:	10881404 	addi	r2,r2,8272
    4344:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(i - 6 * oe_cnt) / 2 - 1]);
    4348:	d0a00917 	ldw	r2,-32732(gp)
    434c:	10fffea4 	muli	r3,r2,-6
    4350:	e0bffc17 	ldw	r2,-16(fp)
    4354:	1885883a 	add	r2,r3,r2
    4358:	1006d7fa 	srli	r3,r2,31
    435c:	1885883a 	add	r2,r3,r2
    4360:	1005d07a 	srai	r2,r2,1
    4364:	10ffffc4 	addi	r3,r2,-1
    4368:	00800034 	movhi	r2,0
    436c:	109b8804 	addi	r2,r2,28192
    4370:	18c7883a 	add	r3,r3,r3
    4374:	18c7883a 	add	r3,r3,r3
    4378:	10c5883a 	add	r2,r2,r3
    437c:	10800017 	ldw	r2,0(r2)
    4380:	1007883a 	mov	r3,r2
    4384:	00800074 	movhi	r2,1
    4388:	10881804 	addi	r2,r2,8288
    438c:	10c00035 	stwio	r3,0(r2)
        oe_cnt++;
    4390:	d0a00917 	ldw	r2,-32732(gp)
    4394:	10800044 	addi	r2,r2,1
    4398:	d0a00915 	stw	r2,-32732(gp)

        return_code = alt_avalon_spi_command(SPI_BASE, 0,
    439c:	d8000215 	stw	zero,8(sp)
    43a0:	00800034 	movhi	r2,0
    43a4:	109ba104 	addi	r2,r2,28292
    43a8:	d8800115 	stw	r2,4(sp)
    43ac:	d8000015 	stw	zero,0(sp)
    43b0:	01c00034 	movhi	r7,0
    43b4:	39dc6b04 	addi	r7,r7,29100
    43b8:	01800084 	movi	r6,2
    43bc:	000b883a 	mov	r5,zero
    43c0:	01000074 	movhi	r4,1
    43c4:	21080004 	addi	r4,r4,8192
    43c8:	0005b740 	call	5b74 <alt_avalon_spi_command>
    43cc:	d0a00d15 	stw	r2,-32716(gp)

    // //Just calling the ISR to see if the function is OK.
    // spi_rx_isr(NULL);

    // //DAC power-up
    for (int i = 20; i < 142; i = i + 8)
    43d0:	e0bffc17 	ldw	r2,-16(fp)
    43d4:	10800204 	addi	r2,r2,8
    43d8:	e0bffc15 	stw	r2,-16(fp)
    43dc:	e0bffc17 	ldw	r2,-16(fp)
    43e0:	10802390 	cmplti	r2,r2,142
    43e4:	103fd41e 	bne	r2,zero,4338 <__alt_mem_epcs_flash+0xffff3338>
        return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                             2, spi_command_string_tx,
                                             0, spi_command_string_rx,
                                             0);
    }
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    43e8:	0007883a 	mov	r3,zero
    43ec:	00800074 	movhi	r2,1
    43f0:	10881804 	addi	r2,r2,8288
    43f4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    43f8:	0007883a 	mov	r3,zero
    43fc:	00800074 	movhi	r2,1
    4400:	10881404 	addi	r2,r2,8272
    4404:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 0);
    4408:	0007883a 	mov	r3,zero
    440c:	00800074 	movhi	r2,1
    4410:	10881004 	addi	r2,r2,8256
    4414:	10c00035 	stwio	r3,0(r2)

    // alt_printf("DAC Power up \n");
    while (IsSettingInfo)
    4418:	0001883a 	nop
    441c:	d0a00017 	ldw	r2,-32768(gp)
    4420:	103ffe1e 	bne	r2,zero,441c <__alt_mem_epcs_flash+0xffff341c>
        ;

    while (1)
    {

        while (UartReceiveCnt < Datalength)
    4424:	0001883a 	nop
    4428:	d0e00803 	ldbu	r3,-32736(gp)
    442c:	d0a00883 	ldbu	r2,-32734(gp)
    4430:	18c03fcc 	andi	r3,r3,255
    4434:	10803fcc 	andi	r2,r2,255
    4438:	18bffb36 	bltu	r3,r2,4428 <__alt_mem_epcs_flash+0xffff3428>
            ;
        IsSettingInfo = 1;
    443c:	00800044 	movi	r2,1
    4440:	d0a00015 	stw	r2,-32768(gp)
        //alt_printf("datalength:  %x \n", Datalength);
        for (int i = 0; i < UartReceiveCnt; i++)
    4444:	e03ffd15 	stw	zero,-12(fp)
    4448:	00000306 	br	4458 <main+0x194>
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	10800044 	addi	r2,r2,1
    4454:	e0bffd15 	stw	r2,-12(fp)
    4458:	d0a00803 	ldbu	r2,-32736(gp)
    445c:	10803fcc 	andi	r2,r2,255
    4460:	e0fffd17 	ldw	r3,-12(fp)
    4464:	18bff916 	blt	r3,r2,444c <__alt_mem_epcs_flash+0xffff344c>
        {
            // alt_printf("uart receive:  %x \n", rxdata[i]);
        }
        WriteFileData();
    4468:	00048340 	call	4834 <WriteFileData>
        //alt_printf("spi_command_string_tx[28] = %x \n", spi_command_string_tx[28]);
        UartReceiveCnt = 0;
    446c:	d0200805 	stb	zero,-32736(gp)

        while (1)
        {
            if (UartReceiveCnt >= Datalength)
    4470:	d0e00803 	ldbu	r3,-32736(gp)
    4474:	d0a00883 	ldbu	r2,-32734(gp)
    4478:	18c03fcc 	andi	r3,r3,255
    447c:	10803fcc 	andi	r2,r2,255
    4480:	1880af2e 	bgeu	r3,r2,4740 <main+0x47c>
            {
                break;
            }
            for (int j = 20; j < 142; j = j + 8)
    4484:	00800504 	movi	r2,20
    4488:	e0bffe15 	stw	r2,-8(fp)
    448c:	00005f06 	br	460c <main+0x348>
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    4490:	00c00044 	movi	r3,1
    4494:	00800074 	movhi	r2,1
    4498:	10881404 	addi	r2,r2,8272
    449c:	10c00035 	stwio	r3,0(r2)
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
    44a0:	d0a00a17 	ldw	r2,-32728(gp)
    44a4:	10fffea4 	muli	r3,r2,-6
    44a8:	e0bffe17 	ldw	r2,-8(fp)
    44ac:	1885883a 	add	r2,r3,r2
    44b0:	1006d7fa 	srli	r3,r2,31
    44b4:	1885883a 	add	r2,r3,r2
    44b8:	1005d07a 	srai	r2,r2,1
    44bc:	10ffffc4 	addi	r3,r2,-1
    44c0:	00800034 	movhi	r2,0
    44c4:	109b8804 	addi	r2,r2,28192
    44c8:	18c7883a 	add	r3,r3,r3
    44cc:	18c7883a 	add	r3,r3,r3
    44d0:	10c5883a 	add	r2,r2,r3
    44d4:	10800017 	ldw	r2,0(r2)
    44d8:	1007883a 	mov	r3,r2
    44dc:	00800074 	movhi	r2,1
    44e0:	10881804 	addi	r2,r2,8288
    44e4:	10c00035 	stwio	r3,0(r2)
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j],
    44e8:	e0fffe17 	ldw	r3,-8(fp)
    44ec:	00800034 	movhi	r2,0
    44f0:	109c6b04 	addi	r2,r2,29100
    44f4:	1887883a 	add	r3,r3,r2
            }
            for (int j = 20; j < 142; j = j + 8)
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    44f8:	d8000215 	stw	zero,8(sp)
    44fc:	00800034 	movhi	r2,0
    4500:	109ba144 	addi	r2,r2,28293
    4504:	d8800115 	stw	r2,4(sp)
    4508:	d8000015 	stw	zero,0(sp)
    450c:	180f883a 	mov	r7,r3
    4510:	01800084 	movi	r6,2
    4514:	000b883a 	mov	r5,zero
    4518:	01000074 	movhi	r4,1
    451c:	21080004 	addi	r4,r4,8192
    4520:	0005b740 	call	5b74 <alt_avalon_spi_command>
    4524:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 2],
    4528:	e0bffe17 	ldw	r2,-8(fp)
    452c:	10c00084 	addi	r3,r2,2
    4530:	00800034 	movhi	r2,0
    4534:	109c6b04 	addi	r2,r2,29100
    4538:	1887883a 	add	r3,r3,r2
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    453c:	d8000215 	stw	zero,8(sp)
    4540:	00800034 	movhi	r2,0
    4544:	109ba144 	addi	r2,r2,28293
    4548:	d8800115 	stw	r2,4(sp)
    454c:	d8000015 	stw	zero,0(sp)
    4550:	180f883a 	mov	r7,r3
    4554:	01800084 	movi	r6,2
    4558:	000b883a 	mov	r5,zero
    455c:	01000074 	movhi	r4,1
    4560:	21080004 	addi	r4,r4,8192
    4564:	0005b740 	call	5b74 <alt_avalon_spi_command>
    4568:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 4],
    456c:	e0bffe17 	ldw	r2,-8(fp)
    4570:	10c00104 	addi	r3,r2,4
    4574:	00800034 	movhi	r2,0
    4578:	109c6b04 	addi	r2,r2,29100
    457c:	1887883a 	add	r3,r3,r2
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    4580:	d8000215 	stw	zero,8(sp)
    4584:	00800034 	movhi	r2,0
    4588:	109ba144 	addi	r2,r2,28293
    458c:	d8800115 	stw	r2,4(sp)
    4590:	d8000015 	stw	zero,0(sp)
    4594:	180f883a 	mov	r7,r3
    4598:	01800084 	movi	r6,2
    459c:	000b883a 	mov	r5,zero
    45a0:	01000074 	movhi	r4,1
    45a4:	21080004 	addi	r4,r4,8192
    45a8:	0005b740 	call	5b74 <alt_avalon_spi_command>
    45ac:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 4],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 6],
    45b0:	e0bffe17 	ldw	r2,-8(fp)
    45b4:	10c00184 	addi	r3,r2,6
    45b8:	00800034 	movhi	r2,0
    45bc:	109c6b04 	addi	r2,r2,29100
    45c0:	1887883a 	add	r3,r3,r2
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 4],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    45c4:	d8000215 	stw	zero,8(sp)
    45c8:	00800034 	movhi	r2,0
    45cc:	109ba144 	addi	r2,r2,28293
    45d0:	d8800115 	stw	r2,4(sp)
    45d4:	d8000015 	stw	zero,0(sp)
    45d8:	180f883a 	mov	r7,r3
    45dc:	01800084 	movi	r6,2
    45e0:	000b883a 	mov	r5,zero
    45e4:	01000074 	movhi	r4,1
    45e8:	21080004 	addi	r4,r4,8192
    45ec:	0005b740 	call	5b74 <alt_avalon_spi_command>
    45f0:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 6],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt1++;
    45f4:	d0a00a17 	ldw	r2,-32728(gp)
    45f8:	10800044 	addi	r2,r2,1
    45fc:	d0a00a15 	stw	r2,-32728(gp)
        {
            if (UartReceiveCnt >= Datalength)
            {
                break;
            }
            for (int j = 20; j < 142; j = j + 8)
    4600:	e0bffe17 	ldw	r2,-8(fp)
    4604:	10800204 	addi	r2,r2,8
    4608:	e0bffe15 	stw	r2,-8(fp)
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	10802390 	cmplti	r2,r2,142
    4614:	103f9e1e 	bne	r2,zero,4490 <__alt_mem_epcs_flash+0xffff3490>
                                                     2, &spi_command_string_tx[j + 6],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt1++;
            }
            usleep(10);
    4618:	01000284 	movi	r4,10
    461c:	000584c0 	call	584c <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    4620:	0007883a 	mov	r3,zero
    4624:	00800074 	movhi	r2,1
    4628:	10881804 	addi	r2,r2,8288
    462c:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    4630:	0007883a 	mov	r3,zero
    4634:	00800074 	movhi	r2,1
    4638:	10881404 	addi	r2,r2,8272
    463c:	10c00035 	stwio	r3,0(r2)
            oe_cnt1 = 0;
    4640:	d0200a15 	stw	zero,-32728(gp)
            usleep(380);
    4644:	01005f04 	movi	r4,380
    4648:	000584c0 	call	584c <usleep>

            for (int k = 20; k < 142; k = k + 8)
    464c:	00800504 	movi	r2,20
    4650:	e0bfff15 	stw	r2,-4(fp)
    4654:	00002906 	br	46fc <main+0x438>
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    4658:	00c00044 	movi	r3,1
    465c:	00800074 	movhi	r2,1
    4660:	10881404 	addi	r2,r2,8272
    4664:	10c00035 	stwio	r3,0(r2)
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(k - 6 * oe_cnt2) / 2 - 1]);
    4668:	d0a00b17 	ldw	r2,-32724(gp)
    466c:	10fffea4 	muli	r3,r2,-6
    4670:	e0bfff17 	ldw	r2,-4(fp)
    4674:	1885883a 	add	r2,r3,r2
    4678:	1006d7fa 	srli	r3,r2,31
    467c:	1885883a 	add	r2,r3,r2
    4680:	1005d07a 	srai	r2,r2,1
    4684:	10ffffc4 	addi	r3,r2,-1
    4688:	00800034 	movhi	r2,0
    468c:	109b8804 	addi	r2,r2,28192
    4690:	18c7883a 	add	r3,r3,r3
    4694:	18c7883a 	add	r3,r3,r3
    4698:	10c5883a 	add	r2,r2,r3
    469c:	10800017 	ldw	r2,0(r2)
    46a0:	1007883a 	mov	r3,r2
    46a4:	00800074 	movhi	r2,1
    46a8:	10881804 	addi	r2,r2,8288
    46ac:	10c00035 	stwio	r3,0(r2)
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    46b0:	d8000215 	stw	zero,8(sp)
    46b4:	00800034 	movhi	r2,0
    46b8:	109ba144 	addi	r2,r2,28293
    46bc:	d8800115 	stw	r2,4(sp)
    46c0:	d8000015 	stw	zero,0(sp)
    46c4:	01c00034 	movhi	r7,0
    46c8:	39dc6b84 	addi	r7,r7,29102
    46cc:	01800084 	movi	r6,2
    46d0:	000b883a 	mov	r5,zero
    46d4:	01000074 	movhi	r4,1
    46d8:	21080004 	addi	r4,r4,8192
    46dc:	0005b740 	call	5b74 <alt_avalon_spi_command>
    46e0:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt2++;
    46e4:	d0a00b17 	ldw	r2,-32724(gp)
    46e8:	10800044 	addi	r2,r2,1
    46ec:	d0a00b15 	stw	r2,-32724(gp)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
            oe_cnt1 = 0;
            usleep(380);

            for (int k = 20; k < 142; k = k + 8)
    46f0:	e0bfff17 	ldw	r2,-4(fp)
    46f4:	10800204 	addi	r2,r2,8
    46f8:	e0bfff15 	stw	r2,-4(fp)
    46fc:	e0bfff17 	ldw	r2,-4(fp)
    4700:	10802390 	cmplti	r2,r2,142
    4704:	103fd41e 	bne	r2,zero,4658 <__alt_mem_epcs_flash+0xffff3658>
                                                     2, &spi_command_string_tx[2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt2++;
            }
            usleep(10);
    4708:	01000284 	movi	r4,10
    470c:	000584c0 	call	584c <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    4710:	0007883a 	mov	r3,zero
    4714:	00800074 	movhi	r2,1
    4718:	10881804 	addi	r2,r2,8288
    471c:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    4720:	0007883a 	mov	r3,zero
    4724:	00800074 	movhi	r2,1
    4728:	10881404 	addi	r2,r2,8272
    472c:	10c00035 	stwio	r3,0(r2)
            oe_cnt2 = 0;
    4730:	d0200b15 	stw	zero,-32724(gp)
            usleep(99);
    4734:	010018c4 	movi	r4,99
    4738:	000584c0 	call	584c <usleep>
        }
    473c:	003f4c06 	br	4470 <__alt_mem_epcs_flash+0xffff3470>

        while (1)
        {
            if (UartReceiveCnt >= Datalength)
            {
                break;
    4740:	0001883a 	nop
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
            oe_cnt2 = 0;
            usleep(99);
        }
    }
    4744:	003f3706 	br	4424 <__alt_mem_epcs_flash+0xffff3424>

00004748 <IRQ_init>:

    return 0;
}

void IRQ_init()
{
    4748:	defffd04 	addi	sp,sp,-12
    474c:	dfc00215 	stw	ra,8(sp)
    4750:	df000115 	stw	fp,4(sp)
    4754:	df000104 	addi	fp,sp,4

    IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);
    4758:	0007883a 	mov	r3,zero
    475c:	00800074 	movhi	r2,1
    4760:	10880a04 	addi	r2,r2,8232
    4764:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0X80);
    4768:	00c02004 	movi	r3,128
    476c:	00800074 	movhi	r2,1
    4770:	10880b04 	addi	r2,r2,8236
    4774:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, 0x0364);
    4778:	00c0d904 	movi	r3,868
    477c:	00800074 	movhi	r2,1
    4780:	10880c04 	addi	r2,r2,8240
    4784:	10c00035 	stwio	r3,0(r2)
    // ??ISR
    alt_ic_isr_register(
    4788:	d8000015 	stw	zero,0(sp)
    478c:	000f883a 	mov	r7,zero
    4790:	01800034 	movhi	r6,0
    4794:	3191ef04 	addi	r6,r6,18364
    4798:	01400084 	movi	r5,2
    479c:	0009883a 	mov	r4,zero
    47a0:	00054540 	call	5454 <alt_ic_isr_register>
        UART_IRQ_INTERRUPT_CONTROLLER_ID,
        UART_IRQ,
        IRQ_UART_Interrupts,
        0x0,
        0x0);
}
    47a4:	0001883a 	nop
    47a8:	e037883a 	mov	sp,fp
    47ac:	dfc00117 	ldw	ra,4(sp)
    47b0:	df000017 	ldw	fp,0(sp)
    47b4:	dec00204 	addi	sp,sp,8
    47b8:	f800283a 	ret

000047bc <IRQ_UART_Interrupts>:

void IRQ_UART_Interrupts()
{
    47bc:	deffff04 	addi	sp,sp,-4
    47c0:	df000015 	stw	fp,0(sp)
    47c4:	d839883a 	mov	fp,sp
    if (!IsSettingInfo)
    47c8:	d0a00017 	ldw	r2,-32768(gp)
    47cc:	10000d1e 	bne	r2,zero,4804 <IRQ_UART_Interrupts+0x48>
    {
        rxdata[UartReceiveCnt] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    47d0:	d0a00803 	ldbu	r2,-32736(gp)
    47d4:	10c03fcc 	andi	r3,r2,255
    47d8:	00800074 	movhi	r2,1
    47dc:	10880804 	addi	r2,r2,8224
    47e0:	10800037 	ldwio	r2,0(r2)
    47e4:	1009883a 	mov	r4,r2
    47e8:	00800034 	movhi	r2,0
    47ec:	109c3904 	addi	r2,r2,28900
    47f0:	10c5883a 	add	r2,r2,r3
    47f4:	11000005 	stb	r4,0(r2)
        UartReceiveCnt++;
    47f8:	d0a00803 	ldbu	r2,-32736(gp)
    47fc:	10800044 	addi	r2,r2,1
    4800:	d0a00805 	stb	r2,-32736(gp)
    }
    if (IsSettingInfo)
    4804:	d0a00017 	ldw	r2,-32768(gp)
    4808:	10000526 	beq	r2,zero,4820 <IRQ_UART_Interrupts+0x64>
    {
        Datalength = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    480c:	00800074 	movhi	r2,1
    4810:	10880804 	addi	r2,r2,8224
    4814:	10800037 	ldwio	r2,0(r2)
    4818:	d0a00885 	stb	r2,-32734(gp)
        IsSettingInfo = 0;
    481c:	d0200015 	stw	zero,-32768(gp)
    // txdata = rxdata;
    // while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) &
    //          ALTERA_AVALON_UART_STATUS_TRDY_MSK))
    //     ;
    // IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, txdata);
}
    4820:	0001883a 	nop
    4824:	e037883a 	mov	sp,fp
    4828:	df000017 	ldw	fp,0(sp)
    482c:	dec00104 	addi	sp,sp,4
    4830:	f800283a 	ret

00004834 <WriteFileData>:

void WriteFileData()
{
    4834:	deffff04 	addi	sp,sp,-4
    4838:	df000015 	stw	fp,0(sp)
    483c:	d839883a 	mov	fp,sp
    //DAC10
    spi_command_string_tx[20] = rxdata[0];
    4840:	00800034 	movhi	r2,0
    4844:	109c3904 	addi	r2,r2,28900
    4848:	10c00003 	ldbu	r3,0(r2)
    484c:	00800034 	movhi	r2,0
    4850:	109c6b04 	addi	r2,r2,29100
    4854:	10c00505 	stb	r3,20(r2)
    spi_command_string_tx[21] = rxdata[1];
    4858:	00800034 	movhi	r2,0
    485c:	109c3904 	addi	r2,r2,28900
    4860:	10c00043 	ldbu	r3,1(r2)
    4864:	00800034 	movhi	r2,0
    4868:	109c6b04 	addi	r2,r2,29100
    486c:	10c00545 	stb	r3,21(r2)
    spi_command_string_tx[22] = rxdata[2];
    4870:	00800034 	movhi	r2,0
    4874:	109c3904 	addi	r2,r2,28900
    4878:	10c00083 	ldbu	r3,2(r2)
    487c:	00800034 	movhi	r2,0
    4880:	109c6b04 	addi	r2,r2,29100
    4884:	10c00585 	stb	r3,22(r2)
    spi_command_string_tx[23] = rxdata[3];
    4888:	00800034 	movhi	r2,0
    488c:	109c3904 	addi	r2,r2,28900
    4890:	10c000c3 	ldbu	r3,3(r2)
    4894:	00800034 	movhi	r2,0
    4898:	109c6b04 	addi	r2,r2,29100
    489c:	10c005c5 	stb	r3,23(r2)
    spi_command_string_tx[24] = rxdata[4];
    48a0:	00800034 	movhi	r2,0
    48a4:	109c3904 	addi	r2,r2,28900
    48a8:	10c00103 	ldbu	r3,4(r2)
    48ac:	00800034 	movhi	r2,0
    48b0:	109c6b04 	addi	r2,r2,29100
    48b4:	10c00605 	stb	r3,24(r2)
    spi_command_string_tx[25] = rxdata[5];
    48b8:	00800034 	movhi	r2,0
    48bc:	109c3904 	addi	r2,r2,28900
    48c0:	10c00143 	ldbu	r3,5(r2)
    48c4:	00800034 	movhi	r2,0
    48c8:	109c6b04 	addi	r2,r2,29100
    48cc:	10c00645 	stb	r3,25(r2)
    spi_command_string_tx[26] = rxdata[6];
    48d0:	00800034 	movhi	r2,0
    48d4:	109c3904 	addi	r2,r2,28900
    48d8:	10c00183 	ldbu	r3,6(r2)
    48dc:	00800034 	movhi	r2,0
    48e0:	109c6b04 	addi	r2,r2,29100
    48e4:	10c00685 	stb	r3,26(r2)
    spi_command_string_tx[27] = rxdata[7];
    48e8:	00800034 	movhi	r2,0
    48ec:	109c3904 	addi	r2,r2,28900
    48f0:	10c001c3 	ldbu	r3,7(r2)
    48f4:	00800034 	movhi	r2,0
    48f8:	109c6b04 	addi	r2,r2,29100
    48fc:	10c006c5 	stb	r3,27(r2)
    //DAC11
    spi_command_string_tx[28] = rxdata[8];
    4900:	00800034 	movhi	r2,0
    4904:	109c3904 	addi	r2,r2,28900
    4908:	10c00203 	ldbu	r3,8(r2)
    490c:	00800034 	movhi	r2,0
    4910:	109c6b04 	addi	r2,r2,29100
    4914:	10c00705 	stb	r3,28(r2)
    spi_command_string_tx[29] = rxdata[9];
    4918:	00800034 	movhi	r2,0
    491c:	109c3904 	addi	r2,r2,28900
    4920:	10c00243 	ldbu	r3,9(r2)
    4924:	00800034 	movhi	r2,0
    4928:	109c6b04 	addi	r2,r2,29100
    492c:	10c00745 	stb	r3,29(r2)
    spi_command_string_tx[30] = rxdata[10];
    4930:	00800034 	movhi	r2,0
    4934:	109c3904 	addi	r2,r2,28900
    4938:	10c00283 	ldbu	r3,10(r2)
    493c:	00800034 	movhi	r2,0
    4940:	109c6b04 	addi	r2,r2,29100
    4944:	10c00785 	stb	r3,30(r2)
    spi_command_string_tx[31] = rxdata[11];
    4948:	00800034 	movhi	r2,0
    494c:	109c3904 	addi	r2,r2,28900
    4950:	10c002c3 	ldbu	r3,11(r2)
    4954:	00800034 	movhi	r2,0
    4958:	109c6b04 	addi	r2,r2,29100
    495c:	10c007c5 	stb	r3,31(r2)
    spi_command_string_tx[32] = rxdata[12];
    4960:	00800034 	movhi	r2,0
    4964:	109c3904 	addi	r2,r2,28900
    4968:	10c00303 	ldbu	r3,12(r2)
    496c:	00800034 	movhi	r2,0
    4970:	109c6b04 	addi	r2,r2,29100
    4974:	10c00805 	stb	r3,32(r2)
    spi_command_string_tx[33] = rxdata[13];
    4978:	00800034 	movhi	r2,0
    497c:	109c3904 	addi	r2,r2,28900
    4980:	10c00343 	ldbu	r3,13(r2)
    4984:	00800034 	movhi	r2,0
    4988:	109c6b04 	addi	r2,r2,29100
    498c:	10c00845 	stb	r3,33(r2)
    spi_command_string_tx[34] = rxdata[14];
    4990:	00800034 	movhi	r2,0
    4994:	109c3904 	addi	r2,r2,28900
    4998:	10c00383 	ldbu	r3,14(r2)
    499c:	00800034 	movhi	r2,0
    49a0:	109c6b04 	addi	r2,r2,29100
    49a4:	10c00885 	stb	r3,34(r2)
    spi_command_string_tx[35] = rxdata[15];
    49a8:	00800034 	movhi	r2,0
    49ac:	109c3904 	addi	r2,r2,28900
    49b0:	10c003c3 	ldbu	r3,15(r2)
    49b4:	00800034 	movhi	r2,0
    49b8:	109c6b04 	addi	r2,r2,29100
    49bc:	10c008c5 	stb	r3,35(r2)
    //DAC12
    spi_command_string_tx[36] = rxdata[16];
    49c0:	00800034 	movhi	r2,0
    49c4:	109c3904 	addi	r2,r2,28900
    49c8:	10c00403 	ldbu	r3,16(r2)
    49cc:	00800034 	movhi	r2,0
    49d0:	109c6b04 	addi	r2,r2,29100
    49d4:	10c00905 	stb	r3,36(r2)
    spi_command_string_tx[37] = rxdata[17];
    49d8:	00800034 	movhi	r2,0
    49dc:	109c3904 	addi	r2,r2,28900
    49e0:	10c00443 	ldbu	r3,17(r2)
    49e4:	00800034 	movhi	r2,0
    49e8:	109c6b04 	addi	r2,r2,29100
    49ec:	10c00945 	stb	r3,37(r2)
    spi_command_string_tx[38] = rxdata[18];
    49f0:	00800034 	movhi	r2,0
    49f4:	109c3904 	addi	r2,r2,28900
    49f8:	10c00483 	ldbu	r3,18(r2)
    49fc:	00800034 	movhi	r2,0
    4a00:	109c6b04 	addi	r2,r2,29100
    4a04:	10c00985 	stb	r3,38(r2)
    spi_command_string_tx[39] = rxdata[19];
    4a08:	00800034 	movhi	r2,0
    4a0c:	109c3904 	addi	r2,r2,28900
    4a10:	10c004c3 	ldbu	r3,19(r2)
    4a14:	00800034 	movhi	r2,0
    4a18:	109c6b04 	addi	r2,r2,29100
    4a1c:	10c009c5 	stb	r3,39(r2)
    spi_command_string_tx[40] = rxdata[20];
    4a20:	00800034 	movhi	r2,0
    4a24:	109c3904 	addi	r2,r2,28900
    4a28:	10c00503 	ldbu	r3,20(r2)
    4a2c:	00800034 	movhi	r2,0
    4a30:	109c6b04 	addi	r2,r2,29100
    4a34:	10c00a05 	stb	r3,40(r2)
    spi_command_string_tx[41] = rxdata[21];
    4a38:	00800034 	movhi	r2,0
    4a3c:	109c3904 	addi	r2,r2,28900
    4a40:	10c00543 	ldbu	r3,21(r2)
    4a44:	00800034 	movhi	r2,0
    4a48:	109c6b04 	addi	r2,r2,29100
    4a4c:	10c00a45 	stb	r3,41(r2)
    spi_command_string_tx[42] = rxdata[22];
    4a50:	00800034 	movhi	r2,0
    4a54:	109c3904 	addi	r2,r2,28900
    4a58:	10c00583 	ldbu	r3,22(r2)
    4a5c:	00800034 	movhi	r2,0
    4a60:	109c6b04 	addi	r2,r2,29100
    4a64:	10c00a85 	stb	r3,42(r2)
    spi_command_string_tx[43] = rxdata[23];
    4a68:	00800034 	movhi	r2,0
    4a6c:	109c3904 	addi	r2,r2,28900
    4a70:	10c005c3 	ldbu	r3,23(r2)
    4a74:	00800034 	movhi	r2,0
    4a78:	109c6b04 	addi	r2,r2,29100
    4a7c:	10c00ac5 	stb	r3,43(r2)
    //DAC13
    spi_command_string_tx[44] = rxdata[24];
    4a80:	00800034 	movhi	r2,0
    4a84:	109c3904 	addi	r2,r2,28900
    4a88:	10c00603 	ldbu	r3,24(r2)
    4a8c:	00800034 	movhi	r2,0
    4a90:	109c6b04 	addi	r2,r2,29100
    4a94:	10c00b05 	stb	r3,44(r2)
    spi_command_string_tx[45] = rxdata[25];
    4a98:	00800034 	movhi	r2,0
    4a9c:	109c3904 	addi	r2,r2,28900
    4aa0:	10c00643 	ldbu	r3,25(r2)
    4aa4:	00800034 	movhi	r2,0
    4aa8:	109c6b04 	addi	r2,r2,29100
    4aac:	10c00b45 	stb	r3,45(r2)
    spi_command_string_tx[46] = rxdata[26];
    4ab0:	00800034 	movhi	r2,0
    4ab4:	109c3904 	addi	r2,r2,28900
    4ab8:	10c00683 	ldbu	r3,26(r2)
    4abc:	00800034 	movhi	r2,0
    4ac0:	109c6b04 	addi	r2,r2,29100
    4ac4:	10c00b85 	stb	r3,46(r2)
    spi_command_string_tx[47] = rxdata[27];
    4ac8:	00800034 	movhi	r2,0
    4acc:	109c3904 	addi	r2,r2,28900
    4ad0:	10c006c3 	ldbu	r3,27(r2)
    4ad4:	00800034 	movhi	r2,0
    4ad8:	109c6b04 	addi	r2,r2,29100
    4adc:	10c00bc5 	stb	r3,47(r2)
    spi_command_string_tx[48] = rxdata[28];
    4ae0:	00800034 	movhi	r2,0
    4ae4:	109c3904 	addi	r2,r2,28900
    4ae8:	10c00703 	ldbu	r3,28(r2)
    4aec:	00800034 	movhi	r2,0
    4af0:	109c6b04 	addi	r2,r2,29100
    4af4:	10c00c05 	stb	r3,48(r2)
    spi_command_string_tx[49] = rxdata[29];
    4af8:	00800034 	movhi	r2,0
    4afc:	109c3904 	addi	r2,r2,28900
    4b00:	10c00743 	ldbu	r3,29(r2)
    4b04:	00800034 	movhi	r2,0
    4b08:	109c6b04 	addi	r2,r2,29100
    4b0c:	10c00c45 	stb	r3,49(r2)
    spi_command_string_tx[50] = rxdata[30];
    4b10:	00800034 	movhi	r2,0
    4b14:	109c3904 	addi	r2,r2,28900
    4b18:	10c00783 	ldbu	r3,30(r2)
    4b1c:	00800034 	movhi	r2,0
    4b20:	109c6b04 	addi	r2,r2,29100
    4b24:	10c00c85 	stb	r3,50(r2)
    spi_command_string_tx[51] = rxdata[31];
    4b28:	00800034 	movhi	r2,0
    4b2c:	109c3904 	addi	r2,r2,28900
    4b30:	10c007c3 	ldbu	r3,31(r2)
    4b34:	00800034 	movhi	r2,0
    4b38:	109c6b04 	addi	r2,r2,29100
    4b3c:	10c00cc5 	stb	r3,51(r2)
    //DAC14
    spi_command_string_tx[52] = rxdata[32];
    4b40:	00800034 	movhi	r2,0
    4b44:	109c3904 	addi	r2,r2,28900
    4b48:	10c00803 	ldbu	r3,32(r2)
    4b4c:	00800034 	movhi	r2,0
    4b50:	109c6b04 	addi	r2,r2,29100
    4b54:	10c00d05 	stb	r3,52(r2)
    spi_command_string_tx[53] = rxdata[33];
    4b58:	00800034 	movhi	r2,0
    4b5c:	109c3904 	addi	r2,r2,28900
    4b60:	10c00843 	ldbu	r3,33(r2)
    4b64:	00800034 	movhi	r2,0
    4b68:	109c6b04 	addi	r2,r2,29100
    4b6c:	10c00d45 	stb	r3,53(r2)
    spi_command_string_tx[54] = rxdata[34];
    4b70:	00800034 	movhi	r2,0
    4b74:	109c3904 	addi	r2,r2,28900
    4b78:	10c00883 	ldbu	r3,34(r2)
    4b7c:	00800034 	movhi	r2,0
    4b80:	109c6b04 	addi	r2,r2,29100
    4b84:	10c00d85 	stb	r3,54(r2)
    spi_command_string_tx[55] = rxdata[35];
    4b88:	00800034 	movhi	r2,0
    4b8c:	109c3904 	addi	r2,r2,28900
    4b90:	10c008c3 	ldbu	r3,35(r2)
    4b94:	00800034 	movhi	r2,0
    4b98:	109c6b04 	addi	r2,r2,29100
    4b9c:	10c00dc5 	stb	r3,55(r2)
    spi_command_string_tx[56] = rxdata[36];
    4ba0:	00800034 	movhi	r2,0
    4ba4:	109c3904 	addi	r2,r2,28900
    4ba8:	10c00903 	ldbu	r3,36(r2)
    4bac:	00800034 	movhi	r2,0
    4bb0:	109c6b04 	addi	r2,r2,29100
    4bb4:	10c00e05 	stb	r3,56(r2)
    spi_command_string_tx[57] = rxdata[37];
    4bb8:	00800034 	movhi	r2,0
    4bbc:	109c3904 	addi	r2,r2,28900
    4bc0:	10c00943 	ldbu	r3,37(r2)
    4bc4:	00800034 	movhi	r2,0
    4bc8:	109c6b04 	addi	r2,r2,29100
    4bcc:	10c00e45 	stb	r3,57(r2)
    spi_command_string_tx[58] = rxdata[38];
    4bd0:	00800034 	movhi	r2,0
    4bd4:	109c3904 	addi	r2,r2,28900
    4bd8:	10c00983 	ldbu	r3,38(r2)
    4bdc:	00800034 	movhi	r2,0
    4be0:	109c6b04 	addi	r2,r2,29100
    4be4:	10c00e85 	stb	r3,58(r2)
    spi_command_string_tx[59] = rxdata[39];
    4be8:	00800034 	movhi	r2,0
    4bec:	109c3904 	addi	r2,r2,28900
    4bf0:	10c009c3 	ldbu	r3,39(r2)
    4bf4:	00800034 	movhi	r2,0
    4bf8:	109c6b04 	addi	r2,r2,29100
    4bfc:	10c00ec5 	stb	r3,59(r2)
    //DAC15
    spi_command_string_tx[60] = rxdata[40];
    4c00:	00800034 	movhi	r2,0
    4c04:	109c3904 	addi	r2,r2,28900
    4c08:	10c00a03 	ldbu	r3,40(r2)
    4c0c:	00800034 	movhi	r2,0
    4c10:	109c6b04 	addi	r2,r2,29100
    4c14:	10c00f05 	stb	r3,60(r2)
    spi_command_string_tx[61] = rxdata[41];
    4c18:	00800034 	movhi	r2,0
    4c1c:	109c3904 	addi	r2,r2,28900
    4c20:	10c00a43 	ldbu	r3,41(r2)
    4c24:	00800034 	movhi	r2,0
    4c28:	109c6b04 	addi	r2,r2,29100
    4c2c:	10c00f45 	stb	r3,61(r2)
    spi_command_string_tx[62] = rxdata[42];
    4c30:	00800034 	movhi	r2,0
    4c34:	109c3904 	addi	r2,r2,28900
    4c38:	10c00a83 	ldbu	r3,42(r2)
    4c3c:	00800034 	movhi	r2,0
    4c40:	109c6b04 	addi	r2,r2,29100
    4c44:	10c00f85 	stb	r3,62(r2)
    spi_command_string_tx[63] = rxdata[43];
    4c48:	00800034 	movhi	r2,0
    4c4c:	109c3904 	addi	r2,r2,28900
    4c50:	10c00ac3 	ldbu	r3,43(r2)
    4c54:	00800034 	movhi	r2,0
    4c58:	109c6b04 	addi	r2,r2,29100
    4c5c:	10c00fc5 	stb	r3,63(r2)
    spi_command_string_tx[64] = rxdata[44];
    4c60:	00800034 	movhi	r2,0
    4c64:	109c3904 	addi	r2,r2,28900
    4c68:	10c00b03 	ldbu	r3,44(r2)
    4c6c:	00800034 	movhi	r2,0
    4c70:	109c6b04 	addi	r2,r2,29100
    4c74:	10c01005 	stb	r3,64(r2)
    spi_command_string_tx[65] = rxdata[45];
    4c78:	00800034 	movhi	r2,0
    4c7c:	109c3904 	addi	r2,r2,28900
    4c80:	10c00b43 	ldbu	r3,45(r2)
    4c84:	00800034 	movhi	r2,0
    4c88:	109c6b04 	addi	r2,r2,29100
    4c8c:	10c01045 	stb	r3,65(r2)
    spi_command_string_tx[66] = rxdata[46];
    4c90:	00800034 	movhi	r2,0
    4c94:	109c3904 	addi	r2,r2,28900
    4c98:	10c00b83 	ldbu	r3,46(r2)
    4c9c:	00800034 	movhi	r2,0
    4ca0:	109c6b04 	addi	r2,r2,29100
    4ca4:	10c01085 	stb	r3,66(r2)
    spi_command_string_tx[67] = rxdata[47];
    4ca8:	00800034 	movhi	r2,0
    4cac:	109c3904 	addi	r2,r2,28900
    4cb0:	10c00bc3 	ldbu	r3,47(r2)
    4cb4:	00800034 	movhi	r2,0
    4cb8:	109c6b04 	addi	r2,r2,29100
    4cbc:	10c010c5 	stb	r3,67(r2)
    //DAC16
    spi_command_string_tx[68] = rxdata[48];
    4cc0:	00800034 	movhi	r2,0
    4cc4:	109c3904 	addi	r2,r2,28900
    4cc8:	10c00c03 	ldbu	r3,48(r2)
    4ccc:	00800034 	movhi	r2,0
    4cd0:	109c6b04 	addi	r2,r2,29100
    4cd4:	10c01105 	stb	r3,68(r2)
    spi_command_string_tx[69] = rxdata[49];
    4cd8:	00800034 	movhi	r2,0
    4cdc:	109c3904 	addi	r2,r2,28900
    4ce0:	10c00c43 	ldbu	r3,49(r2)
    4ce4:	00800034 	movhi	r2,0
    4ce8:	109c6b04 	addi	r2,r2,29100
    4cec:	10c01145 	stb	r3,69(r2)
    spi_command_string_tx[70] = rxdata[50];
    4cf0:	00800034 	movhi	r2,0
    4cf4:	109c3904 	addi	r2,r2,28900
    4cf8:	10c00c83 	ldbu	r3,50(r2)
    4cfc:	00800034 	movhi	r2,0
    4d00:	109c6b04 	addi	r2,r2,29100
    4d04:	10c01185 	stb	r3,70(r2)
    spi_command_string_tx[71] = rxdata[51];
    4d08:	00800034 	movhi	r2,0
    4d0c:	109c3904 	addi	r2,r2,28900
    4d10:	10c00cc3 	ldbu	r3,51(r2)
    4d14:	00800034 	movhi	r2,0
    4d18:	109c6b04 	addi	r2,r2,29100
    4d1c:	10c011c5 	stb	r3,71(r2)
    spi_command_string_tx[72] = rxdata[52];
    4d20:	00800034 	movhi	r2,0
    4d24:	109c3904 	addi	r2,r2,28900
    4d28:	10c00d03 	ldbu	r3,52(r2)
    4d2c:	00800034 	movhi	r2,0
    4d30:	109c6b04 	addi	r2,r2,29100
    4d34:	10c01205 	stb	r3,72(r2)
    spi_command_string_tx[73] = rxdata[53];
    4d38:	00800034 	movhi	r2,0
    4d3c:	109c3904 	addi	r2,r2,28900
    4d40:	10c00d43 	ldbu	r3,53(r2)
    4d44:	00800034 	movhi	r2,0
    4d48:	109c6b04 	addi	r2,r2,29100
    4d4c:	10c01245 	stb	r3,73(r2)
    spi_command_string_tx[74] = rxdata[54];
    4d50:	00800034 	movhi	r2,0
    4d54:	109c3904 	addi	r2,r2,28900
    4d58:	10c00d83 	ldbu	r3,54(r2)
    4d5c:	00800034 	movhi	r2,0
    4d60:	109c6b04 	addi	r2,r2,29100
    4d64:	10c01285 	stb	r3,74(r2)
    spi_command_string_tx[75] = rxdata[55];
    4d68:	00800034 	movhi	r2,0
    4d6c:	109c3904 	addi	r2,r2,28900
    4d70:	10c00dc3 	ldbu	r3,55(r2)
    4d74:	00800034 	movhi	r2,0
    4d78:	109c6b04 	addi	r2,r2,29100
    4d7c:	10c012c5 	stb	r3,75(r2)
    //DAC17
    spi_command_string_tx[76] = rxdata[56];
    4d80:	00800034 	movhi	r2,0
    4d84:	109c3904 	addi	r2,r2,28900
    4d88:	10c00e03 	ldbu	r3,56(r2)
    4d8c:	00800034 	movhi	r2,0
    4d90:	109c6b04 	addi	r2,r2,29100
    4d94:	10c01305 	stb	r3,76(r2)
    spi_command_string_tx[77] = rxdata[57];
    4d98:	00800034 	movhi	r2,0
    4d9c:	109c3904 	addi	r2,r2,28900
    4da0:	10c00e43 	ldbu	r3,57(r2)
    4da4:	00800034 	movhi	r2,0
    4da8:	109c6b04 	addi	r2,r2,29100
    4dac:	10c01345 	stb	r3,77(r2)
    spi_command_string_tx[78] = rxdata[58];
    4db0:	00800034 	movhi	r2,0
    4db4:	109c3904 	addi	r2,r2,28900
    4db8:	10c00e83 	ldbu	r3,58(r2)
    4dbc:	00800034 	movhi	r2,0
    4dc0:	109c6b04 	addi	r2,r2,29100
    4dc4:	10c01385 	stb	r3,78(r2)
    spi_command_string_tx[79] = rxdata[59];
    4dc8:	00800034 	movhi	r2,0
    4dcc:	109c3904 	addi	r2,r2,28900
    4dd0:	10c00ec3 	ldbu	r3,59(r2)
    4dd4:	00800034 	movhi	r2,0
    4dd8:	109c6b04 	addi	r2,r2,29100
    4ddc:	10c013c5 	stb	r3,79(r2)
    spi_command_string_tx[80] = rxdata[60];
    4de0:	00800034 	movhi	r2,0
    4de4:	109c3904 	addi	r2,r2,28900
    4de8:	10c00f03 	ldbu	r3,60(r2)
    4dec:	00800034 	movhi	r2,0
    4df0:	109c6b04 	addi	r2,r2,29100
    4df4:	10c01405 	stb	r3,80(r2)
    spi_command_string_tx[81] = rxdata[61];
    4df8:	00800034 	movhi	r2,0
    4dfc:	109c3904 	addi	r2,r2,28900
    4e00:	10c00f43 	ldbu	r3,61(r2)
    4e04:	00800034 	movhi	r2,0
    4e08:	109c6b04 	addi	r2,r2,29100
    4e0c:	10c01445 	stb	r3,81(r2)
    spi_command_string_tx[82] = rxdata[62];
    4e10:	00800034 	movhi	r2,0
    4e14:	109c3904 	addi	r2,r2,28900
    4e18:	10c00f83 	ldbu	r3,62(r2)
    4e1c:	00800034 	movhi	r2,0
    4e20:	109c6b04 	addi	r2,r2,29100
    4e24:	10c01485 	stb	r3,82(r2)
    spi_command_string_tx[83] = rxdata[63];
    4e28:	00800034 	movhi	r2,0
    4e2c:	109c3904 	addi	r2,r2,28900
    4e30:	10c00fc3 	ldbu	r3,63(r2)
    4e34:	00800034 	movhi	r2,0
    4e38:	109c6b04 	addi	r2,r2,29100
    4e3c:	10c014c5 	stb	r3,83(r2)
    //DAC18
    spi_command_string_tx[84] = rxdata[64];
    4e40:	00800034 	movhi	r2,0
    4e44:	109c3904 	addi	r2,r2,28900
    4e48:	10c01003 	ldbu	r3,64(r2)
    4e4c:	00800034 	movhi	r2,0
    4e50:	109c6b04 	addi	r2,r2,29100
    4e54:	10c01505 	stb	r3,84(r2)
    spi_command_string_tx[85] = rxdata[65];
    4e58:	00800034 	movhi	r2,0
    4e5c:	109c3904 	addi	r2,r2,28900
    4e60:	10c01043 	ldbu	r3,65(r2)
    4e64:	00800034 	movhi	r2,0
    4e68:	109c6b04 	addi	r2,r2,29100
    4e6c:	10c01545 	stb	r3,85(r2)
    spi_command_string_tx[86] = rxdata[66];
    4e70:	00800034 	movhi	r2,0
    4e74:	109c3904 	addi	r2,r2,28900
    4e78:	10c01083 	ldbu	r3,66(r2)
    4e7c:	00800034 	movhi	r2,0
    4e80:	109c6b04 	addi	r2,r2,29100
    4e84:	10c01585 	stb	r3,86(r2)
    spi_command_string_tx[87] = rxdata[67];
    4e88:	00800034 	movhi	r2,0
    4e8c:	109c3904 	addi	r2,r2,28900
    4e90:	10c010c3 	ldbu	r3,67(r2)
    4e94:	00800034 	movhi	r2,0
    4e98:	109c6b04 	addi	r2,r2,29100
    4e9c:	10c015c5 	stb	r3,87(r2)
    spi_command_string_tx[88] = rxdata[68];
    4ea0:	00800034 	movhi	r2,0
    4ea4:	109c3904 	addi	r2,r2,28900
    4ea8:	10c01103 	ldbu	r3,68(r2)
    4eac:	00800034 	movhi	r2,0
    4eb0:	109c6b04 	addi	r2,r2,29100
    4eb4:	10c01605 	stb	r3,88(r2)
    spi_command_string_tx[89] = rxdata[69];
    4eb8:	00800034 	movhi	r2,0
    4ebc:	109c3904 	addi	r2,r2,28900
    4ec0:	10c01143 	ldbu	r3,69(r2)
    4ec4:	00800034 	movhi	r2,0
    4ec8:	109c6b04 	addi	r2,r2,29100
    4ecc:	10c01645 	stb	r3,89(r2)
    spi_command_string_tx[90] = rxdata[70];
    4ed0:	00800034 	movhi	r2,0
    4ed4:	109c3904 	addi	r2,r2,28900
    4ed8:	10c01183 	ldbu	r3,70(r2)
    4edc:	00800034 	movhi	r2,0
    4ee0:	109c6b04 	addi	r2,r2,29100
    4ee4:	10c01685 	stb	r3,90(r2)
    spi_command_string_tx[91] = rxdata[71];
    4ee8:	00800034 	movhi	r2,0
    4eec:	109c3904 	addi	r2,r2,28900
    4ef0:	10c011c3 	ldbu	r3,71(r2)
    4ef4:	00800034 	movhi	r2,0
    4ef8:	109c6b04 	addi	r2,r2,29100
    4efc:	10c016c5 	stb	r3,91(r2)
    //DAC19
    spi_command_string_tx[92] = rxdata[72];
    4f00:	00800034 	movhi	r2,0
    4f04:	109c3904 	addi	r2,r2,28900
    4f08:	10c01203 	ldbu	r3,72(r2)
    4f0c:	00800034 	movhi	r2,0
    4f10:	109c6b04 	addi	r2,r2,29100
    4f14:	10c01705 	stb	r3,92(r2)
    spi_command_string_tx[93] = rxdata[73];
    4f18:	00800034 	movhi	r2,0
    4f1c:	109c3904 	addi	r2,r2,28900
    4f20:	10c01243 	ldbu	r3,73(r2)
    4f24:	00800034 	movhi	r2,0
    4f28:	109c6b04 	addi	r2,r2,29100
    4f2c:	10c01745 	stb	r3,93(r2)
    spi_command_string_tx[94] = rxdata[74];
    4f30:	00800034 	movhi	r2,0
    4f34:	109c3904 	addi	r2,r2,28900
    4f38:	10c01283 	ldbu	r3,74(r2)
    4f3c:	00800034 	movhi	r2,0
    4f40:	109c6b04 	addi	r2,r2,29100
    4f44:	10c01785 	stb	r3,94(r2)
    spi_command_string_tx[95] = rxdata[75];
    4f48:	00800034 	movhi	r2,0
    4f4c:	109c3904 	addi	r2,r2,28900
    4f50:	10c012c3 	ldbu	r3,75(r2)
    4f54:	00800034 	movhi	r2,0
    4f58:	109c6b04 	addi	r2,r2,29100
    4f5c:	10c017c5 	stb	r3,95(r2)
    spi_command_string_tx[96] = rxdata[76];
    4f60:	00800034 	movhi	r2,0
    4f64:	109c3904 	addi	r2,r2,28900
    4f68:	10c01303 	ldbu	r3,76(r2)
    4f6c:	00800034 	movhi	r2,0
    4f70:	109c6b04 	addi	r2,r2,29100
    4f74:	10c01805 	stb	r3,96(r2)
    spi_command_string_tx[97] = rxdata[77];
    4f78:	00800034 	movhi	r2,0
    4f7c:	109c3904 	addi	r2,r2,28900
    4f80:	10c01343 	ldbu	r3,77(r2)
    4f84:	00800034 	movhi	r2,0
    4f88:	109c6b04 	addi	r2,r2,29100
    4f8c:	10c01845 	stb	r3,97(r2)
    spi_command_string_tx[98] = rxdata[78];
    4f90:	00800034 	movhi	r2,0
    4f94:	109c3904 	addi	r2,r2,28900
    4f98:	10c01383 	ldbu	r3,78(r2)
    4f9c:	00800034 	movhi	r2,0
    4fa0:	109c6b04 	addi	r2,r2,29100
    4fa4:	10c01885 	stb	r3,98(r2)
    spi_command_string_tx[99] = rxdata[79];
    4fa8:	00800034 	movhi	r2,0
    4fac:	109c3904 	addi	r2,r2,28900
    4fb0:	10c013c3 	ldbu	r3,79(r2)
    4fb4:	00800034 	movhi	r2,0
    4fb8:	109c6b04 	addi	r2,r2,29100
    4fbc:	10c018c5 	stb	r3,99(r2)
    //DAC20
    spi_command_string_tx[100] = rxdata[80];
    4fc0:	00800034 	movhi	r2,0
    4fc4:	109c3904 	addi	r2,r2,28900
    4fc8:	10c01403 	ldbu	r3,80(r2)
    4fcc:	00800034 	movhi	r2,0
    4fd0:	109c6b04 	addi	r2,r2,29100
    4fd4:	10c01905 	stb	r3,100(r2)
    spi_command_string_tx[101] = rxdata[81];
    4fd8:	00800034 	movhi	r2,0
    4fdc:	109c3904 	addi	r2,r2,28900
    4fe0:	10c01443 	ldbu	r3,81(r2)
    4fe4:	00800034 	movhi	r2,0
    4fe8:	109c6b04 	addi	r2,r2,29100
    4fec:	10c01945 	stb	r3,101(r2)
    spi_command_string_tx[102] = rxdata[82];
    4ff0:	00800034 	movhi	r2,0
    4ff4:	109c3904 	addi	r2,r2,28900
    4ff8:	10c01483 	ldbu	r3,82(r2)
    4ffc:	00800034 	movhi	r2,0
    5000:	109c6b04 	addi	r2,r2,29100
    5004:	10c01985 	stb	r3,102(r2)
    spi_command_string_tx[103] = rxdata[83];
    5008:	00800034 	movhi	r2,0
    500c:	109c3904 	addi	r2,r2,28900
    5010:	10c014c3 	ldbu	r3,83(r2)
    5014:	00800034 	movhi	r2,0
    5018:	109c6b04 	addi	r2,r2,29100
    501c:	10c019c5 	stb	r3,103(r2)
    spi_command_string_tx[104] = rxdata[84];
    5020:	00800034 	movhi	r2,0
    5024:	109c3904 	addi	r2,r2,28900
    5028:	10c01503 	ldbu	r3,84(r2)
    502c:	00800034 	movhi	r2,0
    5030:	109c6b04 	addi	r2,r2,29100
    5034:	10c01a05 	stb	r3,104(r2)
    spi_command_string_tx[105] = rxdata[85];
    5038:	00800034 	movhi	r2,0
    503c:	109c3904 	addi	r2,r2,28900
    5040:	10c01543 	ldbu	r3,85(r2)
    5044:	00800034 	movhi	r2,0
    5048:	109c6b04 	addi	r2,r2,29100
    504c:	10c01a45 	stb	r3,105(r2)
    spi_command_string_tx[106] = rxdata[86];
    5050:	00800034 	movhi	r2,0
    5054:	109c3904 	addi	r2,r2,28900
    5058:	10c01583 	ldbu	r3,86(r2)
    505c:	00800034 	movhi	r2,0
    5060:	109c6b04 	addi	r2,r2,29100
    5064:	10c01a85 	stb	r3,106(r2)
    spi_command_string_tx[107] = rxdata[87];
    5068:	00800034 	movhi	r2,0
    506c:	109c3904 	addi	r2,r2,28900
    5070:	10c015c3 	ldbu	r3,87(r2)
    5074:	00800034 	movhi	r2,0
    5078:	109c6b04 	addi	r2,r2,29100
    507c:	10c01ac5 	stb	r3,107(r2)
    //DAC21
    spi_command_string_tx[108] = rxdata[88];
    5080:	00800034 	movhi	r2,0
    5084:	109c3904 	addi	r2,r2,28900
    5088:	10c01603 	ldbu	r3,88(r2)
    508c:	00800034 	movhi	r2,0
    5090:	109c6b04 	addi	r2,r2,29100
    5094:	10c01b05 	stb	r3,108(r2)
    spi_command_string_tx[109] = rxdata[89];
    5098:	00800034 	movhi	r2,0
    509c:	109c3904 	addi	r2,r2,28900
    50a0:	10c01643 	ldbu	r3,89(r2)
    50a4:	00800034 	movhi	r2,0
    50a8:	109c6b04 	addi	r2,r2,29100
    50ac:	10c01b45 	stb	r3,109(r2)
    spi_command_string_tx[110] = rxdata[90];
    50b0:	00800034 	movhi	r2,0
    50b4:	109c3904 	addi	r2,r2,28900
    50b8:	10c01683 	ldbu	r3,90(r2)
    50bc:	00800034 	movhi	r2,0
    50c0:	109c6b04 	addi	r2,r2,29100
    50c4:	10c01b85 	stb	r3,110(r2)
    spi_command_string_tx[111] = rxdata[91];
    50c8:	00800034 	movhi	r2,0
    50cc:	109c3904 	addi	r2,r2,28900
    50d0:	10c016c3 	ldbu	r3,91(r2)
    50d4:	00800034 	movhi	r2,0
    50d8:	109c6b04 	addi	r2,r2,29100
    50dc:	10c01bc5 	stb	r3,111(r2)
    spi_command_string_tx[112] = rxdata[92];
    50e0:	00800034 	movhi	r2,0
    50e4:	109c3904 	addi	r2,r2,28900
    50e8:	10c01703 	ldbu	r3,92(r2)
    50ec:	00800034 	movhi	r2,0
    50f0:	109c6b04 	addi	r2,r2,29100
    50f4:	10c01c05 	stb	r3,112(r2)
    spi_command_string_tx[113] = rxdata[93];
    50f8:	00800034 	movhi	r2,0
    50fc:	109c3904 	addi	r2,r2,28900
    5100:	10c01743 	ldbu	r3,93(r2)
    5104:	00800034 	movhi	r2,0
    5108:	109c6b04 	addi	r2,r2,29100
    510c:	10c01c45 	stb	r3,113(r2)
    spi_command_string_tx[114] = rxdata[94];
    5110:	00800034 	movhi	r2,0
    5114:	109c3904 	addi	r2,r2,28900
    5118:	10c01783 	ldbu	r3,94(r2)
    511c:	00800034 	movhi	r2,0
    5120:	109c6b04 	addi	r2,r2,29100
    5124:	10c01c85 	stb	r3,114(r2)
    spi_command_string_tx[115] = rxdata[95];
    5128:	00800034 	movhi	r2,0
    512c:	109c3904 	addi	r2,r2,28900
    5130:	10c017c3 	ldbu	r3,95(r2)
    5134:	00800034 	movhi	r2,0
    5138:	109c6b04 	addi	r2,r2,29100
    513c:	10c01cc5 	stb	r3,115(r2)
    //DAC22
    spi_command_string_tx[116] = rxdata[96];
    5140:	00800034 	movhi	r2,0
    5144:	109c3904 	addi	r2,r2,28900
    5148:	10c01803 	ldbu	r3,96(r2)
    514c:	00800034 	movhi	r2,0
    5150:	109c6b04 	addi	r2,r2,29100
    5154:	10c01d05 	stb	r3,116(r2)
    spi_command_string_tx[117] = rxdata[97];
    5158:	00800034 	movhi	r2,0
    515c:	109c3904 	addi	r2,r2,28900
    5160:	10c01843 	ldbu	r3,97(r2)
    5164:	00800034 	movhi	r2,0
    5168:	109c6b04 	addi	r2,r2,29100
    516c:	10c01d45 	stb	r3,117(r2)
    spi_command_string_tx[118] = rxdata[98];
    5170:	00800034 	movhi	r2,0
    5174:	109c3904 	addi	r2,r2,28900
    5178:	10c01883 	ldbu	r3,98(r2)
    517c:	00800034 	movhi	r2,0
    5180:	109c6b04 	addi	r2,r2,29100
    5184:	10c01d85 	stb	r3,118(r2)
    spi_command_string_tx[119] = rxdata[99];
    5188:	00800034 	movhi	r2,0
    518c:	109c3904 	addi	r2,r2,28900
    5190:	10c018c3 	ldbu	r3,99(r2)
    5194:	00800034 	movhi	r2,0
    5198:	109c6b04 	addi	r2,r2,29100
    519c:	10c01dc5 	stb	r3,119(r2)
    spi_command_string_tx[120] = rxdata[100];
    51a0:	00800034 	movhi	r2,0
    51a4:	109c3904 	addi	r2,r2,28900
    51a8:	10c01903 	ldbu	r3,100(r2)
    51ac:	00800034 	movhi	r2,0
    51b0:	109c6b04 	addi	r2,r2,29100
    51b4:	10c01e05 	stb	r3,120(r2)
    spi_command_string_tx[121] = rxdata[101];
    51b8:	00800034 	movhi	r2,0
    51bc:	109c3904 	addi	r2,r2,28900
    51c0:	10c01943 	ldbu	r3,101(r2)
    51c4:	00800034 	movhi	r2,0
    51c8:	109c6b04 	addi	r2,r2,29100
    51cc:	10c01e45 	stb	r3,121(r2)
    spi_command_string_tx[122] = rxdata[102];
    51d0:	00800034 	movhi	r2,0
    51d4:	109c3904 	addi	r2,r2,28900
    51d8:	10c01983 	ldbu	r3,102(r2)
    51dc:	00800034 	movhi	r2,0
    51e0:	109c6b04 	addi	r2,r2,29100
    51e4:	10c01e85 	stb	r3,122(r2)
    spi_command_string_tx[123] = rxdata[103];
    51e8:	00800034 	movhi	r2,0
    51ec:	109c3904 	addi	r2,r2,28900
    51f0:	10c019c3 	ldbu	r3,103(r2)
    51f4:	00800034 	movhi	r2,0
    51f8:	109c6b04 	addi	r2,r2,29100
    51fc:	10c01ec5 	stb	r3,123(r2)
    //DAC23
    spi_command_string_tx[124] = rxdata[104];
    5200:	00800034 	movhi	r2,0
    5204:	109c3904 	addi	r2,r2,28900
    5208:	10c01a03 	ldbu	r3,104(r2)
    520c:	00800034 	movhi	r2,0
    5210:	109c6b04 	addi	r2,r2,29100
    5214:	10c01f05 	stb	r3,124(r2)
    spi_command_string_tx[125] = rxdata[105];
    5218:	00800034 	movhi	r2,0
    521c:	109c3904 	addi	r2,r2,28900
    5220:	10c01a43 	ldbu	r3,105(r2)
    5224:	00800034 	movhi	r2,0
    5228:	109c6b04 	addi	r2,r2,29100
    522c:	10c01f45 	stb	r3,125(r2)
    spi_command_string_tx[126] = rxdata[106];
    5230:	00800034 	movhi	r2,0
    5234:	109c3904 	addi	r2,r2,28900
    5238:	10c01a83 	ldbu	r3,106(r2)
    523c:	00800034 	movhi	r2,0
    5240:	109c6b04 	addi	r2,r2,29100
    5244:	10c01f85 	stb	r3,126(r2)
    spi_command_string_tx[127] = rxdata[107];
    5248:	00800034 	movhi	r2,0
    524c:	109c3904 	addi	r2,r2,28900
    5250:	10c01ac3 	ldbu	r3,107(r2)
    5254:	00800034 	movhi	r2,0
    5258:	109c6b04 	addi	r2,r2,29100
    525c:	10c01fc5 	stb	r3,127(r2)
    spi_command_string_tx[128] = rxdata[108];
    5260:	00800034 	movhi	r2,0
    5264:	109c3904 	addi	r2,r2,28900
    5268:	10c01b03 	ldbu	r3,108(r2)
    526c:	00800034 	movhi	r2,0
    5270:	109c6b04 	addi	r2,r2,29100
    5274:	10c02005 	stb	r3,128(r2)
    spi_command_string_tx[129] = rxdata[109];
    5278:	00800034 	movhi	r2,0
    527c:	109c3904 	addi	r2,r2,28900
    5280:	10c01b43 	ldbu	r3,109(r2)
    5284:	00800034 	movhi	r2,0
    5288:	109c6b04 	addi	r2,r2,29100
    528c:	10c02045 	stb	r3,129(r2)
    spi_command_string_tx[130] = rxdata[110];
    5290:	00800034 	movhi	r2,0
    5294:	109c3904 	addi	r2,r2,28900
    5298:	10c01b83 	ldbu	r3,110(r2)
    529c:	00800034 	movhi	r2,0
    52a0:	109c6b04 	addi	r2,r2,29100
    52a4:	10c02085 	stb	r3,130(r2)
    spi_command_string_tx[131] = rxdata[111];
    52a8:	00800034 	movhi	r2,0
    52ac:	109c3904 	addi	r2,r2,28900
    52b0:	10c01bc3 	ldbu	r3,111(r2)
    52b4:	00800034 	movhi	r2,0
    52b8:	109c6b04 	addi	r2,r2,29100
    52bc:	10c020c5 	stb	r3,131(r2)
    //DAC24
    spi_command_string_tx[132] = rxdata[112];
    52c0:	00800034 	movhi	r2,0
    52c4:	109c3904 	addi	r2,r2,28900
    52c8:	10c01c03 	ldbu	r3,112(r2)
    52cc:	00800034 	movhi	r2,0
    52d0:	109c6b04 	addi	r2,r2,29100
    52d4:	10c02105 	stb	r3,132(r2)
    spi_command_string_tx[133] = rxdata[113];
    52d8:	00800034 	movhi	r2,0
    52dc:	109c3904 	addi	r2,r2,28900
    52e0:	10c01c43 	ldbu	r3,113(r2)
    52e4:	00800034 	movhi	r2,0
    52e8:	109c6b04 	addi	r2,r2,29100
    52ec:	10c02145 	stb	r3,133(r2)
    spi_command_string_tx[134] = rxdata[114];
    52f0:	00800034 	movhi	r2,0
    52f4:	109c3904 	addi	r2,r2,28900
    52f8:	10c01c83 	ldbu	r3,114(r2)
    52fc:	00800034 	movhi	r2,0
    5300:	109c6b04 	addi	r2,r2,29100
    5304:	10c02185 	stb	r3,134(r2)
    spi_command_string_tx[135] = rxdata[115];
    5308:	00800034 	movhi	r2,0
    530c:	109c3904 	addi	r2,r2,28900
    5310:	10c01cc3 	ldbu	r3,115(r2)
    5314:	00800034 	movhi	r2,0
    5318:	109c6b04 	addi	r2,r2,29100
    531c:	10c021c5 	stb	r3,135(r2)
    spi_command_string_tx[136] = rxdata[116];
    5320:	00800034 	movhi	r2,0
    5324:	109c3904 	addi	r2,r2,28900
    5328:	10c01d03 	ldbu	r3,116(r2)
    532c:	00800034 	movhi	r2,0
    5330:	109c6b04 	addi	r2,r2,29100
    5334:	10c02205 	stb	r3,136(r2)
    spi_command_string_tx[137] = rxdata[117];
    5338:	00800034 	movhi	r2,0
    533c:	109c3904 	addi	r2,r2,28900
    5340:	10c01d43 	ldbu	r3,117(r2)
    5344:	00800034 	movhi	r2,0
    5348:	109c6b04 	addi	r2,r2,29100
    534c:	10c02245 	stb	r3,137(r2)
    spi_command_string_tx[138] = rxdata[118];
    5350:	00800034 	movhi	r2,0
    5354:	109c3904 	addi	r2,r2,28900
    5358:	10c01d83 	ldbu	r3,118(r2)
    535c:	00800034 	movhi	r2,0
    5360:	109c6b04 	addi	r2,r2,29100
    5364:	10c02285 	stb	r3,138(r2)
    spi_command_string_tx[139] = rxdata[119];
    5368:	00800034 	movhi	r2,0
    536c:	109c3904 	addi	r2,r2,28900
    5370:	10c01dc3 	ldbu	r3,119(r2)
    5374:	00800034 	movhi	r2,0
    5378:	109c6b04 	addi	r2,r2,29100
    537c:	10c022c5 	stb	r3,139(r2)
    //DAC25
    spi_command_string_tx[140] = rxdata[120];
    5380:	00800034 	movhi	r2,0
    5384:	109c3904 	addi	r2,r2,28900
    5388:	10c01e03 	ldbu	r3,120(r2)
    538c:	00800034 	movhi	r2,0
    5390:	109c6b04 	addi	r2,r2,29100
    5394:	10c02305 	stb	r3,140(r2)
    spi_command_string_tx[141] = rxdata[121];
    5398:	00800034 	movhi	r2,0
    539c:	109c3904 	addi	r2,r2,28900
    53a0:	10c01e43 	ldbu	r3,121(r2)
    53a4:	00800034 	movhi	r2,0
    53a8:	109c6b04 	addi	r2,r2,29100
    53ac:	10c02345 	stb	r3,141(r2)
    spi_command_string_tx[142] = rxdata[122];
    53b0:	00800034 	movhi	r2,0
    53b4:	109c3904 	addi	r2,r2,28900
    53b8:	10c01e83 	ldbu	r3,122(r2)
    53bc:	00800034 	movhi	r2,0
    53c0:	109c6b04 	addi	r2,r2,29100
    53c4:	10c02385 	stb	r3,142(r2)
    spi_command_string_tx[143] = rxdata[123];
    53c8:	00800034 	movhi	r2,0
    53cc:	109c3904 	addi	r2,r2,28900
    53d0:	10c01ec3 	ldbu	r3,123(r2)
    53d4:	00800034 	movhi	r2,0
    53d8:	109c6b04 	addi	r2,r2,29100
    53dc:	10c023c5 	stb	r3,143(r2)
    spi_command_string_tx[144] = rxdata[124];
    53e0:	00800034 	movhi	r2,0
    53e4:	109c3904 	addi	r2,r2,28900
    53e8:	10c01f03 	ldbu	r3,124(r2)
    53ec:	00800034 	movhi	r2,0
    53f0:	109c6b04 	addi	r2,r2,29100
    53f4:	10c02405 	stb	r3,144(r2)
    spi_command_string_tx[145] = rxdata[125];
    53f8:	00800034 	movhi	r2,0
    53fc:	109c3904 	addi	r2,r2,28900
    5400:	10c01f43 	ldbu	r3,125(r2)
    5404:	00800034 	movhi	r2,0
    5408:	109c6b04 	addi	r2,r2,29100
    540c:	10c02445 	stb	r3,145(r2)
    spi_command_string_tx[146] = rxdata[126];
    5410:	00800034 	movhi	r2,0
    5414:	109c3904 	addi	r2,r2,28900
    5418:	10c01f83 	ldbu	r3,126(r2)
    541c:	00800034 	movhi	r2,0
    5420:	109c6b04 	addi	r2,r2,29100
    5424:	10c02485 	stb	r3,146(r2)
    spi_command_string_tx[147] = rxdata[127];
    5428:	00800034 	movhi	r2,0
    542c:	109c3904 	addi	r2,r2,28900
    5430:	10c01fc3 	ldbu	r3,127(r2)
    5434:	00800034 	movhi	r2,0
    5438:	109c6b04 	addi	r2,r2,29100
    543c:	10c024c5 	stb	r3,147(r2)
}
    5440:	0001883a 	nop
    5444:	e037883a 	mov	sp,fp
    5448:	df000017 	ldw	fp,0(sp)
    544c:	dec00104 	addi	sp,sp,4
    5450:	f800283a 	ret

00005454 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5454:	defff904 	addi	sp,sp,-28
    5458:	dfc00615 	stw	ra,24(sp)
    545c:	df000515 	stw	fp,20(sp)
    5460:	df000504 	addi	fp,sp,20
    5464:	e13ffc15 	stw	r4,-16(fp)
    5468:	e17ffd15 	stw	r5,-12(fp)
    546c:	e1bffe15 	stw	r6,-8(fp)
    5470:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5474:	e0800217 	ldw	r2,8(fp)
    5478:	d8800015 	stw	r2,0(sp)
    547c:	e1ffff17 	ldw	r7,-4(fp)
    5480:	e1bffe17 	ldw	r6,-8(fp)
    5484:	e17ffd17 	ldw	r5,-12(fp)
    5488:	e13ffc17 	ldw	r4,-16(fp)
    548c:	00056040 	call	5604 <alt_iic_isr_register>
}  
    5490:	e037883a 	mov	sp,fp
    5494:	dfc00117 	ldw	ra,4(sp)
    5498:	df000017 	ldw	fp,0(sp)
    549c:	dec00204 	addi	sp,sp,8
    54a0:	f800283a 	ret

000054a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    54a4:	defff904 	addi	sp,sp,-28
    54a8:	df000615 	stw	fp,24(sp)
    54ac:	df000604 	addi	fp,sp,24
    54b0:	e13ffe15 	stw	r4,-8(fp)
    54b4:	e17fff15 	stw	r5,-4(fp)
    54b8:	e0bfff17 	ldw	r2,-4(fp)
    54bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54c0:	0005303a 	rdctl	r2,status
    54c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54c8:	e0fffb17 	ldw	r3,-20(fp)
    54cc:	00bfff84 	movi	r2,-2
    54d0:	1884703a 	and	r2,r3,r2
    54d4:	1001703a 	wrctl	status,r2
  
  return context;
    54d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    54dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    54e0:	00c00044 	movi	r3,1
    54e4:	e0bffa17 	ldw	r2,-24(fp)
    54e8:	1884983a 	sll	r2,r3,r2
    54ec:	1007883a 	mov	r3,r2
    54f0:	d0a00f17 	ldw	r2,-32708(gp)
    54f4:	1884b03a 	or	r2,r3,r2
    54f8:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    54fc:	d0a00f17 	ldw	r2,-32708(gp)
    5500:	100170fa 	wrctl	ienable,r2
    5504:	e0bffc17 	ldw	r2,-16(fp)
    5508:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    550c:	e0bffd17 	ldw	r2,-12(fp)
    5510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5514:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    5518:	0001883a 	nop
}
    551c:	e037883a 	mov	sp,fp
    5520:	df000017 	ldw	fp,0(sp)
    5524:	dec00104 	addi	sp,sp,4
    5528:	f800283a 	ret

0000552c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    552c:	defff904 	addi	sp,sp,-28
    5530:	df000615 	stw	fp,24(sp)
    5534:	df000604 	addi	fp,sp,24
    5538:	e13ffe15 	stw	r4,-8(fp)
    553c:	e17fff15 	stw	r5,-4(fp)
    5540:	e0bfff17 	ldw	r2,-4(fp)
    5544:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5548:	0005303a 	rdctl	r2,status
    554c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5550:	e0fffb17 	ldw	r3,-20(fp)
    5554:	00bfff84 	movi	r2,-2
    5558:	1884703a 	and	r2,r3,r2
    555c:	1001703a 	wrctl	status,r2
  
  return context;
    5560:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5564:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5568:	00c00044 	movi	r3,1
    556c:	e0bffa17 	ldw	r2,-24(fp)
    5570:	1884983a 	sll	r2,r3,r2
    5574:	0084303a 	nor	r2,zero,r2
    5578:	1007883a 	mov	r3,r2
    557c:	d0a00f17 	ldw	r2,-32708(gp)
    5580:	1884703a 	and	r2,r3,r2
    5584:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5588:	d0a00f17 	ldw	r2,-32708(gp)
    558c:	100170fa 	wrctl	ienable,r2
    5590:	e0bffc17 	ldw	r2,-16(fp)
    5594:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5598:	e0bffd17 	ldw	r2,-12(fp)
    559c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    55a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    55a4:	0001883a 	nop
}
    55a8:	e037883a 	mov	sp,fp
    55ac:	df000017 	ldw	fp,0(sp)
    55b0:	dec00104 	addi	sp,sp,4
    55b4:	f800283a 	ret

000055b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    55b8:	defffc04 	addi	sp,sp,-16
    55bc:	df000315 	stw	fp,12(sp)
    55c0:	df000304 	addi	fp,sp,12
    55c4:	e13ffe15 	stw	r4,-8(fp)
    55c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    55cc:	000530fa 	rdctl	r2,ienable
    55d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    55d4:	00c00044 	movi	r3,1
    55d8:	e0bfff17 	ldw	r2,-4(fp)
    55dc:	1884983a 	sll	r2,r3,r2
    55e0:	1007883a 	mov	r3,r2
    55e4:	e0bffd17 	ldw	r2,-12(fp)
    55e8:	1884703a 	and	r2,r3,r2
    55ec:	1004c03a 	cmpne	r2,r2,zero
    55f0:	10803fcc 	andi	r2,r2,255
}
    55f4:	e037883a 	mov	sp,fp
    55f8:	df000017 	ldw	fp,0(sp)
    55fc:	dec00104 	addi	sp,sp,4
    5600:	f800283a 	ret

00005604 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5604:	defff504 	addi	sp,sp,-44
    5608:	dfc00a15 	stw	ra,40(sp)
    560c:	df000915 	stw	fp,36(sp)
    5610:	df000904 	addi	fp,sp,36
    5614:	e13ffc15 	stw	r4,-16(fp)
    5618:	e17ffd15 	stw	r5,-12(fp)
    561c:	e1bffe15 	stw	r6,-8(fp)
    5620:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5624:	00bffa84 	movi	r2,-22
    5628:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    562c:	e0bffd17 	ldw	r2,-12(fp)
    5630:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5634:	e0bff817 	ldw	r2,-32(fp)
    5638:	10800808 	cmpgei	r2,r2,32
    563c:	1000271e 	bne	r2,zero,56dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5640:	0005303a 	rdctl	r2,status
    5644:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5648:	e0fffb17 	ldw	r3,-20(fp)
    564c:	00bfff84 	movi	r2,-2
    5650:	1884703a 	and	r2,r3,r2
    5654:	1001703a 	wrctl	status,r2
  
  return context;
    5658:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    565c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    5660:	00800034 	movhi	r2,0
    5664:	109c9d04 	addi	r2,r2,29300
    5668:	e0fff817 	ldw	r3,-32(fp)
    566c:	180690fa 	slli	r3,r3,3
    5670:	10c5883a 	add	r2,r2,r3
    5674:	e0fffe17 	ldw	r3,-8(fp)
    5678:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    567c:	00800034 	movhi	r2,0
    5680:	109c9d04 	addi	r2,r2,29300
    5684:	e0fff817 	ldw	r3,-32(fp)
    5688:	180690fa 	slli	r3,r3,3
    568c:	10c5883a 	add	r2,r2,r3
    5690:	10800104 	addi	r2,r2,4
    5694:	e0ffff17 	ldw	r3,-4(fp)
    5698:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    569c:	e0bffe17 	ldw	r2,-8(fp)
    56a0:	10000526 	beq	r2,zero,56b8 <alt_iic_isr_register+0xb4>
    56a4:	e0bff817 	ldw	r2,-32(fp)
    56a8:	100b883a 	mov	r5,r2
    56ac:	e13ffc17 	ldw	r4,-16(fp)
    56b0:	00054a40 	call	54a4 <alt_ic_irq_enable>
    56b4:	00000406 	br	56c8 <alt_iic_isr_register+0xc4>
    56b8:	e0bff817 	ldw	r2,-32(fp)
    56bc:	100b883a 	mov	r5,r2
    56c0:	e13ffc17 	ldw	r4,-16(fp)
    56c4:	000552c0 	call	552c <alt_ic_irq_disable>
    56c8:	e0bff715 	stw	r2,-36(fp)
    56cc:	e0bffa17 	ldw	r2,-24(fp)
    56d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56d4:	e0bff917 	ldw	r2,-28(fp)
    56d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    56dc:	e0bff717 	ldw	r2,-36(fp)
}
    56e0:	e037883a 	mov	sp,fp
    56e4:	dfc00117 	ldw	ra,4(sp)
    56e8:	df000017 	ldw	fp,0(sp)
    56ec:	dec00204 	addi	sp,sp,8
    56f0:	f800283a 	ret

000056f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    56f4:	defffc04 	addi	sp,sp,-16
    56f8:	df000315 	stw	fp,12(sp)
    56fc:	df000304 	addi	fp,sp,12
    5700:	e13ffd15 	stw	r4,-12(fp)
    5704:	e17ffe15 	stw	r5,-8(fp)
    5708:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    570c:	e0fffe17 	ldw	r3,-8(fp)
    5710:	e0bffd17 	ldw	r2,-12(fp)
    5714:	18800c26 	beq	r3,r2,5748 <alt_load_section+0x54>
  {
    while( to != end )
    5718:	00000806 	br	573c <alt_load_section+0x48>
    {
      *to++ = *from++;
    571c:	e0bffe17 	ldw	r2,-8(fp)
    5720:	10c00104 	addi	r3,r2,4
    5724:	e0fffe15 	stw	r3,-8(fp)
    5728:	e0fffd17 	ldw	r3,-12(fp)
    572c:	19000104 	addi	r4,r3,4
    5730:	e13ffd15 	stw	r4,-12(fp)
    5734:	18c00017 	ldw	r3,0(r3)
    5738:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    573c:	e0fffe17 	ldw	r3,-8(fp)
    5740:	e0bfff17 	ldw	r2,-4(fp)
    5744:	18bff51e 	bne	r3,r2,571c <__alt_mem_epcs_flash+0xffff471c>
    {
      *to++ = *from++;
    }
  }
}
    5748:	0001883a 	nop
    574c:	e037883a 	mov	sp,fp
    5750:	df000017 	ldw	fp,0(sp)
    5754:	dec00104 	addi	sp,sp,4
    5758:	f800283a 	ret

0000575c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    575c:	defffe04 	addi	sp,sp,-8
    5760:	dfc00115 	stw	ra,4(sp)
    5764:	df000015 	stw	fp,0(sp)
    5768:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    576c:	01800034 	movhi	r6,0
    5770:	319c2c04 	addi	r6,r6,28848
    5774:	01400034 	movhi	r5,0
    5778:	295b8804 	addi	r5,r5,28192
    577c:	01000034 	movhi	r4,0
    5780:	211b8804 	addi	r4,r4,28192
    5784:	00056f40 	call	56f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5788:	01800034 	movhi	r6,0
    578c:	31909104 	addi	r6,r6,16964
    5790:	01400034 	movhi	r5,0
    5794:	29500804 	addi	r5,r5,16416
    5798:	01000034 	movhi	r4,0
    579c:	21100804 	addi	r4,r4,16416
    57a0:	00056f40 	call	56f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    57a4:	01800034 	movhi	r6,0
    57a8:	319b8804 	addi	r6,r6,28192
    57ac:	01400034 	movhi	r5,0
    57b0:	295b7c04 	addi	r5,r5,28144
    57b4:	01000034 	movhi	r4,0
    57b8:	211b7c04 	addi	r4,r4,28144
    57bc:	00056f40 	call	56f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    57c0:	00062b00 	call	62b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    57c4:	00064380 	call	6438 <alt_icache_flush_all>
}
    57c8:	0001883a 	nop
    57cc:	e037883a 	mov	sp,fp
    57d0:	dfc00117 	ldw	ra,4(sp)
    57d4:	df000017 	ldw	fp,0(sp)
    57d8:	dec00204 	addi	sp,sp,8
    57dc:	f800283a 	ret

000057e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    57e0:	defffd04 	addi	sp,sp,-12
    57e4:	dfc00215 	stw	ra,8(sp)
    57e8:	df000115 	stw	fp,4(sp)
    57ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    57f0:	0009883a 	mov	r4,zero
    57f4:	00058b00 	call	58b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    57f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    57fc:	00058e80 	call	58e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5800:	01800034 	movhi	r6,0
    5804:	319b7c04 	addi	r6,r6,28144
    5808:	01400034 	movhi	r5,0
    580c:	295b7c04 	addi	r5,r5,28144
    5810:	01000034 	movhi	r4,0
    5814:	211b7c04 	addi	r4,r4,28144
    5818:	00065cc0 	call	65cc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    581c:	d0a01017 	ldw	r2,-32704(gp)
    5820:	d0e01117 	ldw	r3,-32700(gp)
    5824:	d1201217 	ldw	r4,-32696(gp)
    5828:	200d883a 	mov	r6,r4
    582c:	180b883a 	mov	r5,r3
    5830:	1009883a 	mov	r4,r2
    5834:	00042c40 	call	42c4 <main>
    5838:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    583c:	01000044 	movi	r4,1
    5840:	00061e00 	call	61e0 <close>
  exit (result);
    5844:	e13fff17 	ldw	r4,-4(fp)
    5848:	00064040 	call	6404 <_exit>

0000584c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    584c:	defffd04 	addi	sp,sp,-12
    5850:	dfc00215 	stw	ra,8(sp)
    5854:	df000115 	stw	fp,4(sp)
    5858:	df000104 	addi	fp,sp,4
    585c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    5860:	e13fff17 	ldw	r4,-4(fp)
    5864:	000604c0 	call	604c <alt_busy_sleep>
}
    5868:	e037883a 	mov	sp,fp
    586c:	dfc00117 	ldw	ra,4(sp)
    5870:	df000017 	ldw	fp,0(sp)
    5874:	dec00204 	addi	sp,sp,8
    5878:	f800283a 	ret

0000587c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    587c:	defffd04 	addi	sp,sp,-12
    5880:	dfc00215 	stw	ra,8(sp)
    5884:	df000115 	stw	fp,4(sp)
    5888:	df000104 	addi	fp,sp,4
    588c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5890:	d1600404 	addi	r5,gp,-32752
    5894:	e13fff17 	ldw	r4,-4(fp)
    5898:	00063600 	call	6360 <alt_dev_llist_insert>
}
    589c:	e037883a 	mov	sp,fp
    58a0:	dfc00117 	ldw	ra,4(sp)
    58a4:	df000017 	ldw	fp,0(sp)
    58a8:	dec00204 	addi	sp,sp,8
    58ac:	f800283a 	ret

000058b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    58b0:	defffd04 	addi	sp,sp,-12
    58b4:	dfc00215 	stw	ra,8(sp)
    58b8:	df000115 	stw	fp,4(sp)
    58bc:	df000104 	addi	fp,sp,4
    58c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    58c4:	00069000 	call	6900 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    58c8:	00800044 	movi	r2,1
    58cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    58d0:	0001883a 	nop
    58d4:	e037883a 	mov	sp,fp
    58d8:	dfc00117 	ldw	ra,4(sp)
    58dc:	df000017 	ldw	fp,0(sp)
    58e0:	dec00204 	addi	sp,sp,8
    58e4:	f800283a 	ret

000058e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    58e8:	defffe04 	addi	sp,sp,-8
    58ec:	dfc00115 	stw	ra,4(sp)
    58f0:	df000015 	stw	fp,0(sp)
    58f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
    58f8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
    58fc:	01000034 	movhi	r4,0
    5900:	211ba404 	addi	r4,r4,28304
    5904:	000587c0 	call	587c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    5908:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    590c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
    5910:	01000034 	movhi	r4,0
    5914:	211baf04 	addi	r4,r4,28348
    5918:	000587c0 	call	587c <alt_dev_reg>
}
    591c:	0001883a 	nop
    5920:	e037883a 	mov	sp,fp
    5924:	dfc00117 	ldw	ra,4(sp)
    5928:	df000017 	ldw	fp,0(sp)
    592c:	dec00204 	addi	sp,sp,8
    5930:	f800283a 	ret

00005934 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5934:	defffa04 	addi	sp,sp,-24
    5938:	dfc00515 	stw	ra,20(sp)
    593c:	df000415 	stw	fp,16(sp)
    5940:	df000404 	addi	fp,sp,16
    5944:	e13ffd15 	stw	r4,-12(fp)
    5948:	e17ffe15 	stw	r5,-8(fp)
    594c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5950:	e0bffd17 	ldw	r2,-12(fp)
    5954:	10800017 	ldw	r2,0(r2)
    5958:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    595c:	e0bffc17 	ldw	r2,-16(fp)
    5960:	10c00a04 	addi	r3,r2,40
    5964:	e0bffd17 	ldw	r2,-12(fp)
    5968:	10800217 	ldw	r2,8(r2)
    596c:	100f883a 	mov	r7,r2
    5970:	e1bfff17 	ldw	r6,-4(fp)
    5974:	e17ffe17 	ldw	r5,-8(fp)
    5978:	1809883a 	mov	r4,r3
    597c:	00059f40 	call	59f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5980:	e037883a 	mov	sp,fp
    5984:	dfc00117 	ldw	ra,4(sp)
    5988:	df000017 	ldw	fp,0(sp)
    598c:	dec00204 	addi	sp,sp,8
    5990:	f800283a 	ret

00005994 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5994:	defffa04 	addi	sp,sp,-24
    5998:	dfc00515 	stw	ra,20(sp)
    599c:	df000415 	stw	fp,16(sp)
    59a0:	df000404 	addi	fp,sp,16
    59a4:	e13ffd15 	stw	r4,-12(fp)
    59a8:	e17ffe15 	stw	r5,-8(fp)
    59ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    59b0:	e0bffd17 	ldw	r2,-12(fp)
    59b4:	10800017 	ldw	r2,0(r2)
    59b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    59bc:	e0bffc17 	ldw	r2,-16(fp)
    59c0:	10c00a04 	addi	r3,r2,40
    59c4:	e0bffd17 	ldw	r2,-12(fp)
    59c8:	10800217 	ldw	r2,8(r2)
    59cc:	100f883a 	mov	r7,r2
    59d0:	e1bfff17 	ldw	r6,-4(fp)
    59d4:	e17ffe17 	ldw	r5,-8(fp)
    59d8:	1809883a 	mov	r4,r3
    59dc:	0005ae00 	call	5ae0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    59e0:	e037883a 	mov	sp,fp
    59e4:	dfc00117 	ldw	ra,4(sp)
    59e8:	df000017 	ldw	fp,0(sp)
    59ec:	dec00204 	addi	sp,sp,8
    59f0:	f800283a 	ret

000059f4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    59f4:	defff704 	addi	sp,sp,-36
    59f8:	df000815 	stw	fp,32(sp)
    59fc:	df000804 	addi	fp,sp,32
    5a00:	e13ffc15 	stw	r4,-16(fp)
    5a04:	e17ffd15 	stw	r5,-12(fp)
    5a08:	e1bffe15 	stw	r6,-8(fp)
    5a0c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5a10:	e0bffc17 	ldw	r2,-16(fp)
    5a14:	10800017 	ldw	r2,0(r2)
    5a18:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    5a1c:	e0bffd17 	ldw	r2,-12(fp)
    5a20:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    5a24:	e0bffe17 	ldw	r2,-8(fp)
    5a28:	e0fffd17 	ldw	r3,-12(fp)
    5a2c:	1885883a 	add	r2,r3,r2
    5a30:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    5a34:	00001206 	br	5a80 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5a38:	e0bff917 	ldw	r2,-28(fp)
    5a3c:	10800037 	ldwio	r2,0(r2)
    5a40:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5a44:	e0bffb17 	ldw	r2,-20(fp)
    5a48:	10a0000c 	andi	r2,r2,32768
    5a4c:	10000626 	beq	r2,zero,5a68 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5a50:	e0bff817 	ldw	r2,-32(fp)
    5a54:	10c00044 	addi	r3,r2,1
    5a58:	e0fff815 	stw	r3,-32(fp)
    5a5c:	e0fffb17 	ldw	r3,-20(fp)
    5a60:	10c00005 	stb	r3,0(r2)
    5a64:	00000606 	br	5a80 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    5a68:	e0fff817 	ldw	r3,-32(fp)
    5a6c:	e0bffd17 	ldw	r2,-12(fp)
    5a70:	1880071e 	bne	r3,r2,5a90 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    5a74:	e0bfff17 	ldw	r2,-4(fp)
    5a78:	1090000c 	andi	r2,r2,16384
    5a7c:	1000061e 	bne	r2,zero,5a98 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5a80:	e0fff817 	ldw	r3,-32(fp)
    5a84:	e0bffa17 	ldw	r2,-24(fp)
    5a88:	18bfeb36 	bltu	r3,r2,5a38 <__alt_mem_epcs_flash+0xffff4a38>
    5a8c:	00000306 	br	5a9c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5a90:	0001883a 	nop
    5a94:	00000106 	br	5a9c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    5a98:	0001883a 	nop
    
  }

  if (ptr != buffer)
    5a9c:	e0fff817 	ldw	r3,-32(fp)
    5aa0:	e0bffd17 	ldw	r2,-12(fp)
    5aa4:	18800426 	beq	r3,r2,5ab8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    5aa8:	e0fff817 	ldw	r3,-32(fp)
    5aac:	e0bffd17 	ldw	r2,-12(fp)
    5ab0:	1885c83a 	sub	r2,r3,r2
    5ab4:	00000606 	br	5ad0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    5ab8:	e0bfff17 	ldw	r2,-4(fp)
    5abc:	1090000c 	andi	r2,r2,16384
    5ac0:	10000226 	beq	r2,zero,5acc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    5ac4:	00bffd44 	movi	r2,-11
    5ac8:	00000106 	br	5ad0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    5acc:	00bffec4 	movi	r2,-5
}
    5ad0:	e037883a 	mov	sp,fp
    5ad4:	df000017 	ldw	fp,0(sp)
    5ad8:	dec00104 	addi	sp,sp,4
    5adc:	f800283a 	ret

00005ae0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5ae0:	defff904 	addi	sp,sp,-28
    5ae4:	df000615 	stw	fp,24(sp)
    5ae8:	df000604 	addi	fp,sp,24
    5aec:	e13ffc15 	stw	r4,-16(fp)
    5af0:	e17ffd15 	stw	r5,-12(fp)
    5af4:	e1bffe15 	stw	r6,-8(fp)
    5af8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5afc:	e0bffc17 	ldw	r2,-16(fp)
    5b00:	10800017 	ldw	r2,0(r2)
    5b04:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    5b08:	e0bffe17 	ldw	r2,-8(fp)
    5b0c:	e0fffd17 	ldw	r3,-12(fp)
    5b10:	1885883a 	add	r2,r3,r2
    5b14:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    5b18:	00000e06 	br	5b54 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5b1c:	e0bffa17 	ldw	r2,-24(fp)
    5b20:	10800104 	addi	r2,r2,4
    5b24:	10800037 	ldwio	r2,0(r2)
    5b28:	10bfffec 	andhi	r2,r2,65535
    5b2c:	10000926 	beq	r2,zero,5b54 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5b30:	e0fffa17 	ldw	r3,-24(fp)
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	11000044 	addi	r4,r2,1
    5b3c:	e13ffd15 	stw	r4,-12(fp)
    5b40:	10800003 	ldbu	r2,0(r2)
    5b44:	10803fcc 	andi	r2,r2,255
    5b48:	1080201c 	xori	r2,r2,128
    5b4c:	10bfe004 	addi	r2,r2,-128
    5b50:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5b54:	e0fffd17 	ldw	r3,-12(fp)
    5b58:	e0bffb17 	ldw	r2,-20(fp)
    5b5c:	18bfef36 	bltu	r3,r2,5b1c <__alt_mem_epcs_flash+0xffff4b1c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5b60:	e0bffe17 	ldw	r2,-8(fp)
}
    5b64:	e037883a 	mov	sp,fp
    5b68:	df000017 	ldw	fp,0(sp)
    5b6c:	dec00104 	addi	sp,sp,4
    5b70:	f800283a 	ret

00005b74 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5b74:	defff404 	addi	sp,sp,-48
    5b78:	df000b15 	stw	fp,44(sp)
    5b7c:	df000b04 	addi	fp,sp,44
    5b80:	e13ffc15 	stw	r4,-16(fp)
    5b84:	e17ffd15 	stw	r5,-12(fp)
    5b88:	e1bffe15 	stw	r6,-8(fp)
    5b8c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    5b90:	e0ffff17 	ldw	r3,-4(fp)
    5b94:	e0bffe17 	ldw	r2,-8(fp)
    5b98:	1885883a 	add	r2,r3,r2
    5b9c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    5ba0:	e0c00217 	ldw	r3,8(fp)
    5ba4:	e0800117 	ldw	r2,4(fp)
    5ba8:	1885883a 	add	r2,r3,r2
    5bac:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    5bb0:	e0800117 	ldw	r2,4(fp)
    5bb4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    5bb8:	e0bffe17 	ldw	r2,-8(fp)
    5bbc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    5bc0:	00800044 	movi	r2,1
    5bc4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5bc8:	e0bffc17 	ldw	r2,-16(fp)
    5bcc:	10800504 	addi	r2,r2,20
    5bd0:	1009883a 	mov	r4,r2
    5bd4:	00c00044 	movi	r3,1
    5bd8:	e0bffd17 	ldw	r2,-12(fp)
    5bdc:	1884983a 	sll	r2,r3,r2
    5be0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5be4:	e0800317 	ldw	r2,12(fp)
    5be8:	1080008c 	andi	r2,r2,2
    5bec:	1000051e 	bne	r2,zero,5c04 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    5bf0:	e0bffc17 	ldw	r2,-16(fp)
    5bf4:	10800304 	addi	r2,r2,12
    5bf8:	1007883a 	mov	r3,r2
    5bfc:	00810004 	movi	r2,1024
    5c00:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5c04:	e0bffc17 	ldw	r2,-16(fp)
    5c08:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5c0c:	e0bffc17 	ldw	r2,-16(fp)
    5c10:	10800204 	addi	r2,r2,8
    5c14:	10800037 	ldwio	r2,0(r2)
    5c18:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5c1c:	e0bffa17 	ldw	r2,-24(fp)
    5c20:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5c24:	10000226 	beq	r2,zero,5c30 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5c28:	e0bff717 	ldw	r2,-36(fp)
    5c2c:	1000031e 	bne	r2,zero,5c3c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5c30:	e0bffa17 	ldw	r2,-24(fp)
    5c34:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5c38:	103ff426 	beq	r2,zero,5c0c <__alt_mem_epcs_flash+0xffff4c0c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    5c3c:	e0bffa17 	ldw	r2,-24(fp)
    5c40:	1080100c 	andi	r2,r2,64
    5c44:	10001e26 	beq	r2,zero,5cc0 <alt_avalon_spi_command+0x14c>
    5c48:	e0bff717 	ldw	r2,-36(fp)
    5c4c:	00801c0e 	bge	zero,r2,5cc0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    5c50:	e0bff717 	ldw	r2,-36(fp)
    5c54:	10bfffc4 	addi	r2,r2,-1
    5c58:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    5c5c:	e0ffff17 	ldw	r3,-4(fp)
    5c60:	e0bff817 	ldw	r2,-32(fp)
    5c64:	18800a2e 	bgeu	r3,r2,5c90 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    5c68:	e0bffc17 	ldw	r2,-16(fp)
    5c6c:	10800104 	addi	r2,r2,4
    5c70:	1009883a 	mov	r4,r2
    5c74:	e0bfff17 	ldw	r2,-4(fp)
    5c78:	10c00044 	addi	r3,r2,1
    5c7c:	e0ffff15 	stw	r3,-4(fp)
    5c80:	10800003 	ldbu	r2,0(r2)
    5c84:	10803fcc 	andi	r2,r2,255
    5c88:	20800035 	stwio	r2,0(r4)
    5c8c:	00000c06 	br	5cc0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    5c90:	e0bff517 	ldw	r2,-44(fp)
    5c94:	10000826 	beq	r2,zero,5cb8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    5c98:	e0bff517 	ldw	r2,-44(fp)
    5c9c:	10bfffc4 	addi	r2,r2,-1
    5ca0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    5ca4:	e0bffc17 	ldw	r2,-16(fp)
    5ca8:	10800104 	addi	r2,r2,4
    5cac:	0007883a 	mov	r3,zero
    5cb0:	10c00035 	stwio	r3,0(r2)
    5cb4:	00000206 	br	5cc0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    5cb8:	00bf0004 	movi	r2,-1024
    5cbc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    5cc0:	e0bffa17 	ldw	r2,-24(fp)
    5cc4:	1080200c 	andi	r2,r2,128
    5cc8:	103fd026 	beq	r2,zero,5c0c <__alt_mem_epcs_flash+0xffff4c0c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5ccc:	e0bffc17 	ldw	r2,-16(fp)
    5cd0:	10800037 	ldwio	r2,0(r2)
    5cd4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    5cd8:	e0bff617 	ldw	r2,-40(fp)
    5cdc:	10000426 	beq	r2,zero,5cf0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    5ce0:	e0bff617 	ldw	r2,-40(fp)
    5ce4:	10bfffc4 	addi	r2,r2,-1
    5ce8:	e0bff615 	stw	r2,-40(fp)
    5cec:	00000506 	br	5d04 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    5cf0:	e0800217 	ldw	r2,8(fp)
    5cf4:	10c00044 	addi	r3,r2,1
    5cf8:	e0c00215 	stw	r3,8(fp)
    5cfc:	e0fffb17 	ldw	r3,-20(fp)
    5d00:	10c00005 	stb	r3,0(r2)
      credits++;
    5d04:	e0bff717 	ldw	r2,-36(fp)
    5d08:	10800044 	addi	r2,r2,1
    5d0c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    5d10:	e0bff617 	ldw	r2,-40(fp)
    5d14:	103fbd1e 	bne	r2,zero,5c0c <__alt_mem_epcs_flash+0xffff4c0c>
    5d18:	e0c00217 	ldw	r3,8(fp)
    5d1c:	e0bff917 	ldw	r2,-28(fp)
    5d20:	18bfba1e 	bne	r3,r2,5c0c <__alt_mem_epcs_flash+0xffff4c0c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5d24:	e0bffc17 	ldw	r2,-16(fp)
    5d28:	10800204 	addi	r2,r2,8
    5d2c:	10800037 	ldwio	r2,0(r2)
    5d30:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    5d34:	e0bffa17 	ldw	r2,-24(fp)
    5d38:	1080080c 	andi	r2,r2,32
    5d3c:	103ff926 	beq	r2,zero,5d24 <__alt_mem_epcs_flash+0xffff4d24>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    5d40:	e0800317 	ldw	r2,12(fp)
    5d44:	1080004c 	andi	r2,r2,1
    5d48:	1000041e 	bne	r2,zero,5d5c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    5d4c:	e0bffc17 	ldw	r2,-16(fp)
    5d50:	10800304 	addi	r2,r2,12
    5d54:	0007883a 	mov	r3,zero
    5d58:	10c00035 	stwio	r3,0(r2)

  return read_length;
    5d5c:	e0800117 	ldw	r2,4(fp)
}
    5d60:	e037883a 	mov	sp,fp
    5d64:	df000017 	ldw	fp,0(sp)
    5d68:	dec00104 	addi	sp,sp,4
    5d6c:	f800283a 	ret

00005d70 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5d70:	defffa04 	addi	sp,sp,-24
    5d74:	dfc00515 	stw	ra,20(sp)
    5d78:	df000415 	stw	fp,16(sp)
    5d7c:	df000404 	addi	fp,sp,16
    5d80:	e13ffd15 	stw	r4,-12(fp)
    5d84:	e17ffe15 	stw	r5,-8(fp)
    5d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    5d8c:	e0bffd17 	ldw	r2,-12(fp)
    5d90:	10800017 	ldw	r2,0(r2)
    5d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    5d98:	e0bffc17 	ldw	r2,-16(fp)
    5d9c:	10c00a04 	addi	r3,r2,40
    5da0:	e0bffd17 	ldw	r2,-12(fp)
    5da4:	10800217 	ldw	r2,8(r2)
    5da8:	100f883a 	mov	r7,r2
    5dac:	e1bfff17 	ldw	r6,-4(fp)
    5db0:	e17ffe17 	ldw	r5,-8(fp)
    5db4:	1809883a 	mov	r4,r3
    5db8:	0005e6c0 	call	5e6c <altera_avalon_uart_read>
      fd->fd_flags);
}
    5dbc:	e037883a 	mov	sp,fp
    5dc0:	dfc00117 	ldw	ra,4(sp)
    5dc4:	df000017 	ldw	fp,0(sp)
    5dc8:	dec00204 	addi	sp,sp,8
    5dcc:	f800283a 	ret

00005dd0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5dd0:	defffa04 	addi	sp,sp,-24
    5dd4:	dfc00515 	stw	ra,20(sp)
    5dd8:	df000415 	stw	fp,16(sp)
    5ddc:	df000404 	addi	fp,sp,16
    5de0:	e13ffd15 	stw	r4,-12(fp)
    5de4:	e17ffe15 	stw	r5,-8(fp)
    5de8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    5dec:	e0bffd17 	ldw	r2,-12(fp)
    5df0:	10800017 	ldw	r2,0(r2)
    5df4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    5df8:	e0bffc17 	ldw	r2,-16(fp)
    5dfc:	10c00a04 	addi	r3,r2,40
    5e00:	e0bffd17 	ldw	r2,-12(fp)
    5e04:	10800217 	ldw	r2,8(r2)
    5e08:	100f883a 	mov	r7,r2
    5e0c:	e1bfff17 	ldw	r6,-4(fp)
    5e10:	e17ffe17 	ldw	r5,-8(fp)
    5e14:	1809883a 	mov	r4,r3
    5e18:	0005f6c0 	call	5f6c <altera_avalon_uart_write>
      fd->fd_flags);
}
    5e1c:	e037883a 	mov	sp,fp
    5e20:	dfc00117 	ldw	ra,4(sp)
    5e24:	df000017 	ldw	fp,0(sp)
    5e28:	dec00204 	addi	sp,sp,8
    5e2c:	f800283a 	ret

00005e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5e30:	defffe04 	addi	sp,sp,-8
    5e34:	dfc00115 	stw	ra,4(sp)
    5e38:	df000015 	stw	fp,0(sp)
    5e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5e40:	d0a00717 	ldw	r2,-32740(gp)
    5e44:	10000326 	beq	r2,zero,5e54 <alt_get_errno+0x24>
    5e48:	d0a00717 	ldw	r2,-32740(gp)
    5e4c:	103ee83a 	callr	r2
    5e50:	00000106 	br	5e58 <alt_get_errno+0x28>
    5e54:	d0a01404 	addi	r2,gp,-32688
}
    5e58:	e037883a 	mov	sp,fp
    5e5c:	dfc00117 	ldw	ra,4(sp)
    5e60:	df000017 	ldw	fp,0(sp)
    5e64:	dec00204 	addi	sp,sp,8
    5e68:	f800283a 	ret

00005e6c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    5e6c:	defff804 	addi	sp,sp,-32
    5e70:	dfc00715 	stw	ra,28(sp)
    5e74:	df000615 	stw	fp,24(sp)
    5e78:	df000604 	addi	fp,sp,24
    5e7c:	e13ffc15 	stw	r4,-16(fp)
    5e80:	e17ffd15 	stw	r5,-12(fp)
    5e84:	e1bffe15 	stw	r6,-8(fp)
    5e88:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    5e8c:	e0bfff17 	ldw	r2,-4(fp)
    5e90:	1090000c 	andi	r2,r2,16384
    5e94:	1005003a 	cmpeq	r2,r2,zero
    5e98:	10803fcc 	andi	r2,r2,255
    5e9c:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    5ea0:	e0bffc17 	ldw	r2,-16(fp)
    5ea4:	10800017 	ldw	r2,0(r2)
    5ea8:	10800204 	addi	r2,r2,8
    5eac:	10800037 	ldwio	r2,0(r2)
    5eb0:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    5eb4:	e0bffc17 	ldw	r2,-16(fp)
    5eb8:	10800017 	ldw	r2,0(r2)
    5ebc:	10800204 	addi	r2,r2,8
    5ec0:	0007883a 	mov	r3,zero
    5ec4:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    5ec8:	e0bffb17 	ldw	r2,-20(fp)
    5ecc:	1080200c 	andi	r2,r2,128
    5ed0:	10000b26 	beq	r2,zero,5f00 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    5ed4:	e0bffc17 	ldw	r2,-16(fp)
    5ed8:	10800017 	ldw	r2,0(r2)
    5edc:	10800037 	ldwio	r2,0(r2)
    5ee0:	1007883a 	mov	r3,r2
    5ee4:	e0bffd17 	ldw	r2,-12(fp)
    5ee8:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    5eec:	e0bffb17 	ldw	r2,-20(fp)
    5ef0:	108000cc 	andi	r2,r2,3
    5ef4:	1000021e 	bne	r2,zero,5f00 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    5ef8:	00800044 	movi	r2,1
    5efc:	00000706 	br	5f1c <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
    5f00:	e0bffa17 	ldw	r2,-24(fp)
    5f04:	103fe61e 	bne	r2,zero,5ea0 <__alt_mem_epcs_flash+0xffff4ea0>

  ALT_ERRNO = EWOULDBLOCK;
    5f08:	0005e300 	call	5e30 <alt_get_errno>
    5f0c:	1007883a 	mov	r3,r2
    5f10:	008002c4 	movi	r2,11
    5f14:	18800015 	stw	r2,0(r3)
 
  return 0;
    5f18:	0005883a 	mov	r2,zero
}
    5f1c:	e037883a 	mov	sp,fp
    5f20:	dfc00117 	ldw	ra,4(sp)
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00204 	addi	sp,sp,8
    5f2c:	f800283a 	ret

00005f30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5f30:	defffe04 	addi	sp,sp,-8
    5f34:	dfc00115 	stw	ra,4(sp)
    5f38:	df000015 	stw	fp,0(sp)
    5f3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5f40:	d0a00717 	ldw	r2,-32740(gp)
    5f44:	10000326 	beq	r2,zero,5f54 <alt_get_errno+0x24>
    5f48:	d0a00717 	ldw	r2,-32740(gp)
    5f4c:	103ee83a 	callr	r2
    5f50:	00000106 	br	5f58 <alt_get_errno+0x28>
    5f54:	d0a01404 	addi	r2,gp,-32688
}
    5f58:	e037883a 	mov	sp,fp
    5f5c:	dfc00117 	ldw	ra,4(sp)
    5f60:	df000017 	ldw	fp,0(sp)
    5f64:	dec00204 	addi	sp,sp,8
    5f68:	f800283a 	ret

00005f6c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    5f6c:	defff704 	addi	sp,sp,-36
    5f70:	dfc00815 	stw	ra,32(sp)
    5f74:	df000715 	stw	fp,28(sp)
    5f78:	df000704 	addi	fp,sp,28
    5f7c:	e13ffc15 	stw	r4,-16(fp)
    5f80:	e17ffd15 	stw	r5,-12(fp)
    5f84:	e1bffe15 	stw	r6,-8(fp)
    5f88:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    5f8c:	e0bfff17 	ldw	r2,-4(fp)
    5f90:	1090000c 	andi	r2,r2,16384
    5f94:	1005003a 	cmpeq	r2,r2,zero
    5f98:	10803fcc 	andi	r2,r2,255
    5f9c:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    5fa0:	e0bffe17 	ldw	r2,-8(fp)
    5fa4:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    5fa8:	e0bffc17 	ldw	r2,-16(fp)
    5fac:	10800017 	ldw	r2,0(r2)
    5fb0:	10800204 	addi	r2,r2,8
    5fb4:	10800037 	ldwio	r2,0(r2)
    5fb8:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    5fbc:	e0bffb17 	ldw	r2,-20(fp)
    5fc0:	1080100c 	andi	r2,r2,64
    5fc4:	10000f26 	beq	r2,zero,6004 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    5fc8:	e0bffc17 	ldw	r2,-16(fp)
    5fcc:	10800017 	ldw	r2,0(r2)
    5fd0:	10800104 	addi	r2,r2,4
    5fd4:	1009883a 	mov	r4,r2
    5fd8:	e0bffd17 	ldw	r2,-12(fp)
    5fdc:	10c00044 	addi	r3,r2,1
    5fe0:	e0fffd15 	stw	r3,-12(fp)
    5fe4:	10800003 	ldbu	r2,0(r2)
    5fe8:	10803fcc 	andi	r2,r2,255
    5fec:	1080201c 	xori	r2,r2,128
    5ff0:	10bfe004 	addi	r2,r2,-128
    5ff4:	20800035 	stwio	r2,0(r4)
      count--;
    5ff8:	e0bff917 	ldw	r2,-28(fp)
    5ffc:	10bfffc4 	addi	r2,r2,-1
    6000:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    6004:	e0bffa17 	ldw	r2,-24(fp)
    6008:	10000226 	beq	r2,zero,6014 <altera_avalon_uart_write+0xa8>
    600c:	e0bff917 	ldw	r2,-28(fp)
    6010:	103fe51e 	bne	r2,zero,5fa8 <__alt_mem_epcs_flash+0xffff4fa8>

  if (count)
    6014:	e0bff917 	ldw	r2,-28(fp)
    6018:	10000426 	beq	r2,zero,602c <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
    601c:	0005f300 	call	5f30 <alt_get_errno>
    6020:	1007883a 	mov	r3,r2
    6024:	008002c4 	movi	r2,11
    6028:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
    602c:	e0fffe17 	ldw	r3,-8(fp)
    6030:	e0bff917 	ldw	r2,-28(fp)
    6034:	1885c83a 	sub	r2,r3,r2
}
    6038:	e037883a 	mov	sp,fp
    603c:	dfc00117 	ldw	ra,4(sp)
    6040:	df000017 	ldw	fp,0(sp)
    6044:	dec00204 	addi	sp,sp,8
    6048:	f800283a 	ret

0000604c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    604c:	defffa04 	addi	sp,sp,-24
    6050:	dfc00515 	stw	ra,20(sp)
    6054:	df000415 	stw	fp,16(sp)
    6058:	df000404 	addi	fp,sp,16
    605c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    6060:	008000c4 	movi	r2,3
    6064:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    6068:	e0fffd17 	ldw	r3,-12(fp)
    606c:	008003f4 	movhi	r2,15
    6070:	10909004 	addi	r2,r2,16960
    6074:	1885383a 	mul	r2,r3,r2
    6078:	100b883a 	mov	r5,r2
    607c:	01017db4 	movhi	r4,1526
    6080:	21384004 	addi	r4,r4,-7936
    6084:	0006d340 	call	6d34 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6088:	100b883a 	mov	r5,r2
    608c:	01200034 	movhi	r4,32768
    6090:	213fffc4 	addi	r4,r4,-1
    6094:	0006d340 	call	6d34 <__udivsi3>
    6098:	100b883a 	mov	r5,r2
    609c:	e13fff17 	ldw	r4,-4(fp)
    60a0:	0006d340 	call	6d34 <__udivsi3>
    60a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    60a8:	e0bffe17 	ldw	r2,-8(fp)
    60ac:	10002a26 	beq	r2,zero,6158 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    60b0:	e03ffc15 	stw	zero,-16(fp)
    60b4:	00001706 	br	6114 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    60b8:	00a00034 	movhi	r2,32768
    60bc:	10bfffc4 	addi	r2,r2,-1
    60c0:	10bfffc4 	addi	r2,r2,-1
    60c4:	103ffe1e 	bne	r2,zero,60c0 <__alt_mem_epcs_flash+0xffff50c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    60c8:	e0fffd17 	ldw	r3,-12(fp)
    60cc:	008003f4 	movhi	r2,15
    60d0:	10909004 	addi	r2,r2,16960
    60d4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    60d8:	100b883a 	mov	r5,r2
    60dc:	01017db4 	movhi	r4,1526
    60e0:	21384004 	addi	r4,r4,-7936
    60e4:	0006d340 	call	6d34 <__udivsi3>
    60e8:	100b883a 	mov	r5,r2
    60ec:	01200034 	movhi	r4,32768
    60f0:	213fffc4 	addi	r4,r4,-1
    60f4:	0006d340 	call	6d34 <__udivsi3>
    60f8:	1007883a 	mov	r3,r2
    60fc:	e0bfff17 	ldw	r2,-4(fp)
    6100:	10c5c83a 	sub	r2,r2,r3
    6104:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    6108:	e0bffc17 	ldw	r2,-16(fp)
    610c:	10800044 	addi	r2,r2,1
    6110:	e0bffc15 	stw	r2,-16(fp)
    6114:	e0fffc17 	ldw	r3,-16(fp)
    6118:	e0bffe17 	ldw	r2,-8(fp)
    611c:	18bfe616 	blt	r3,r2,60b8 <__alt_mem_epcs_flash+0xffff50b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    6120:	e0fffd17 	ldw	r3,-12(fp)
    6124:	008003f4 	movhi	r2,15
    6128:	10909004 	addi	r2,r2,16960
    612c:	1885383a 	mul	r2,r3,r2
    6130:	100b883a 	mov	r5,r2
    6134:	01017db4 	movhi	r4,1526
    6138:	21384004 	addi	r4,r4,-7936
    613c:	0006d340 	call	6d34 <__udivsi3>
    6140:	1007883a 	mov	r3,r2
    6144:	e0bfff17 	ldw	r2,-4(fp)
    6148:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    614c:	10bfffc4 	addi	r2,r2,-1
    6150:	103ffe1e 	bne	r2,zero,614c <__alt_mem_epcs_flash+0xffff514c>
    6154:	00000d06 	br	618c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    6158:	e0fffd17 	ldw	r3,-12(fp)
    615c:	008003f4 	movhi	r2,15
    6160:	10909004 	addi	r2,r2,16960
    6164:	1885383a 	mul	r2,r3,r2
    6168:	100b883a 	mov	r5,r2
    616c:	01017db4 	movhi	r4,1526
    6170:	21384004 	addi	r4,r4,-7936
    6174:	0006d340 	call	6d34 <__udivsi3>
    6178:	1007883a 	mov	r3,r2
    617c:	e0bfff17 	ldw	r2,-4(fp)
    6180:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6184:	10bfffc4 	addi	r2,r2,-1
    6188:	00bffe16 	blt	zero,r2,6184 <__alt_mem_epcs_flash+0xffff5184>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    618c:	0005883a 	mov	r2,zero
}
    6190:	e037883a 	mov	sp,fp
    6194:	dfc00117 	ldw	ra,4(sp)
    6198:	df000017 	ldw	fp,0(sp)
    619c:	dec00204 	addi	sp,sp,8
    61a0:	f800283a 	ret

000061a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    61a4:	defffe04 	addi	sp,sp,-8
    61a8:	dfc00115 	stw	ra,4(sp)
    61ac:	df000015 	stw	fp,0(sp)
    61b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    61b4:	d0a00717 	ldw	r2,-32740(gp)
    61b8:	10000326 	beq	r2,zero,61c8 <alt_get_errno+0x24>
    61bc:	d0a00717 	ldw	r2,-32740(gp)
    61c0:	103ee83a 	callr	r2
    61c4:	00000106 	br	61cc <alt_get_errno+0x28>
    61c8:	d0a01404 	addi	r2,gp,-32688
}
    61cc:	e037883a 	mov	sp,fp
    61d0:	dfc00117 	ldw	ra,4(sp)
    61d4:	df000017 	ldw	fp,0(sp)
    61d8:	dec00204 	addi	sp,sp,8
    61dc:	f800283a 	ret

000061e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    61e0:	defffb04 	addi	sp,sp,-20
    61e4:	dfc00415 	stw	ra,16(sp)
    61e8:	df000315 	stw	fp,12(sp)
    61ec:	df000304 	addi	fp,sp,12
    61f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    61f4:	e0bfff17 	ldw	r2,-4(fp)
    61f8:	10000616 	blt	r2,zero,6214 <close+0x34>
    61fc:	e0bfff17 	ldw	r2,-4(fp)
    6200:	10c00324 	muli	r3,r2,12
    6204:	00800034 	movhi	r2,0
    6208:	109bc404 	addi	r2,r2,28432
    620c:	1885883a 	add	r2,r3,r2
    6210:	00000106 	br	6218 <close+0x38>
    6214:	0005883a 	mov	r2,zero
    6218:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    621c:	e0bffd17 	ldw	r2,-12(fp)
    6220:	10001926 	beq	r2,zero,6288 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    6224:	e0bffd17 	ldw	r2,-12(fp)
    6228:	10800017 	ldw	r2,0(r2)
    622c:	10800417 	ldw	r2,16(r2)
    6230:	10000626 	beq	r2,zero,624c <close+0x6c>
    6234:	e0bffd17 	ldw	r2,-12(fp)
    6238:	10800017 	ldw	r2,0(r2)
    623c:	10800417 	ldw	r2,16(r2)
    6240:	e13ffd17 	ldw	r4,-12(fp)
    6244:	103ee83a 	callr	r2
    6248:	00000106 	br	6250 <close+0x70>
    624c:	0005883a 	mov	r2,zero
    6250:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6254:	e13fff17 	ldw	r4,-4(fp)
    6258:	000689c0 	call	689c <alt_release_fd>
    if (rval < 0)
    625c:	e0bffe17 	ldw	r2,-8(fp)
    6260:	1000070e 	bge	r2,zero,6280 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    6264:	00061a40 	call	61a4 <alt_get_errno>
    6268:	1007883a 	mov	r3,r2
    626c:	e0bffe17 	ldw	r2,-8(fp)
    6270:	0085c83a 	sub	r2,zero,r2
    6274:	18800015 	stw	r2,0(r3)
      return -1;
    6278:	00bfffc4 	movi	r2,-1
    627c:	00000706 	br	629c <close+0xbc>
    }
    return 0;
    6280:	0005883a 	mov	r2,zero
    6284:	00000506 	br	629c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6288:	00061a40 	call	61a4 <alt_get_errno>
    628c:	1007883a 	mov	r3,r2
    6290:	00801444 	movi	r2,81
    6294:	18800015 	stw	r2,0(r3)
    return -1;
    6298:	00bfffc4 	movi	r2,-1
  }
}
    629c:	e037883a 	mov	sp,fp
    62a0:	dfc00117 	ldw	ra,4(sp)
    62a4:	df000017 	ldw	fp,0(sp)
    62a8:	dec00204 	addi	sp,sp,8
    62ac:	f800283a 	ret

000062b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    62b0:	defffe04 	addi	sp,sp,-8
    62b4:	df000115 	stw	fp,4(sp)
    62b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    62bc:	e03fff15 	stw	zero,-4(fp)
    62c0:	00000506 	br	62d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    62c4:	e0bfff17 	ldw	r2,-4(fp)
    62c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    62cc:	e0bfff17 	ldw	r2,-4(fp)
    62d0:	10800804 	addi	r2,r2,32
    62d4:	e0bfff15 	stw	r2,-4(fp)
    62d8:	e0bfff17 	ldw	r2,-4(fp)
    62dc:	10820030 	cmpltui	r2,r2,2048
    62e0:	103ff81e 	bne	r2,zero,62c4 <__alt_mem_epcs_flash+0xffff52c4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    62e4:	0001883a 	nop
    62e8:	e037883a 	mov	sp,fp
    62ec:	df000017 	ldw	fp,0(sp)
    62f0:	dec00104 	addi	sp,sp,4
    62f4:	f800283a 	ret

000062f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    62f8:	defffc04 	addi	sp,sp,-16
    62fc:	df000315 	stw	fp,12(sp)
    6300:	df000304 	addi	fp,sp,12
    6304:	e13ffd15 	stw	r4,-12(fp)
    6308:	e17ffe15 	stw	r5,-8(fp)
    630c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    6310:	e0bfff17 	ldw	r2,-4(fp)
}
    6314:	e037883a 	mov	sp,fp
    6318:	df000017 	ldw	fp,0(sp)
    631c:	dec00104 	addi	sp,sp,4
    6320:	f800283a 	ret

00006324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6324:	defffe04 	addi	sp,sp,-8
    6328:	dfc00115 	stw	ra,4(sp)
    632c:	df000015 	stw	fp,0(sp)
    6330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6334:	d0a00717 	ldw	r2,-32740(gp)
    6338:	10000326 	beq	r2,zero,6348 <alt_get_errno+0x24>
    633c:	d0a00717 	ldw	r2,-32740(gp)
    6340:	103ee83a 	callr	r2
    6344:	00000106 	br	634c <alt_get_errno+0x28>
    6348:	d0a01404 	addi	r2,gp,-32688
}
    634c:	e037883a 	mov	sp,fp
    6350:	dfc00117 	ldw	ra,4(sp)
    6354:	df000017 	ldw	fp,0(sp)
    6358:	dec00204 	addi	sp,sp,8
    635c:	f800283a 	ret

00006360 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6360:	defffa04 	addi	sp,sp,-24
    6364:	dfc00515 	stw	ra,20(sp)
    6368:	df000415 	stw	fp,16(sp)
    636c:	df000404 	addi	fp,sp,16
    6370:	e13ffe15 	stw	r4,-8(fp)
    6374:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6378:	e0bffe17 	ldw	r2,-8(fp)
    637c:	10000326 	beq	r2,zero,638c <alt_dev_llist_insert+0x2c>
    6380:	e0bffe17 	ldw	r2,-8(fp)
    6384:	10800217 	ldw	r2,8(r2)
    6388:	1000061e 	bne	r2,zero,63a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    638c:	00063240 	call	6324 <alt_get_errno>
    6390:	1007883a 	mov	r3,r2
    6394:	00800584 	movi	r2,22
    6398:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    639c:	00bffa84 	movi	r2,-22
    63a0:	00001306 	br	63f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    63a4:	e0bffe17 	ldw	r2,-8(fp)
    63a8:	e0ffff17 	ldw	r3,-4(fp)
    63ac:	e0fffc15 	stw	r3,-16(fp)
    63b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    63b4:	e0bffd17 	ldw	r2,-12(fp)
    63b8:	e0fffc17 	ldw	r3,-16(fp)
    63bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    63c0:	e0bffc17 	ldw	r2,-16(fp)
    63c4:	10c00017 	ldw	r3,0(r2)
    63c8:	e0bffd17 	ldw	r2,-12(fp)
    63cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    63d0:	e0bffc17 	ldw	r2,-16(fp)
    63d4:	10800017 	ldw	r2,0(r2)
    63d8:	e0fffd17 	ldw	r3,-12(fp)
    63dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    63e0:	e0bffc17 	ldw	r2,-16(fp)
    63e4:	e0fffd17 	ldw	r3,-12(fp)
    63e8:	10c00015 	stw	r3,0(r2)

  return 0;  
    63ec:	0005883a 	mov	r2,zero
}
    63f0:	e037883a 	mov	sp,fp
    63f4:	dfc00117 	ldw	ra,4(sp)
    63f8:	df000017 	ldw	fp,0(sp)
    63fc:	dec00204 	addi	sp,sp,8
    6400:	f800283a 	ret

00006404 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6404:	defffd04 	addi	sp,sp,-12
    6408:	df000215 	stw	fp,8(sp)
    640c:	df000204 	addi	fp,sp,8
    6410:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6414:	0001883a 	nop
    6418:	e0bfff17 	ldw	r2,-4(fp)
    641c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6420:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6424:	10000226 	beq	r2,zero,6430 <_exit+0x2c>
    ALT_SIM_FAIL();
    6428:	002af070 	cmpltui	zero,zero,43969
    642c:	00000106 	br	6434 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6430:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6434:	003fff06 	br	6434 <__alt_mem_epcs_flash+0xffff5434>

00006438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6438:	defffe04 	addi	sp,sp,-8
    643c:	dfc00115 	stw	ra,4(sp)
    6440:	df000015 	stw	fp,0(sp)
    6444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    6448:	01440004 	movi	r5,4096
    644c:	0009883a 	mov	r4,zero
    6450:	0006b600 	call	6b60 <alt_icache_flush>
#endif
}
    6454:	0001883a 	nop
    6458:	e037883a 	mov	sp,fp
    645c:	dfc00117 	ldw	ra,4(sp)
    6460:	df000017 	ldw	fp,0(sp)
    6464:	dec00204 	addi	sp,sp,8
    6468:	f800283a 	ret

0000646c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    646c:	defffe04 	addi	sp,sp,-8
    6470:	df000115 	stw	fp,4(sp)
    6474:	df000104 	addi	fp,sp,4
    6478:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    647c:	e0bfff17 	ldw	r2,-4(fp)
    6480:	10bffe84 	addi	r2,r2,-6
    6484:	10c00428 	cmpgeui	r3,r2,16
    6488:	18001a1e 	bne	r3,zero,64f4 <alt_exception_cause_generated_bad_addr+0x88>
    648c:	100690ba 	slli	r3,r2,2
    6490:	00800034 	movhi	r2,0
    6494:	10992904 	addi	r2,r2,25764
    6498:	1885883a 	add	r2,r3,r2
    649c:	10800017 	ldw	r2,0(r2)
    64a0:	1000683a 	jmp	r2
    64a4:	000064e4 	muli	zero,zero,403
    64a8:	000064e4 	muli	zero,zero,403
    64ac:	000064f4 	movhi	zero,403
    64b0:	000064f4 	movhi	zero,403
    64b4:	000064f4 	movhi	zero,403
    64b8:	000064e4 	muli	zero,zero,403
    64bc:	000064ec 	andhi	zero,zero,403
    64c0:	000064f4 	movhi	zero,403
    64c4:	000064e4 	muli	zero,zero,403
    64c8:	000064e4 	muli	zero,zero,403
    64cc:	000064f4 	movhi	zero,403
    64d0:	000064e4 	muli	zero,zero,403
    64d4:	000064ec 	andhi	zero,zero,403
    64d8:	000064f4 	movhi	zero,403
    64dc:	000064f4 	movhi	zero,403
    64e0:	000064e4 	muli	zero,zero,403
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    64e4:	00800044 	movi	r2,1
    64e8:	00000306 	br	64f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    64ec:	0005883a 	mov	r2,zero
    64f0:	00000106 	br	64f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    64f4:	0005883a 	mov	r2,zero
  }
}
    64f8:	e037883a 	mov	sp,fp
    64fc:	df000017 	ldw	fp,0(sp)
    6500:	dec00104 	addi	sp,sp,4
    6504:	f800283a 	ret

00006508 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    6508:	defff904 	addi	sp,sp,-28
    650c:	dfc00615 	stw	ra,24(sp)
    6510:	df000515 	stw	fp,20(sp)
    6514:	df000504 	addi	fp,sp,20
    6518:	e13ffc15 	stw	r4,-16(fp)
    651c:	e17ffd15 	stw	r5,-12(fp)
    6520:	e1bffe15 	stw	r6,-8(fp)
    6524:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    6528:	e1bfff17 	ldw	r6,-4(fp)
    652c:	e17ffe17 	ldw	r5,-8(fp)
    6530:	e13ffd17 	ldw	r4,-12(fp)
    6534:	00067480 	call	6748 <open>
    6538:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    653c:	e0bffb17 	ldw	r2,-20(fp)
    6540:	10001c16 	blt	r2,zero,65b4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    6544:	00800034 	movhi	r2,0
    6548:	109bc404 	addi	r2,r2,28432
    654c:	e0fffb17 	ldw	r3,-20(fp)
    6550:	18c00324 	muli	r3,r3,12
    6554:	10c5883a 	add	r2,r2,r3
    6558:	10c00017 	ldw	r3,0(r2)
    655c:	e0bffc17 	ldw	r2,-16(fp)
    6560:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    6564:	00800034 	movhi	r2,0
    6568:	109bc404 	addi	r2,r2,28432
    656c:	e0fffb17 	ldw	r3,-20(fp)
    6570:	18c00324 	muli	r3,r3,12
    6574:	10c5883a 	add	r2,r2,r3
    6578:	10800104 	addi	r2,r2,4
    657c:	10c00017 	ldw	r3,0(r2)
    6580:	e0bffc17 	ldw	r2,-16(fp)
    6584:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6588:	00800034 	movhi	r2,0
    658c:	109bc404 	addi	r2,r2,28432
    6590:	e0fffb17 	ldw	r3,-20(fp)
    6594:	18c00324 	muli	r3,r3,12
    6598:	10c5883a 	add	r2,r2,r3
    659c:	10800204 	addi	r2,r2,8
    65a0:	10c00017 	ldw	r3,0(r2)
    65a4:	e0bffc17 	ldw	r2,-16(fp)
    65a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    65ac:	e13ffb17 	ldw	r4,-20(fp)
    65b0:	000689c0 	call	689c <alt_release_fd>
  }
} 
    65b4:	0001883a 	nop
    65b8:	e037883a 	mov	sp,fp
    65bc:	dfc00117 	ldw	ra,4(sp)
    65c0:	df000017 	ldw	fp,0(sp)
    65c4:	dec00204 	addi	sp,sp,8
    65c8:	f800283a 	ret

000065cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    65cc:	defffb04 	addi	sp,sp,-20
    65d0:	dfc00415 	stw	ra,16(sp)
    65d4:	df000315 	stw	fp,12(sp)
    65d8:	df000304 	addi	fp,sp,12
    65dc:	e13ffd15 	stw	r4,-12(fp)
    65e0:	e17ffe15 	stw	r5,-8(fp)
    65e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    65e8:	01c07fc4 	movi	r7,511
    65ec:	01800044 	movi	r6,1
    65f0:	e17ffd17 	ldw	r5,-12(fp)
    65f4:	01000034 	movhi	r4,0
    65f8:	211bc704 	addi	r4,r4,28444
    65fc:	00065080 	call	6508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6600:	01c07fc4 	movi	r7,511
    6604:	000d883a 	mov	r6,zero
    6608:	e17ffe17 	ldw	r5,-8(fp)
    660c:	01000034 	movhi	r4,0
    6610:	211bc404 	addi	r4,r4,28432
    6614:	00065080 	call	6508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6618:	01c07fc4 	movi	r7,511
    661c:	01800044 	movi	r6,1
    6620:	e17fff17 	ldw	r5,-4(fp)
    6624:	01000034 	movhi	r4,0
    6628:	211bca04 	addi	r4,r4,28456
    662c:	00065080 	call	6508 <alt_open_fd>
}  
    6630:	0001883a 	nop
    6634:	e037883a 	mov	sp,fp
    6638:	dfc00117 	ldw	ra,4(sp)
    663c:	df000017 	ldw	fp,0(sp)
    6640:	dec00204 	addi	sp,sp,8
    6644:	f800283a 	ret

00006648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6648:	defffe04 	addi	sp,sp,-8
    664c:	dfc00115 	stw	ra,4(sp)
    6650:	df000015 	stw	fp,0(sp)
    6654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6658:	d0a00717 	ldw	r2,-32740(gp)
    665c:	10000326 	beq	r2,zero,666c <alt_get_errno+0x24>
    6660:	d0a00717 	ldw	r2,-32740(gp)
    6664:	103ee83a 	callr	r2
    6668:	00000106 	br	6670 <alt_get_errno+0x28>
    666c:	d0a01404 	addi	r2,gp,-32688
}
    6670:	e037883a 	mov	sp,fp
    6674:	dfc00117 	ldw	ra,4(sp)
    6678:	df000017 	ldw	fp,0(sp)
    667c:	dec00204 	addi	sp,sp,8
    6680:	f800283a 	ret

00006684 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6684:	defffd04 	addi	sp,sp,-12
    6688:	df000215 	stw	fp,8(sp)
    668c:	df000204 	addi	fp,sp,8
    6690:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6694:	e0bfff17 	ldw	r2,-4(fp)
    6698:	10800217 	ldw	r2,8(r2)
    669c:	10d00034 	orhi	r3,r2,16384
    66a0:	e0bfff17 	ldw	r2,-4(fp)
    66a4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    66a8:	e03ffe15 	stw	zero,-8(fp)
    66ac:	00001d06 	br	6724 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    66b0:	00800034 	movhi	r2,0
    66b4:	109bc404 	addi	r2,r2,28432
    66b8:	e0fffe17 	ldw	r3,-8(fp)
    66bc:	18c00324 	muli	r3,r3,12
    66c0:	10c5883a 	add	r2,r2,r3
    66c4:	10c00017 	ldw	r3,0(r2)
    66c8:	e0bfff17 	ldw	r2,-4(fp)
    66cc:	10800017 	ldw	r2,0(r2)
    66d0:	1880111e 	bne	r3,r2,6718 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    66d4:	00800034 	movhi	r2,0
    66d8:	109bc404 	addi	r2,r2,28432
    66dc:	e0fffe17 	ldw	r3,-8(fp)
    66e0:	18c00324 	muli	r3,r3,12
    66e4:	10c5883a 	add	r2,r2,r3
    66e8:	10800204 	addi	r2,r2,8
    66ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    66f0:	1000090e 	bge	r2,zero,6718 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    66f4:	e0bffe17 	ldw	r2,-8(fp)
    66f8:	10c00324 	muli	r3,r2,12
    66fc:	00800034 	movhi	r2,0
    6700:	109bc404 	addi	r2,r2,28432
    6704:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6708:	e0bfff17 	ldw	r2,-4(fp)
    670c:	18800226 	beq	r3,r2,6718 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    6710:	00bffcc4 	movi	r2,-13
    6714:	00000806 	br	6738 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6718:	e0bffe17 	ldw	r2,-8(fp)
    671c:	10800044 	addi	r2,r2,1
    6720:	e0bffe15 	stw	r2,-8(fp)
    6724:	d0a00617 	ldw	r2,-32744(gp)
    6728:	1007883a 	mov	r3,r2
    672c:	e0bffe17 	ldw	r2,-8(fp)
    6730:	18bfdf2e 	bgeu	r3,r2,66b0 <__alt_mem_epcs_flash+0xffff56b0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6734:	0005883a 	mov	r2,zero
}
    6738:	e037883a 	mov	sp,fp
    673c:	df000017 	ldw	fp,0(sp)
    6740:	dec00104 	addi	sp,sp,4
    6744:	f800283a 	ret

00006748 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6748:	defff604 	addi	sp,sp,-40
    674c:	dfc00915 	stw	ra,36(sp)
    6750:	df000815 	stw	fp,32(sp)
    6754:	df000804 	addi	fp,sp,32
    6758:	e13ffd15 	stw	r4,-12(fp)
    675c:	e17ffe15 	stw	r5,-8(fp)
    6760:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6764:	00bfffc4 	movi	r2,-1
    6768:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    676c:	00bffb44 	movi	r2,-19
    6770:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6774:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6778:	d1600404 	addi	r5,gp,-32752
    677c:	e13ffd17 	ldw	r4,-12(fp)
    6780:	00069240 	call	6924 <alt_find_dev>
    6784:	e0bff815 	stw	r2,-32(fp)
    6788:	e0bff817 	ldw	r2,-32(fp)
    678c:	1000051e 	bne	r2,zero,67a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6790:	e13ffd17 	ldw	r4,-12(fp)
    6794:	00069b40 	call	69b4 <alt_find_file>
    6798:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    679c:	00800044 	movi	r2,1
    67a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    67a4:	e0bff817 	ldw	r2,-32(fp)
    67a8:	10002926 	beq	r2,zero,6850 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    67ac:	e13ff817 	ldw	r4,-32(fp)
    67b0:	0006abc0 	call	6abc <alt_get_fd>
    67b4:	e0bff915 	stw	r2,-28(fp)
    67b8:	e0bff917 	ldw	r2,-28(fp)
    67bc:	1000030e 	bge	r2,zero,67cc <open+0x84>
    {
      status = index;
    67c0:	e0bff917 	ldw	r2,-28(fp)
    67c4:	e0bffa15 	stw	r2,-24(fp)
    67c8:	00002306 	br	6858 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    67cc:	e0bff917 	ldw	r2,-28(fp)
    67d0:	10c00324 	muli	r3,r2,12
    67d4:	00800034 	movhi	r2,0
    67d8:	109bc404 	addi	r2,r2,28432
    67dc:	1885883a 	add	r2,r3,r2
    67e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    67e4:	e0fffe17 	ldw	r3,-8(fp)
    67e8:	00900034 	movhi	r2,16384
    67ec:	10bfffc4 	addi	r2,r2,-1
    67f0:	1886703a 	and	r3,r3,r2
    67f4:	e0bffc17 	ldw	r2,-16(fp)
    67f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    67fc:	e0bffb17 	ldw	r2,-20(fp)
    6800:	1000051e 	bne	r2,zero,6818 <open+0xd0>
    6804:	e13ffc17 	ldw	r4,-16(fp)
    6808:	00066840 	call	6684 <alt_file_locked>
    680c:	e0bffa15 	stw	r2,-24(fp)
    6810:	e0bffa17 	ldw	r2,-24(fp)
    6814:	10001016 	blt	r2,zero,6858 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6818:	e0bff817 	ldw	r2,-32(fp)
    681c:	10800317 	ldw	r2,12(r2)
    6820:	10000826 	beq	r2,zero,6844 <open+0xfc>
    6824:	e0bff817 	ldw	r2,-32(fp)
    6828:	10800317 	ldw	r2,12(r2)
    682c:	e1ffff17 	ldw	r7,-4(fp)
    6830:	e1bffe17 	ldw	r6,-8(fp)
    6834:	e17ffd17 	ldw	r5,-12(fp)
    6838:	e13ffc17 	ldw	r4,-16(fp)
    683c:	103ee83a 	callr	r2
    6840:	00000106 	br	6848 <open+0x100>
    6844:	0005883a 	mov	r2,zero
    6848:	e0bffa15 	stw	r2,-24(fp)
    684c:	00000206 	br	6858 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6850:	00bffb44 	movi	r2,-19
    6854:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6858:	e0bffa17 	ldw	r2,-24(fp)
    685c:	1000090e 	bge	r2,zero,6884 <open+0x13c>
  {
    alt_release_fd (index);  
    6860:	e13ff917 	ldw	r4,-28(fp)
    6864:	000689c0 	call	689c <alt_release_fd>
    ALT_ERRNO = -status;
    6868:	00066480 	call	6648 <alt_get_errno>
    686c:	1007883a 	mov	r3,r2
    6870:	e0bffa17 	ldw	r2,-24(fp)
    6874:	0085c83a 	sub	r2,zero,r2
    6878:	18800015 	stw	r2,0(r3)
    return -1;
    687c:	00bfffc4 	movi	r2,-1
    6880:	00000106 	br	6888 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    6884:	e0bff917 	ldw	r2,-28(fp)
}
    6888:	e037883a 	mov	sp,fp
    688c:	dfc00117 	ldw	ra,4(sp)
    6890:	df000017 	ldw	fp,0(sp)
    6894:	dec00204 	addi	sp,sp,8
    6898:	f800283a 	ret

0000689c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    689c:	defffe04 	addi	sp,sp,-8
    68a0:	df000115 	stw	fp,4(sp)
    68a4:	df000104 	addi	fp,sp,4
    68a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    68ac:	e0bfff17 	ldw	r2,-4(fp)
    68b0:	108000d0 	cmplti	r2,r2,3
    68b4:	10000d1e 	bne	r2,zero,68ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    68b8:	00800034 	movhi	r2,0
    68bc:	109bc404 	addi	r2,r2,28432
    68c0:	e0ffff17 	ldw	r3,-4(fp)
    68c4:	18c00324 	muli	r3,r3,12
    68c8:	10c5883a 	add	r2,r2,r3
    68cc:	10800204 	addi	r2,r2,8
    68d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    68d4:	00800034 	movhi	r2,0
    68d8:	109bc404 	addi	r2,r2,28432
    68dc:	e0ffff17 	ldw	r3,-4(fp)
    68e0:	18c00324 	muli	r3,r3,12
    68e4:	10c5883a 	add	r2,r2,r3
    68e8:	10000015 	stw	zero,0(r2)
  }
}
    68ec:	0001883a 	nop
    68f0:	e037883a 	mov	sp,fp
    68f4:	df000017 	ldw	fp,0(sp)
    68f8:	dec00104 	addi	sp,sp,4
    68fc:	f800283a 	ret

00006900 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    6900:	deffff04 	addi	sp,sp,-4
    6904:	df000015 	stw	fp,0(sp)
    6908:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    690c:	000170fa 	wrctl	ienable,zero
}
    6910:	0001883a 	nop
    6914:	e037883a 	mov	sp,fp
    6918:	df000017 	ldw	fp,0(sp)
    691c:	dec00104 	addi	sp,sp,4
    6920:	f800283a 	ret

00006924 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6924:	defffa04 	addi	sp,sp,-24
    6928:	dfc00515 	stw	ra,20(sp)
    692c:	df000415 	stw	fp,16(sp)
    6930:	df000404 	addi	fp,sp,16
    6934:	e13ffe15 	stw	r4,-8(fp)
    6938:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    693c:	e0bfff17 	ldw	r2,-4(fp)
    6940:	10800017 	ldw	r2,0(r2)
    6944:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    6948:	e13ffe17 	ldw	r4,-8(fp)
    694c:	0006c200 	call	6c20 <strlen>
    6950:	10800044 	addi	r2,r2,1
    6954:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6958:	00000d06 	br	6990 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    695c:	e0bffc17 	ldw	r2,-16(fp)
    6960:	10800217 	ldw	r2,8(r2)
    6964:	e0fffd17 	ldw	r3,-12(fp)
    6968:	180d883a 	mov	r6,r3
    696c:	e17ffe17 	ldw	r5,-8(fp)
    6970:	1009883a 	mov	r4,r2
    6974:	0006bf00 	call	6bf0 <memcmp>
    6978:	1000021e 	bne	r2,zero,6984 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    697c:	e0bffc17 	ldw	r2,-16(fp)
    6980:	00000706 	br	69a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6984:	e0bffc17 	ldw	r2,-16(fp)
    6988:	10800017 	ldw	r2,0(r2)
    698c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6990:	e0fffc17 	ldw	r3,-16(fp)
    6994:	e0bfff17 	ldw	r2,-4(fp)
    6998:	18bff01e 	bne	r3,r2,695c <__alt_mem_epcs_flash+0xffff595c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    699c:	0005883a 	mov	r2,zero
}
    69a0:	e037883a 	mov	sp,fp
    69a4:	dfc00117 	ldw	ra,4(sp)
    69a8:	df000017 	ldw	fp,0(sp)
    69ac:	dec00204 	addi	sp,sp,8
    69b0:	f800283a 	ret

000069b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    69b4:	defffb04 	addi	sp,sp,-20
    69b8:	dfc00415 	stw	ra,16(sp)
    69bc:	df000315 	stw	fp,12(sp)
    69c0:	df000304 	addi	fp,sp,12
    69c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    69c8:	d0a00217 	ldw	r2,-32760(gp)
    69cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    69d0:	00003106 	br	6a98 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    69d4:	e0bffd17 	ldw	r2,-12(fp)
    69d8:	10800217 	ldw	r2,8(r2)
    69dc:	1009883a 	mov	r4,r2
    69e0:	0006c200 	call	6c20 <strlen>
    69e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    69e8:	e0bffd17 	ldw	r2,-12(fp)
    69ec:	10c00217 	ldw	r3,8(r2)
    69f0:	e0bffe17 	ldw	r2,-8(fp)
    69f4:	10bfffc4 	addi	r2,r2,-1
    69f8:	1885883a 	add	r2,r3,r2
    69fc:	10800003 	ldbu	r2,0(r2)
    6a00:	10803fcc 	andi	r2,r2,255
    6a04:	1080201c 	xori	r2,r2,128
    6a08:	10bfe004 	addi	r2,r2,-128
    6a0c:	10800bd8 	cmpnei	r2,r2,47
    6a10:	1000031e 	bne	r2,zero,6a20 <alt_find_file+0x6c>
    {
      len -= 1;
    6a14:	e0bffe17 	ldw	r2,-8(fp)
    6a18:	10bfffc4 	addi	r2,r2,-1
    6a1c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6a20:	e0bffe17 	ldw	r2,-8(fp)
    6a24:	e0ffff17 	ldw	r3,-4(fp)
    6a28:	1885883a 	add	r2,r3,r2
    6a2c:	10800003 	ldbu	r2,0(r2)
    6a30:	10803fcc 	andi	r2,r2,255
    6a34:	1080201c 	xori	r2,r2,128
    6a38:	10bfe004 	addi	r2,r2,-128
    6a3c:	10800be0 	cmpeqi	r2,r2,47
    6a40:	1000081e 	bne	r2,zero,6a64 <alt_find_file+0xb0>
    6a44:	e0bffe17 	ldw	r2,-8(fp)
    6a48:	e0ffff17 	ldw	r3,-4(fp)
    6a4c:	1885883a 	add	r2,r3,r2
    6a50:	10800003 	ldbu	r2,0(r2)
    6a54:	10803fcc 	andi	r2,r2,255
    6a58:	1080201c 	xori	r2,r2,128
    6a5c:	10bfe004 	addi	r2,r2,-128
    6a60:	10000a1e 	bne	r2,zero,6a8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    6a64:	e0bffd17 	ldw	r2,-12(fp)
    6a68:	10800217 	ldw	r2,8(r2)
    6a6c:	e0fffe17 	ldw	r3,-8(fp)
    6a70:	180d883a 	mov	r6,r3
    6a74:	e17fff17 	ldw	r5,-4(fp)
    6a78:	1009883a 	mov	r4,r2
    6a7c:	0006bf00 	call	6bf0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6a80:	1000021e 	bne	r2,zero,6a8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6a84:	e0bffd17 	ldw	r2,-12(fp)
    6a88:	00000706 	br	6aa8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6a8c:	e0bffd17 	ldw	r2,-12(fp)
    6a90:	10800017 	ldw	r2,0(r2)
    6a94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6a98:	e0fffd17 	ldw	r3,-12(fp)
    6a9c:	d0a00204 	addi	r2,gp,-32760
    6aa0:	18bfcc1e 	bne	r3,r2,69d4 <__alt_mem_epcs_flash+0xffff59d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6aa4:	0005883a 	mov	r2,zero
}
    6aa8:	e037883a 	mov	sp,fp
    6aac:	dfc00117 	ldw	ra,4(sp)
    6ab0:	df000017 	ldw	fp,0(sp)
    6ab4:	dec00204 	addi	sp,sp,8
    6ab8:	f800283a 	ret

00006abc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6abc:	defffc04 	addi	sp,sp,-16
    6ac0:	df000315 	stw	fp,12(sp)
    6ac4:	df000304 	addi	fp,sp,12
    6ac8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6acc:	00bffa04 	movi	r2,-24
    6ad0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6ad4:	e03ffd15 	stw	zero,-12(fp)
    6ad8:	00001906 	br	6b40 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    6adc:	00800034 	movhi	r2,0
    6ae0:	109bc404 	addi	r2,r2,28432
    6ae4:	e0fffd17 	ldw	r3,-12(fp)
    6ae8:	18c00324 	muli	r3,r3,12
    6aec:	10c5883a 	add	r2,r2,r3
    6af0:	10800017 	ldw	r2,0(r2)
    6af4:	10000f1e 	bne	r2,zero,6b34 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    6af8:	00800034 	movhi	r2,0
    6afc:	109bc404 	addi	r2,r2,28432
    6b00:	e0fffd17 	ldw	r3,-12(fp)
    6b04:	18c00324 	muli	r3,r3,12
    6b08:	10c5883a 	add	r2,r2,r3
    6b0c:	e0ffff17 	ldw	r3,-4(fp)
    6b10:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6b14:	d0e00617 	ldw	r3,-32744(gp)
    6b18:	e0bffd17 	ldw	r2,-12(fp)
    6b1c:	1880020e 	bge	r3,r2,6b28 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    6b20:	e0bffd17 	ldw	r2,-12(fp)
    6b24:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    6b28:	e0bffd17 	ldw	r2,-12(fp)
    6b2c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    6b30:	00000606 	br	6b4c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6b34:	e0bffd17 	ldw	r2,-12(fp)
    6b38:	10800044 	addi	r2,r2,1
    6b3c:	e0bffd15 	stw	r2,-12(fp)
    6b40:	e0bffd17 	ldw	r2,-12(fp)
    6b44:	10800810 	cmplti	r2,r2,32
    6b48:	103fe41e 	bne	r2,zero,6adc <__alt_mem_epcs_flash+0xffff5adc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6b4c:	e0bffe17 	ldw	r2,-8(fp)
}
    6b50:	e037883a 	mov	sp,fp
    6b54:	df000017 	ldw	fp,0(sp)
    6b58:	dec00104 	addi	sp,sp,4
    6b5c:	f800283a 	ret

00006b60 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6b60:	defffb04 	addi	sp,sp,-20
    6b64:	df000415 	stw	fp,16(sp)
    6b68:	df000404 	addi	fp,sp,16
    6b6c:	e13ffe15 	stw	r4,-8(fp)
    6b70:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6b74:	e0bfff17 	ldw	r2,-4(fp)
    6b78:	10840070 	cmpltui	r2,r2,4097
    6b7c:	1000021e 	bne	r2,zero,6b88 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6b80:	00840004 	movi	r2,4096
    6b84:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    6b88:	e0fffe17 	ldw	r3,-8(fp)
    6b8c:	e0bfff17 	ldw	r2,-4(fp)
    6b90:	1885883a 	add	r2,r3,r2
    6b94:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6b98:	e0bffe17 	ldw	r2,-8(fp)
    6b9c:	e0bffc15 	stw	r2,-16(fp)
    6ba0:	00000506 	br	6bb8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6ba4:	e0bffc17 	ldw	r2,-16(fp)
    6ba8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6bac:	e0bffc17 	ldw	r2,-16(fp)
    6bb0:	10800804 	addi	r2,r2,32
    6bb4:	e0bffc15 	stw	r2,-16(fp)
    6bb8:	e0fffc17 	ldw	r3,-16(fp)
    6bbc:	e0bffd17 	ldw	r2,-12(fp)
    6bc0:	18bff836 	bltu	r3,r2,6ba4 <__alt_mem_epcs_flash+0xffff5ba4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6bc4:	e0bffe17 	ldw	r2,-8(fp)
    6bc8:	108007cc 	andi	r2,r2,31
    6bcc:	10000226 	beq	r2,zero,6bd8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6bd0:	e0bffc17 	ldw	r2,-16(fp)
    6bd4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6bd8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6bdc:	0001883a 	nop
    6be0:	e037883a 	mov	sp,fp
    6be4:	df000017 	ldw	fp,0(sp)
    6be8:	dec00104 	addi	sp,sp,4
    6bec:	f800283a 	ret

00006bf0 <memcmp>:
    6bf0:	218d883a 	add	r6,r4,r6
    6bf4:	21800826 	beq	r4,r6,6c18 <memcmp+0x28>
    6bf8:	20800003 	ldbu	r2,0(r4)
    6bfc:	28c00003 	ldbu	r3,0(r5)
    6c00:	10c00226 	beq	r2,r3,6c0c <memcmp+0x1c>
    6c04:	10c5c83a 	sub	r2,r2,r3
    6c08:	f800283a 	ret
    6c0c:	21000044 	addi	r4,r4,1
    6c10:	29400044 	addi	r5,r5,1
    6c14:	003ff706 	br	6bf4 <__alt_mem_epcs_flash+0xffff5bf4>
    6c18:	0005883a 	mov	r2,zero
    6c1c:	f800283a 	ret

00006c20 <strlen>:
    6c20:	2005883a 	mov	r2,r4
    6c24:	10c00007 	ldb	r3,0(r2)
    6c28:	18000226 	beq	r3,zero,6c34 <strlen+0x14>
    6c2c:	10800044 	addi	r2,r2,1
    6c30:	003ffc06 	br	6c24 <__alt_mem_epcs_flash+0xffff5c24>
    6c34:	1105c83a 	sub	r2,r2,r4
    6c38:	f800283a 	ret

00006c3c <__divsi3>:
    6c3c:	20001b16 	blt	r4,zero,6cac <__divsi3+0x70>
    6c40:	000f883a 	mov	r7,zero
    6c44:	28001616 	blt	r5,zero,6ca0 <__divsi3+0x64>
    6c48:	200d883a 	mov	r6,r4
    6c4c:	29001a2e 	bgeu	r5,r4,6cb8 <__divsi3+0x7c>
    6c50:	00800804 	movi	r2,32
    6c54:	00c00044 	movi	r3,1
    6c58:	00000106 	br	6c60 <__divsi3+0x24>
    6c5c:	10000d26 	beq	r2,zero,6c94 <__divsi3+0x58>
    6c60:	294b883a 	add	r5,r5,r5
    6c64:	10bfffc4 	addi	r2,r2,-1
    6c68:	18c7883a 	add	r3,r3,r3
    6c6c:	293ffb36 	bltu	r5,r4,6c5c <__alt_mem_epcs_flash+0xffff5c5c>
    6c70:	0005883a 	mov	r2,zero
    6c74:	18000726 	beq	r3,zero,6c94 <__divsi3+0x58>
    6c78:	0005883a 	mov	r2,zero
    6c7c:	31400236 	bltu	r6,r5,6c88 <__divsi3+0x4c>
    6c80:	314dc83a 	sub	r6,r6,r5
    6c84:	10c4b03a 	or	r2,r2,r3
    6c88:	1806d07a 	srli	r3,r3,1
    6c8c:	280ad07a 	srli	r5,r5,1
    6c90:	183ffa1e 	bne	r3,zero,6c7c <__alt_mem_epcs_flash+0xffff5c7c>
    6c94:	38000126 	beq	r7,zero,6c9c <__divsi3+0x60>
    6c98:	0085c83a 	sub	r2,zero,r2
    6c9c:	f800283a 	ret
    6ca0:	014bc83a 	sub	r5,zero,r5
    6ca4:	39c0005c 	xori	r7,r7,1
    6ca8:	003fe706 	br	6c48 <__alt_mem_epcs_flash+0xffff5c48>
    6cac:	0109c83a 	sub	r4,zero,r4
    6cb0:	01c00044 	movi	r7,1
    6cb4:	003fe306 	br	6c44 <__alt_mem_epcs_flash+0xffff5c44>
    6cb8:	00c00044 	movi	r3,1
    6cbc:	003fee06 	br	6c78 <__alt_mem_epcs_flash+0xffff5c78>

00006cc0 <__modsi3>:
    6cc0:	20001716 	blt	r4,zero,6d20 <__modsi3+0x60>
    6cc4:	000f883a 	mov	r7,zero
    6cc8:	2005883a 	mov	r2,r4
    6ccc:	28001216 	blt	r5,zero,6d18 <__modsi3+0x58>
    6cd0:	2900162e 	bgeu	r5,r4,6d2c <__modsi3+0x6c>
    6cd4:	01800804 	movi	r6,32
    6cd8:	00c00044 	movi	r3,1
    6cdc:	00000106 	br	6ce4 <__modsi3+0x24>
    6ce0:	30000a26 	beq	r6,zero,6d0c <__modsi3+0x4c>
    6ce4:	294b883a 	add	r5,r5,r5
    6ce8:	31bfffc4 	addi	r6,r6,-1
    6cec:	18c7883a 	add	r3,r3,r3
    6cf0:	293ffb36 	bltu	r5,r4,6ce0 <__alt_mem_epcs_flash+0xffff5ce0>
    6cf4:	18000526 	beq	r3,zero,6d0c <__modsi3+0x4c>
    6cf8:	1806d07a 	srli	r3,r3,1
    6cfc:	11400136 	bltu	r2,r5,6d04 <__modsi3+0x44>
    6d00:	1145c83a 	sub	r2,r2,r5
    6d04:	280ad07a 	srli	r5,r5,1
    6d08:	183ffb1e 	bne	r3,zero,6cf8 <__alt_mem_epcs_flash+0xffff5cf8>
    6d0c:	38000126 	beq	r7,zero,6d14 <__modsi3+0x54>
    6d10:	0085c83a 	sub	r2,zero,r2
    6d14:	f800283a 	ret
    6d18:	014bc83a 	sub	r5,zero,r5
    6d1c:	003fec06 	br	6cd0 <__alt_mem_epcs_flash+0xffff5cd0>
    6d20:	0109c83a 	sub	r4,zero,r4
    6d24:	01c00044 	movi	r7,1
    6d28:	003fe706 	br	6cc8 <__alt_mem_epcs_flash+0xffff5cc8>
    6d2c:	00c00044 	movi	r3,1
    6d30:	003ff106 	br	6cf8 <__alt_mem_epcs_flash+0xffff5cf8>

00006d34 <__udivsi3>:
    6d34:	200d883a 	mov	r6,r4
    6d38:	2900152e 	bgeu	r5,r4,6d90 <__udivsi3+0x5c>
    6d3c:	28001416 	blt	r5,zero,6d90 <__udivsi3+0x5c>
    6d40:	00800804 	movi	r2,32
    6d44:	00c00044 	movi	r3,1
    6d48:	00000206 	br	6d54 <__udivsi3+0x20>
    6d4c:	10000e26 	beq	r2,zero,6d88 <__udivsi3+0x54>
    6d50:	28000516 	blt	r5,zero,6d68 <__udivsi3+0x34>
    6d54:	294b883a 	add	r5,r5,r5
    6d58:	10bfffc4 	addi	r2,r2,-1
    6d5c:	18c7883a 	add	r3,r3,r3
    6d60:	293ffa36 	bltu	r5,r4,6d4c <__alt_mem_epcs_flash+0xffff5d4c>
    6d64:	18000826 	beq	r3,zero,6d88 <__udivsi3+0x54>
    6d68:	0005883a 	mov	r2,zero
    6d6c:	31400236 	bltu	r6,r5,6d78 <__udivsi3+0x44>
    6d70:	314dc83a 	sub	r6,r6,r5
    6d74:	10c4b03a 	or	r2,r2,r3
    6d78:	1806d07a 	srli	r3,r3,1
    6d7c:	280ad07a 	srli	r5,r5,1
    6d80:	183ffa1e 	bne	r3,zero,6d6c <__alt_mem_epcs_flash+0xffff5d6c>
    6d84:	f800283a 	ret
    6d88:	0005883a 	mov	r2,zero
    6d8c:	f800283a 	ret
    6d90:	00c00044 	movi	r3,1
    6d94:	003ff406 	br	6d68 <__alt_mem_epcs_flash+0xffff5d68>

00006d98 <__umodsi3>:
    6d98:	2005883a 	mov	r2,r4
    6d9c:	2900122e 	bgeu	r5,r4,6de8 <__umodsi3+0x50>
    6da0:	28001116 	blt	r5,zero,6de8 <__umodsi3+0x50>
    6da4:	01800804 	movi	r6,32
    6da8:	00c00044 	movi	r3,1
    6dac:	00000206 	br	6db8 <__umodsi3+0x20>
    6db0:	30000c26 	beq	r6,zero,6de4 <__umodsi3+0x4c>
    6db4:	28000516 	blt	r5,zero,6dcc <__umodsi3+0x34>
    6db8:	294b883a 	add	r5,r5,r5
    6dbc:	31bfffc4 	addi	r6,r6,-1
    6dc0:	18c7883a 	add	r3,r3,r3
    6dc4:	293ffa36 	bltu	r5,r4,6db0 <__alt_mem_epcs_flash+0xffff5db0>
    6dc8:	18000626 	beq	r3,zero,6de4 <__umodsi3+0x4c>
    6dcc:	1806d07a 	srli	r3,r3,1
    6dd0:	11400136 	bltu	r2,r5,6dd8 <__umodsi3+0x40>
    6dd4:	1145c83a 	sub	r2,r2,r5
    6dd8:	280ad07a 	srli	r5,r5,1
    6ddc:	183ffb1e 	bne	r3,zero,6dcc <__alt_mem_epcs_flash+0xffff5dcc>
    6de0:	f800283a 	ret
    6de4:	f800283a 	ret
    6de8:	00c00044 	movi	r3,1
    6dec:	003ff706 	br	6dcc <__alt_mem_epcs_flash+0xffff5dcc>

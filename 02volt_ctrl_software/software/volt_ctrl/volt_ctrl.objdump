
volt_ctrl.elf:     file format elf32-littlenios2
volt_ctrl.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004244

Program Header:
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000312c memsz 0x000033f0 flags rwx
    LOAD off    0x00005000 vaddr 0x00011000 paddr 0x00011000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00011000  00011000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002c48  00004244  00004244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00006e8c  00006e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000290  00006ebc  00006ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c4  0000714c  0000714c  0000414c  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00007410  00007410  00005000  2**0
                  CONTENTS
  7 .rom          00000000  0000c000  0000c000  00005000  2**0
                  CONTENTS
  8 .epcs_flash   00000000  00011020  00011020  00005000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000518  00000000  00000000  00005028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004b8c  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001da1  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002156  00000000  00000000  0000be6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a0c  00000000  00000000  0000dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000015d9  00000000  00000000  0000e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000580  00000000  00000000  0000ffa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  0001052c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000118  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0001218d  2**0
                  CONTENTS, READONLY
 20 .cpu          00000004  00000000  00000000  00012190  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00012195  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00012196  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0001219a  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0001219e  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  000121a2  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  000121a6  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000004  00000000  00000000  000121ae  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003a  00000000  00000000  000121b2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00061af5  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00011000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004244 l    d  .text	00000000 .text
00006e8c l    d  .rodata	00000000 .rodata
00006ebc l    d  .rwdata	00000000 .rwdata
0000714c l    d  .bss	00000000 .bss
00007410 l    d  .ram	00000000 .ram
0000c000 l    d  .rom	00000000 .rom
00011020 l    d  .epcs_flash	00000000 .epcs_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/master_WHU/voltage_control/02volt_ctrl_software/software/volt_ctrl_bsp//obj/HAL/src/crt0.o
0000428c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 spi.c
00004290 l     F .text	00000034 spi_rx_isr
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00005790 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005918 l     F .text	00000034 alt_dev_reg
00006f2c l     O .rwdata	0000002c jtag
00006f58 l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00005ecc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00005fcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00006240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00006394 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000063c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000065a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000066e4 l     F .text	0000003c alt_get_errno
00006720 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00007178 g     O .bss	00000004 alt_instruction_exception_handler
0000587c g     F .text	0000006c alt_main
00007310 g     O .bss	00000100 alt_irq
00006ebc g       *ABS*	00000000 __flash_rwdata_start
0000715c g     O .bss	00000004 out_delay
00011000 g       *ABS*	00000000 __alt_mem_epcs_flash
00007158 g     O .bss	00000004 oe_cnt2
0000699c g     F .text	00000024 altera_nios2_gen2_irq_init
00011000 g     F .entry	00000000 __reset
0000712c g     O .rwdata	00000004 IsSettingInfo
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000717c g     O .bss	00000004 errno
0000c000 g       *ABS*	00000000 __alt_mem_rom
00007170 g     O .bss	00000004 alt_argv
0000f12c g       *ABS*	00000000 _gp
000058e8 g     F .text	00000030 usleep
0000714e g     O .bss	00000001 Datalength
00006fac g     O .rwdata	00000180 alt_fd_list
000069c0 g     F .text	00000090 alt_find_dev
00006668 g     F .text	0000007c alt_io_redirect
00006508 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00005a90 g     F .text	000000ec altera_avalon_jtag_uart_read
00006dd0 g     F .text	00000064 .hidden __udivsi3
00006bfc g     F .text	00000090 alt_icache_flush
00004000 g       *ABS*	00000000 __alt_mem_ram
00007144 g     O .rwdata	00000004 alt_max_fd
00007410 g       *ABS*	00000000 __bss_end
000056a0 g     F .text	000000f0 alt_iic_isr_register
00005654 g     F .text	0000004c alt_ic_irq_enabled
00007168 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
00006f84 g     O .rwdata	00000028 alt_dev_null
0000634c g     F .text	00000048 alt_dcache_flush_all
0000714c g       *ABS*	00000000 __ram_rwdata_end
0000713c g     O .rwdata	00000008 alt_dev_list
00006ebc g       *ABS*	00000000 __ram_rodata_end
00007180 g     O .bss	000000c8 rxdata
00006e34 g     F .text	00000058 .hidden __umodsi3
00007410 g       *ABS*	00000000 end
00006008 g     F .text	000000e0 altera_avalon_uart_write
000041d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005e6c g     F .text	00000060 altera_avalon_uart_write_fd
00005b7c g     F .text	00000094 altera_avalon_jtag_uart_write
0000714d g     O .bss	00000001 txdata
00004244 g     F .text	0000004c _start
00005c10 g     F .text	000001fc alt_avalon_spi_command
00005984 g     F .text	0000004c alt_sys_init
00006ebc g       *ABS*	00000000 __ram_rwdata_start
00006e8c g       *ABS*	00000000 __ram_rodata_start
000059d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006b58 g     F .text	000000a4 alt_get_fd
000060e8 g     F .text	00000158 alt_busy_sleep
00004724 g     F .text	00000074 IRQ_init
0000714c g     O .bss	00000001 UartReceiveCnt
00006c8c g     F .text	00000030 memcmp
00007410 g       *ABS*	00000000 __alt_stack_base
00006a50 g     F .text	00000108 alt_find_file
000063fc g     F .text	000000a4 alt_dev_llist_insert
0000714c g       *ABS*	00000000 __bss_start
000042c4 g     F .text	00000460 main
00007174 g     O .bss	00000004 alt_envp
00005a30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00007148 g     O .rwdata	00000004 alt_errno
00007154 g     O .bss	00000004 oe_cnt1
00006cd8 g     F .text	00000084 .hidden __divsi3
00007150 g     O .bss	00000004 oe_cnt
00006e8c g       *ABS*	00000000 __flash_rodata_start
00006f20 g     O .rwdata	0000000a spi_command_string_rx
0000594c g     F .text	00000038 alt_irq_init
00004798 g     F .text	00000078 IRQ_UART_Interrupts
00006938 g     F .text	00000064 alt_release_fd
00007160 g     O .bss	00000004 return_code
0000716c g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00007134 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000054f0 g     F .text	00000050 alt_ic_isr_register
0000714c g       *ABS*	00000000 _edata
00005e0c g     F .text	00000060 altera_avalon_uart_read_fd
00007410 g       *ABS*	00000000 _end
00004244 g       *ABS*	00000000 __ram_exceptions_end
000055c8 g     F .text	0000008c alt_ic_irq_disable
00006ebc g     O .rwdata	00000064 oe_msk
00006d5c g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000064a0 g     F .text	00000034 _exit
00007164 g     O .bss	00000004 ret
00006cbc g     F .text	0000001c strlen
000067e4 g     F .text	00000154 open
000064d4 g     F .text	00000034 alt_icache_flush_all
00007130 g     O .rwdata	00000004 alt_priority_mask
00005540 g     F .text	00000088 alt_ic_irq_enable
00004810 g     F .text	00000ce0 WriteFileData
00005f08 g     F .text	000000c4 altera_avalon_uart_read
0000627c g     F .text	000000d0 close
000057f8 g     F .text	00000084 alt_load
00007248 g     O .bss	000000c8 spi_command_string_tx



Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00800034 	movhi	r2,0
    4140:	109cc404 	addi	r2,r2,29456
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00800034 	movhi	r2,0
    4158:	109cc404 	addi	r2,r2,29456
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <__alt_mem_epcs_flash+0xffff312c>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <__alt_mem_epcs_flash+0xffff3120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    41e4:	000531fa 	rdctl	r2,exception
    41e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    41ec:	e0bffd17 	ldw	r2,-12(fp)
    41f0:	10801f0c 	andi	r2,r2,124
    41f4:	1004d0ba 	srli	r2,r2,2
    41f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    41fc:	0005333a 	rdctl	r2,badaddr
    4200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    4204:	d0a01317 	ldw	r2,-32692(gp)
    4208:	10000726 	beq	r2,zero,4228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    420c:	d0a01317 	ldw	r2,-32692(gp)
    4210:	e0fffd17 	ldw	r3,-12(fp)
    4214:	e1bffe17 	ldw	r6,-8(fp)
    4218:	e17fff17 	ldw	r5,-4(fp)
    421c:	1809883a 	mov	r4,r3
    4220:	103ee83a 	callr	r2
    4224:	00000206 	br	4230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    422c:	0005883a 	mov	r2,zero
}
    4230:	e037883a 	mov	sp,fp
    4234:	dfc00117 	ldw	ra,4(sp)
    4238:	df000017 	ldw	fp,0(sp)
    423c:	dec00204 	addi	sp,sp,8
    4240:	f800283a 	ret

Disassembly of section .text:

00004244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    424c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    4250:	00bffd16 	blt	zero,r2,4248 <__alt_mem_epcs_flash+0xffff3248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4258:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    425c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    4260:	d6bc4b14 	ori	gp,gp,61740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4268:	109c5314 	ori	r2,r2,29004

    movhi r3, %hi(__bss_end)
    426c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    4270:	18dd0414 	ori	r3,r3,29712

    beq r2, r3, 1f
    4274:	10c00326 	beq	r2,r3,4284 <_start+0x40>

0:
    stw zero, (r2)
    4278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    427c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    4280:	10fffd36 	bltu	r2,r3,4278 <__alt_mem_epcs_flash+0xffff3278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4284:	00057f80 	call	57f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4288:	000587c0 	call	587c <alt_main>

0000428c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    428c:	003fff06 	br	428c <__alt_mem_epcs_flash+0xffff328c>

00004290 <spi_rx_isr>:
void WriteFileData();

//This is the ISR that runs when the SPI Slave receives data

static void spi_rx_isr(void *isr_context)
{
    4290:	defffe04 	addi	sp,sp,-8
    4294:	df000115 	stw	fp,4(sp)
    4298:	df000104 	addi	fp,sp,4
    429c:	e13fff15 	stw	r4,-4(fp)

    // alt_printf("ISR :) %x \n", IORD_ALTERA_AVALON_SPI_RXDATA(SPI_BASE));

    //This resets the IRQ flag. Otherwise the IRQ will continuously run.
    IOWR_ALTERA_AVALON_SPI_STATUS(SPI_BASE, 0x0);
    42a0:	0007883a 	mov	r3,zero
    42a4:	00800074 	movhi	r2,1
    42a8:	10880204 	addi	r2,r2,8200
    42ac:	10c00035 	stwio	r3,0(r2)
}
    42b0:	0001883a 	nop
    42b4:	e037883a 	mov	sp,fp
    42b8:	df000017 	ldw	fp,0(sp)
    42bc:	dec00104 	addi	sp,sp,4
    42c0:	f800283a 	ret

000042c4 <main>:

int main()
{
    42c4:	defff804 	addi	sp,sp,-32
    42c8:	dfc00715 	stw	ra,28(sp)
    42cc:	df000615 	stw	fp,24(sp)
    42d0:	df000604 	addi	fp,sp,24
    // WR_AD5504_CTRL_SET_DAC_B_H 0X2 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_C_H 0X3 + 12bit data
    // WR_AD5504_CTRL_SET_DAC_D_H 0X4 + 12bit data

    // DAC init
    spi_command_string_tx[0] = WR_AD5504_CTRL_ALL_POWERUP_H;
    42d4:	00800034 	movhi	r2,0
    42d8:	109c9204 	addi	r2,r2,29256
    42dc:	00c01c04 	movi	r3,112
    42e0:	10c00005 	stb	r3,0(r2)
    spi_command_string_tx[1] = WR_AD5504_CTRL_ALL_POWERUP_L;
    42e4:	00800034 	movhi	r2,0
    42e8:	109c9204 	addi	r2,r2,29256
    42ec:	00c00f04 	movi	r3,60
    42f0:	10c00045 	stb	r3,1(r2)
    // spi_command_string_tx[0] = WR_AD5504_CTRL_ALL_POWERDOWN_H;
    // spi_command_string_tx[1] = WR_AD5504_CTRL_ALL_POWERDOWN_L;

    //DAC all set 0
    spi_command_string_tx[2] = 0x50;
    42f4:	00800034 	movhi	r2,0
    42f8:	109c9204 	addi	r2,r2,29256
    42fc:	00c01404 	movi	r3,80
    4300:	10c00085 	stb	r3,2(r2)
    spi_command_string_tx[3] = 0x00;
    4304:	00800034 	movhi	r2,0
    4308:	109c9204 	addi	r2,r2,29256
    430c:	100000c5 	stb	zero,3(r2)

    spi_command_string_tx[4] = 0x00;
    4310:	00800034 	movhi	r2,0
    4314:	109c9204 	addi	r2,r2,29256
    4318:	10000105 	stb	zero,4(r2)
    spi_command_string_tx[5] = 0x00;
    431c:	00800034 	movhi	r2,0
    4320:	109c9204 	addi	r2,r2,29256
    4324:	10000145 	stb	zero,5(r2)

    IRQ_init();
    4328:	00047240 	call	4724 <IRQ_init>

    // //Just calling the ISR to see if the function is OK.
    // spi_rx_isr(NULL);

    // //DAC power-up
    for (int i = 18; i < 149; i = i + 8)
    432c:	00800484 	movi	r2,18
    4330:	e0bffd15 	stw	r2,-12(fp)
    4334:	00002906 	br	43dc <main+0x118>
    {
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    4338:	00c00044 	movi	r3,1
    433c:	00800074 	movhi	r2,1
    4340:	10881404 	addi	r2,r2,8272
    4344:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(i - 6 * oe_cnt) / 2 - 1]);
    4348:	d0a00917 	ldw	r2,-32732(gp)
    434c:	10fffea4 	muli	r3,r2,-6
    4350:	e0bffd17 	ldw	r2,-12(fp)
    4354:	1885883a 	add	r2,r3,r2
    4358:	1006d7fa 	srli	r3,r2,31
    435c:	1885883a 	add	r2,r3,r2
    4360:	1005d07a 	srai	r2,r2,1
    4364:	10ffffc4 	addi	r3,r2,-1
    4368:	00800034 	movhi	r2,0
    436c:	109baf04 	addi	r2,r2,28348
    4370:	18c7883a 	add	r3,r3,r3
    4374:	18c7883a 	add	r3,r3,r3
    4378:	10c5883a 	add	r2,r2,r3
    437c:	10800017 	ldw	r2,0(r2)
    4380:	1007883a 	mov	r3,r2
    4384:	00800074 	movhi	r2,1
    4388:	10881804 	addi	r2,r2,8288
    438c:	10c00035 	stwio	r3,0(r2)
        oe_cnt++;
    4390:	d0a00917 	ldw	r2,-32732(gp)
    4394:	10800044 	addi	r2,r2,1
    4398:	d0a00915 	stw	r2,-32732(gp)

        return_code = alt_avalon_spi_command(SPI_BASE, 0,
    439c:	d8000215 	stw	zero,8(sp)
    43a0:	00800034 	movhi	r2,0
    43a4:	109bc804 	addi	r2,r2,28448
    43a8:	d8800115 	stw	r2,4(sp)
    43ac:	d8000015 	stw	zero,0(sp)
    43b0:	01c00034 	movhi	r7,0
    43b4:	39dc9204 	addi	r7,r7,29256
    43b8:	01800084 	movi	r6,2
    43bc:	000b883a 	mov	r5,zero
    43c0:	01000074 	movhi	r4,1
    43c4:	21080004 	addi	r4,r4,8192
    43c8:	0005c100 	call	5c10 <alt_avalon_spi_command>
    43cc:	d0a00d15 	stw	r2,-32716(gp)

    // //Just calling the ISR to see if the function is OK.
    // spi_rx_isr(NULL);

    // //DAC power-up
    for (int i = 18; i < 149; i = i + 8)
    43d0:	e0bffd17 	ldw	r2,-12(fp)
    43d4:	10800204 	addi	r2,r2,8
    43d8:	e0bffd15 	stw	r2,-12(fp)
    43dc:	e0bffd17 	ldw	r2,-12(fp)
    43e0:	10802550 	cmplti	r2,r2,149
    43e4:	103fd41e 	bne	r2,zero,4338 <__alt_mem_epcs_flash+0xffff3338>
        return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                             2, spi_command_string_tx,
                                             0, spi_command_string_rx,
                                             0);
    }
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    43e8:	0007883a 	mov	r3,zero
    43ec:	00800074 	movhi	r2,1
    43f0:	10881804 	addi	r2,r2,8288
    43f4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    43f8:	0007883a 	mov	r3,zero
    43fc:	00800074 	movhi	r2,1
    4400:	10881404 	addi	r2,r2,8272
    4404:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, 1);
    4408:	00c00044 	movi	r3,1
    440c:	00800074 	movhi	r2,1
    4410:	10881004 	addi	r2,r2,8256
    4414:	10c00035 	stwio	r3,0(r2)

    //alt_printf("DAC Power up \n");
    while (IsSettingInfo)
    4418:	0001883a 	nop
    441c:	d0a00017 	ldw	r2,-32768(gp)
    4420:	103ffe1e 	bne	r2,zero,441c <__alt_mem_epcs_flash+0xffff341c>
        ;

    while (1)
    {

        while (UartReceiveCnt < Datalength)
    4424:	0001883a 	nop
    4428:	d0e00803 	ldbu	r3,-32736(gp)
    442c:	d0a00883 	ldbu	r2,-32734(gp)
    4430:	18c03fcc 	andi	r3,r3,255
    4434:	10803fcc 	andi	r2,r2,255
    4438:	18bffb36 	bltu	r3,r2,4428 <__alt_mem_epcs_flash+0xffff3428>
            ;
        IsSettingInfo = 1;
    443c:	00800044 	movi	r2,1
    4440:	d0a00015 	stw	r2,-32768(gp)
        // alt_printf("datalength:  %x \n", Datalength);
        // for (int i = 0; i < UartReceiveCnt; i++)
        // {
        //     alt_printf("uart receive:  %x \n", rxdata[i]);
        // }
        WriteFileData();
    4444:	00048100 	call	4810 <WriteFileData>
        //alt_printf("spi_command_string_tx[28] = %x \n", spi_command_string_tx[28]);
        UartReceiveCnt = 0;
    4448:	d0200805 	stb	zero,-32736(gp)

        while (1)
        {
            if (UartReceiveCnt >= Datalength)
    444c:	d0e00803 	ldbu	r3,-32736(gp)
    4450:	d0a00883 	ldbu	r2,-32734(gp)
    4454:	18c03fcc 	andi	r3,r3,255
    4458:	10803fcc 	andi	r2,r2,255
    445c:	1880af2e 	bgeu	r3,r2,471c <main+0x458>
            {
                break;
            }
            for (int j = 18; j < 149; j = j + 8)
    4460:	00800484 	movi	r2,18
    4464:	e0bffe15 	stw	r2,-8(fp)
    4468:	00005f06 	br	45e8 <main+0x324>
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    446c:	00c00044 	movi	r3,1
    4470:	00800074 	movhi	r2,1
    4474:	10881404 	addi	r2,r2,8272
    4478:	10c00035 	stwio	r3,0(r2)
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
    447c:	d0a00a17 	ldw	r2,-32728(gp)
    4480:	10fffea4 	muli	r3,r2,-6
    4484:	e0bffe17 	ldw	r2,-8(fp)
    4488:	1885883a 	add	r2,r3,r2
    448c:	1006d7fa 	srli	r3,r2,31
    4490:	1885883a 	add	r2,r3,r2
    4494:	1005d07a 	srai	r2,r2,1
    4498:	10ffffc4 	addi	r3,r2,-1
    449c:	00800034 	movhi	r2,0
    44a0:	109baf04 	addi	r2,r2,28348
    44a4:	18c7883a 	add	r3,r3,r3
    44a8:	18c7883a 	add	r3,r3,r3
    44ac:	10c5883a 	add	r2,r2,r3
    44b0:	10800017 	ldw	r2,0(r2)
    44b4:	1007883a 	mov	r3,r2
    44b8:	00800074 	movhi	r2,1
    44bc:	10881804 	addi	r2,r2,8288
    44c0:	10c00035 	stwio	r3,0(r2)
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j],
    44c4:	e0fffe17 	ldw	r3,-8(fp)
    44c8:	00800034 	movhi	r2,0
    44cc:	109c9204 	addi	r2,r2,29256
    44d0:	1887883a 	add	r3,r3,r2
            }
            for (int j = 18; j < 149; j = j + 8)
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    44d4:	d8000215 	stw	zero,8(sp)
    44d8:	00800034 	movhi	r2,0
    44dc:	109bc844 	addi	r2,r2,28449
    44e0:	d8800115 	stw	r2,4(sp)
    44e4:	d8000015 	stw	zero,0(sp)
    44e8:	180f883a 	mov	r7,r3
    44ec:	01800084 	movi	r6,2
    44f0:	000b883a 	mov	r5,zero
    44f4:	01000074 	movhi	r4,1
    44f8:	21080004 	addi	r4,r4,8192
    44fc:	0005c100 	call	5c10 <alt_avalon_spi_command>
    4500:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 2],
    4504:	e0bffe17 	ldw	r2,-8(fp)
    4508:	10c00084 	addi	r3,r2,2
    450c:	00800034 	movhi	r2,0
    4510:	109c9204 	addi	r2,r2,29256
    4514:	1887883a 	add	r3,r3,r2
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(j - 6 * oe_cnt1) / 2 - 1]);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    4518:	d8000215 	stw	zero,8(sp)
    451c:	00800034 	movhi	r2,0
    4520:	109bc844 	addi	r2,r2,28449
    4524:	d8800115 	stw	r2,4(sp)
    4528:	d8000015 	stw	zero,0(sp)
    452c:	180f883a 	mov	r7,r3
    4530:	01800084 	movi	r6,2
    4534:	000b883a 	mov	r5,zero
    4538:	01000074 	movhi	r4,1
    453c:	21080004 	addi	r4,r4,8192
    4540:	0005c100 	call	5c10 <alt_avalon_spi_command>
    4544:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 4],
    4548:	e0bffe17 	ldw	r2,-8(fp)
    454c:	10c00104 	addi	r3,r2,4
    4550:	00800034 	movhi	r2,0
    4554:	109c9204 	addi	r2,r2,29256
    4558:	1887883a 	add	r3,r3,r2
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    455c:	d8000215 	stw	zero,8(sp)
    4560:	00800034 	movhi	r2,0
    4564:	109bc844 	addi	r2,r2,28449
    4568:	d8800115 	stw	r2,4(sp)
    456c:	d8000015 	stw	zero,0(sp)
    4570:	180f883a 	mov	r7,r3
    4574:	01800084 	movi	r6,2
    4578:	000b883a 	mov	r5,zero
    457c:	01000074 	movhi	r4,1
    4580:	21080004 	addi	r4,r4,8192
    4584:	0005c100 	call	5c10 <alt_avalon_spi_command>
    4588:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 4],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 6],
    458c:	e0bffe17 	ldw	r2,-8(fp)
    4590:	10c00184 	addi	r3,r2,6
    4594:	00800034 	movhi	r2,0
    4598:	109c9204 	addi	r2,r2,29256
    459c:	1887883a 	add	r3,r3,r2
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
                                                     2, &spi_command_string_tx[j + 4],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    45a0:	d8000215 	stw	zero,8(sp)
    45a4:	00800034 	movhi	r2,0
    45a8:	109bc844 	addi	r2,r2,28449
    45ac:	d8800115 	stw	r2,4(sp)
    45b0:	d8000015 	stw	zero,0(sp)
    45b4:	180f883a 	mov	r7,r3
    45b8:	01800084 	movi	r6,2
    45bc:	000b883a 	mov	r5,zero
    45c0:	01000074 	movhi	r4,1
    45c4:	21080004 	addi	r4,r4,8192
    45c8:	0005c100 	call	5c10 <alt_avalon_spi_command>
    45cc:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[j + 6],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt1++;
    45d0:	d0a00a17 	ldw	r2,-32728(gp)
    45d4:	10800044 	addi	r2,r2,1
    45d8:	d0a00a15 	stw	r2,-32728(gp)
        {
            if (UartReceiveCnt >= Datalength)
            {
                break;
            }
            for (int j = 18; j < 149; j = j + 8)
    45dc:	e0bffe17 	ldw	r2,-8(fp)
    45e0:	10800204 	addi	r2,r2,8
    45e4:	e0bffe15 	stw	r2,-8(fp)
    45e8:	e0bffe17 	ldw	r2,-8(fp)
    45ec:	10802550 	cmplti	r2,r2,149
    45f0:	103f9e1e 	bne	r2,zero,446c <__alt_mem_epcs_flash+0xffff346c>
                                                     2, &spi_command_string_tx[j + 6],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt1++;
            }
            usleep(10);
    45f4:	01000284 	movi	r4,10
    45f8:	00058e80 	call	58e8 <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    45fc:	0007883a 	mov	r3,zero
    4600:	00800074 	movhi	r2,1
    4604:	10881804 	addi	r2,r2,8288
    4608:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    460c:	0007883a 	mov	r3,zero
    4610:	00800074 	movhi	r2,1
    4614:	10881404 	addi	r2,r2,8272
    4618:	10c00035 	stwio	r3,0(r2)
            oe_cnt1 = 0;
    461c:	d0200a15 	stw	zero,-32728(gp)
            usleep(374);
    4620:	01005d84 	movi	r4,374
    4624:	00058e80 	call	58e8 <usleep>

            for (int k = 18; k < 149; k = k + 8)
    4628:	00800484 	movi	r2,18
    462c:	e0bfff15 	stw	r2,-4(fp)
    4630:	00002906 	br	46d8 <main+0x414>
            {
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 1);
    4634:	00c00044 	movi	r3,1
    4638:	00800074 	movhi	r2,1
    463c:	10881404 	addi	r2,r2,8272
    4640:	10c00035 	stwio	r3,0(r2)
                IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, oe_msk[(k - 6 * oe_cnt2) / 2 - 1]);
    4644:	d0a00b17 	ldw	r2,-32724(gp)
    4648:	10fffea4 	muli	r3,r2,-6
    464c:	e0bfff17 	ldw	r2,-4(fp)
    4650:	1885883a 	add	r2,r3,r2
    4654:	1006d7fa 	srli	r3,r2,31
    4658:	1885883a 	add	r2,r3,r2
    465c:	1005d07a 	srai	r2,r2,1
    4660:	10ffffc4 	addi	r3,r2,-1
    4664:	00800034 	movhi	r2,0
    4668:	109baf04 	addi	r2,r2,28348
    466c:	18c7883a 	add	r3,r3,r3
    4670:	18c7883a 	add	r3,r3,r3
    4674:	10c5883a 	add	r2,r2,r3
    4678:	10800017 	ldw	r2,0(r2)
    467c:	1007883a 	mov	r3,r2
    4680:	00800074 	movhi	r2,1
    4684:	10881804 	addi	r2,r2,8288
    4688:	10c00035 	stwio	r3,0(r2)
                return_code = alt_avalon_spi_command(SPI_BASE, 0,
    468c:	d8000215 	stw	zero,8(sp)
    4690:	00800034 	movhi	r2,0
    4694:	109bc844 	addi	r2,r2,28449
    4698:	d8800115 	stw	r2,4(sp)
    469c:	d8000015 	stw	zero,0(sp)
    46a0:	01c00034 	movhi	r7,0
    46a4:	39dc9284 	addi	r7,r7,29258
    46a8:	01800084 	movi	r6,2
    46ac:	000b883a 	mov	r5,zero
    46b0:	01000074 	movhi	r4,1
    46b4:	21080004 	addi	r4,r4,8192
    46b8:	0005c100 	call	5c10 <alt_avalon_spi_command>
    46bc:	d0a00d15 	stw	r2,-32716(gp)
                                                     2, &spi_command_string_tx[2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt2++;
    46c0:	d0a00b17 	ldw	r2,-32724(gp)
    46c4:	10800044 	addi	r2,r2,1
    46c8:	d0a00b15 	stw	r2,-32724(gp)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
            oe_cnt1 = 0;
            usleep(374);

            for (int k = 18; k < 149; k = k + 8)
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	10800204 	addi	r2,r2,8
    46d4:	e0bfff15 	stw	r2,-4(fp)
    46d8:	e0bfff17 	ldw	r2,-4(fp)
    46dc:	10802550 	cmplti	r2,r2,149
    46e0:	103fd41e 	bne	r2,zero,4634 <__alt_mem_epcs_flash+0xffff3634>
                                                     2, &spi_command_string_tx[2],
                                                     0, &spi_command_string_rx[1],
                                                     0);
                oe_cnt2++;
            }
            usleep(10);
    46e4:	01000284 	movi	r4,10
    46e8:	00058e80 	call	58e8 <usleep>
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
    46ec:	0007883a 	mov	r3,zero
    46f0:	00800074 	movhi	r2,1
    46f4:	10881804 	addi	r2,r2,8288
    46f8:	10c00035 	stwio	r3,0(r2)
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
    46fc:	0007883a 	mov	r3,zero
    4700:	00800074 	movhi	r2,1
    4704:	10881404 	addi	r2,r2,8272
    4708:	10c00035 	stwio	r3,0(r2)
            oe_cnt2 = 0;
    470c:	d0200b15 	stw	zero,-32724(gp)
            usleep(79);
    4710:	010013c4 	movi	r4,79
    4714:	00058e80 	call	58e8 <usleep>
        }
    4718:	003f4c06 	br	444c <__alt_mem_epcs_flash+0xffff344c>

        while (1)
        {
            if (UartReceiveCnt >= Datalength)
            {
                break;
    471c:	0001883a 	nop
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_OE_BASE, OE_ALL_ENABLE);
            IOWR_ALTERA_AVALON_PIO_DATA(PIO_LDAC_N_BASE, 0);
            oe_cnt2 = 0;
            usleep(79);
        }
    }
    4720:	003f4006 	br	4424 <__alt_mem_epcs_flash+0xffff3424>

00004724 <IRQ_init>:

    return 0;
}

void IRQ_init()
{
    4724:	defffd04 	addi	sp,sp,-12
    4728:	dfc00215 	stw	ra,8(sp)
    472c:	df000115 	stw	fp,4(sp)
    4730:	df000104 	addi	fp,sp,4

    IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE, 0);
    4734:	0007883a 	mov	r3,zero
    4738:	00800074 	movhi	r2,1
    473c:	10880a04 	addi	r2,r2,8232
    4740:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE, 0X80);
    4744:	00c02004 	movi	r3,128
    4748:	00800074 	movhi	r2,1
    474c:	10880b04 	addi	r2,r2,8236
    4750:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, 0x0364);
    4754:	00c0d904 	movi	r3,868
    4758:	00800074 	movhi	r2,1
    475c:	10880c04 	addi	r2,r2,8240
    4760:	10c00035 	stwio	r3,0(r2)
    // ??ISR
    alt_ic_isr_register(
    4764:	d8000015 	stw	zero,0(sp)
    4768:	000f883a 	mov	r7,zero
    476c:	01800034 	movhi	r6,0
    4770:	3191e604 	addi	r6,r6,18328
    4774:	01400084 	movi	r5,2
    4778:	0009883a 	mov	r4,zero
    477c:	00054f00 	call	54f0 <alt_ic_isr_register>
        UART_IRQ_INTERRUPT_CONTROLLER_ID,
        UART_IRQ,
        IRQ_UART_Interrupts,
        0x0,
        0x0);
}
    4780:	0001883a 	nop
    4784:	e037883a 	mov	sp,fp
    4788:	dfc00117 	ldw	ra,4(sp)
    478c:	df000017 	ldw	fp,0(sp)
    4790:	dec00204 	addi	sp,sp,8
    4794:	f800283a 	ret

00004798 <IRQ_UART_Interrupts>:

void IRQ_UART_Interrupts()
{
    4798:	deffff04 	addi	sp,sp,-4
    479c:	df000015 	stw	fp,0(sp)
    47a0:	d839883a 	mov	fp,sp
    if (!IsSettingInfo)
    47a4:	d0a00017 	ldw	r2,-32768(gp)
    47a8:	10000d1e 	bne	r2,zero,47e0 <IRQ_UART_Interrupts+0x48>
    {
        rxdata[UartReceiveCnt] = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    47ac:	d0a00803 	ldbu	r2,-32736(gp)
    47b0:	10c03fcc 	andi	r3,r2,255
    47b4:	00800074 	movhi	r2,1
    47b8:	10880804 	addi	r2,r2,8224
    47bc:	10800037 	ldwio	r2,0(r2)
    47c0:	1009883a 	mov	r4,r2
    47c4:	00800034 	movhi	r2,0
    47c8:	109c6004 	addi	r2,r2,29056
    47cc:	10c5883a 	add	r2,r2,r3
    47d0:	11000005 	stb	r4,0(r2)
        UartReceiveCnt++;
    47d4:	d0a00803 	ldbu	r2,-32736(gp)
    47d8:	10800044 	addi	r2,r2,1
    47dc:	d0a00805 	stb	r2,-32736(gp)
    }
    if (IsSettingInfo)
    47e0:	d0a00017 	ldw	r2,-32768(gp)
    47e4:	10000526 	beq	r2,zero,47fc <IRQ_UART_Interrupts+0x64>
    {
        Datalength = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    47e8:	00800074 	movhi	r2,1
    47ec:	10880804 	addi	r2,r2,8224
    47f0:	10800037 	ldwio	r2,0(r2)
    47f4:	d0a00885 	stb	r2,-32734(gp)
        IsSettingInfo = 0;
    47f8:	d0200015 	stw	zero,-32768(gp)
    // txdata = rxdata;
    // while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_BASE) &
    //          ALTERA_AVALON_UART_STATUS_TRDY_MSK))
    //     ;
    // IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, txdata);
}
    47fc:	0001883a 	nop
    4800:	e037883a 	mov	sp,fp
    4804:	df000017 	ldw	fp,0(sp)
    4808:	dec00104 	addi	sp,sp,4
    480c:	f800283a 	ret

00004810 <WriteFileData>:

void WriteFileData()
{
    4810:	deffff04 	addi	sp,sp,-4
    4814:	df000015 	stw	fp,0(sp)
    4818:	d839883a 	mov	fp,sp
    //DAC10
    spi_command_string_tx[18] = rxdata[0];
    481c:	00800034 	movhi	r2,0
    4820:	109c6004 	addi	r2,r2,29056
    4824:	10c00003 	ldbu	r3,0(r2)
    4828:	00800034 	movhi	r2,0
    482c:	109c9204 	addi	r2,r2,29256
    4830:	10c00485 	stb	r3,18(r2)
    spi_command_string_tx[19] = rxdata[1];
    4834:	00800034 	movhi	r2,0
    4838:	109c6004 	addi	r2,r2,29056
    483c:	10c00043 	ldbu	r3,1(r2)
    4840:	00800034 	movhi	r2,0
    4844:	109c9204 	addi	r2,r2,29256
    4848:	10c004c5 	stb	r3,19(r2)
    spi_command_string_tx[20] = rxdata[2];
    484c:	00800034 	movhi	r2,0
    4850:	109c6004 	addi	r2,r2,29056
    4854:	10c00083 	ldbu	r3,2(r2)
    4858:	00800034 	movhi	r2,0
    485c:	109c9204 	addi	r2,r2,29256
    4860:	10c00505 	stb	r3,20(r2)
    spi_command_string_tx[21] = rxdata[3];
    4864:	00800034 	movhi	r2,0
    4868:	109c6004 	addi	r2,r2,29056
    486c:	10c000c3 	ldbu	r3,3(r2)
    4870:	00800034 	movhi	r2,0
    4874:	109c9204 	addi	r2,r2,29256
    4878:	10c00545 	stb	r3,21(r2)
    spi_command_string_tx[22] = rxdata[4];
    487c:	00800034 	movhi	r2,0
    4880:	109c6004 	addi	r2,r2,29056
    4884:	10c00103 	ldbu	r3,4(r2)
    4888:	00800034 	movhi	r2,0
    488c:	109c9204 	addi	r2,r2,29256
    4890:	10c00585 	stb	r3,22(r2)
    spi_command_string_tx[23] = rxdata[5];
    4894:	00800034 	movhi	r2,0
    4898:	109c6004 	addi	r2,r2,29056
    489c:	10c00143 	ldbu	r3,5(r2)
    48a0:	00800034 	movhi	r2,0
    48a4:	109c9204 	addi	r2,r2,29256
    48a8:	10c005c5 	stb	r3,23(r2)
    spi_command_string_tx[24] = rxdata[6];
    48ac:	00800034 	movhi	r2,0
    48b0:	109c6004 	addi	r2,r2,29056
    48b4:	10c00183 	ldbu	r3,6(r2)
    48b8:	00800034 	movhi	r2,0
    48bc:	109c9204 	addi	r2,r2,29256
    48c0:	10c00605 	stb	r3,24(r2)
    spi_command_string_tx[25] = rxdata[7];
    48c4:	00800034 	movhi	r2,0
    48c8:	109c6004 	addi	r2,r2,29056
    48cc:	10c001c3 	ldbu	r3,7(r2)
    48d0:	00800034 	movhi	r2,0
    48d4:	109c9204 	addi	r2,r2,29256
    48d8:	10c00645 	stb	r3,25(r2)

    spi_command_string_tx[26] = rxdata[8];
    48dc:	00800034 	movhi	r2,0
    48e0:	109c6004 	addi	r2,r2,29056
    48e4:	10c00203 	ldbu	r3,8(r2)
    48e8:	00800034 	movhi	r2,0
    48ec:	109c9204 	addi	r2,r2,29256
    48f0:	10c00685 	stb	r3,26(r2)
    spi_command_string_tx[27] = rxdata[9];
    48f4:	00800034 	movhi	r2,0
    48f8:	109c6004 	addi	r2,r2,29056
    48fc:	10c00243 	ldbu	r3,9(r2)
    4900:	00800034 	movhi	r2,0
    4904:	109c9204 	addi	r2,r2,29256
    4908:	10c006c5 	stb	r3,27(r2)
    spi_command_string_tx[28] = rxdata[10];
    490c:	00800034 	movhi	r2,0
    4910:	109c6004 	addi	r2,r2,29056
    4914:	10c00283 	ldbu	r3,10(r2)
    4918:	00800034 	movhi	r2,0
    491c:	109c9204 	addi	r2,r2,29256
    4920:	10c00705 	stb	r3,28(r2)
    spi_command_string_tx[29] = rxdata[11];
    4924:	00800034 	movhi	r2,0
    4928:	109c6004 	addi	r2,r2,29056
    492c:	10c002c3 	ldbu	r3,11(r2)
    4930:	00800034 	movhi	r2,0
    4934:	109c9204 	addi	r2,r2,29256
    4938:	10c00745 	stb	r3,29(r2)
    spi_command_string_tx[30] = rxdata[12];
    493c:	00800034 	movhi	r2,0
    4940:	109c6004 	addi	r2,r2,29056
    4944:	10c00303 	ldbu	r3,12(r2)
    4948:	00800034 	movhi	r2,0
    494c:	109c9204 	addi	r2,r2,29256
    4950:	10c00785 	stb	r3,30(r2)
    spi_command_string_tx[31] = rxdata[13];
    4954:	00800034 	movhi	r2,0
    4958:	109c6004 	addi	r2,r2,29056
    495c:	10c00343 	ldbu	r3,13(r2)
    4960:	00800034 	movhi	r2,0
    4964:	109c9204 	addi	r2,r2,29256
    4968:	10c007c5 	stb	r3,31(r2)
    spi_command_string_tx[32] = rxdata[14];
    496c:	00800034 	movhi	r2,0
    4970:	109c6004 	addi	r2,r2,29056
    4974:	10c00383 	ldbu	r3,14(r2)
    4978:	00800034 	movhi	r2,0
    497c:	109c9204 	addi	r2,r2,29256
    4980:	10c00805 	stb	r3,32(r2)
    spi_command_string_tx[33] = rxdata[15];
    4984:	00800034 	movhi	r2,0
    4988:	109c6004 	addi	r2,r2,29056
    498c:	10c003c3 	ldbu	r3,15(r2)
    4990:	00800034 	movhi	r2,0
    4994:	109c9204 	addi	r2,r2,29256
    4998:	10c00845 	stb	r3,33(r2)

    spi_command_string_tx[34] = rxdata[16];
    499c:	00800034 	movhi	r2,0
    49a0:	109c6004 	addi	r2,r2,29056
    49a4:	10c00403 	ldbu	r3,16(r2)
    49a8:	00800034 	movhi	r2,0
    49ac:	109c9204 	addi	r2,r2,29256
    49b0:	10c00885 	stb	r3,34(r2)
    spi_command_string_tx[35] = rxdata[17];
    49b4:	00800034 	movhi	r2,0
    49b8:	109c6004 	addi	r2,r2,29056
    49bc:	10c00443 	ldbu	r3,17(r2)
    49c0:	00800034 	movhi	r2,0
    49c4:	109c9204 	addi	r2,r2,29256
    49c8:	10c008c5 	stb	r3,35(r2)
    spi_command_string_tx[36] = rxdata[18];
    49cc:	00800034 	movhi	r2,0
    49d0:	109c6004 	addi	r2,r2,29056
    49d4:	10c00483 	ldbu	r3,18(r2)
    49d8:	00800034 	movhi	r2,0
    49dc:	109c9204 	addi	r2,r2,29256
    49e0:	10c00905 	stb	r3,36(r2)
    spi_command_string_tx[37] = rxdata[19];
    49e4:	00800034 	movhi	r2,0
    49e8:	109c6004 	addi	r2,r2,29056
    49ec:	10c004c3 	ldbu	r3,19(r2)
    49f0:	00800034 	movhi	r2,0
    49f4:	109c9204 	addi	r2,r2,29256
    49f8:	10c00945 	stb	r3,37(r2)
    spi_command_string_tx[38] = rxdata[20];
    49fc:	00800034 	movhi	r2,0
    4a00:	109c6004 	addi	r2,r2,29056
    4a04:	10c00503 	ldbu	r3,20(r2)
    4a08:	00800034 	movhi	r2,0
    4a0c:	109c9204 	addi	r2,r2,29256
    4a10:	10c00985 	stb	r3,38(r2)
    spi_command_string_tx[39] = rxdata[21];
    4a14:	00800034 	movhi	r2,0
    4a18:	109c6004 	addi	r2,r2,29056
    4a1c:	10c00543 	ldbu	r3,21(r2)
    4a20:	00800034 	movhi	r2,0
    4a24:	109c9204 	addi	r2,r2,29256
    4a28:	10c009c5 	stb	r3,39(r2)
    spi_command_string_tx[40] = rxdata[22];
    4a2c:	00800034 	movhi	r2,0
    4a30:	109c6004 	addi	r2,r2,29056
    4a34:	10c00583 	ldbu	r3,22(r2)
    4a38:	00800034 	movhi	r2,0
    4a3c:	109c9204 	addi	r2,r2,29256
    4a40:	10c00a05 	stb	r3,40(r2)
    spi_command_string_tx[41] = rxdata[23];
    4a44:	00800034 	movhi	r2,0
    4a48:	109c6004 	addi	r2,r2,29056
    4a4c:	10c005c3 	ldbu	r3,23(r2)
    4a50:	00800034 	movhi	r2,0
    4a54:	109c9204 	addi	r2,r2,29256
    4a58:	10c00a45 	stb	r3,41(r2)
    spi_command_string_tx[42] = rxdata[24];
    4a5c:	00800034 	movhi	r2,0
    4a60:	109c6004 	addi	r2,r2,29056
    4a64:	10c00603 	ldbu	r3,24(r2)
    4a68:	00800034 	movhi	r2,0
    4a6c:	109c9204 	addi	r2,r2,29256
    4a70:	10c00a85 	stb	r3,42(r2)
    spi_command_string_tx[43] = rxdata[25];
    4a74:	00800034 	movhi	r2,0
    4a78:	109c6004 	addi	r2,r2,29056
    4a7c:	10c00643 	ldbu	r3,25(r2)
    4a80:	00800034 	movhi	r2,0
    4a84:	109c9204 	addi	r2,r2,29256
    4a88:	10c00ac5 	stb	r3,43(r2)
    spi_command_string_tx[44] = rxdata[26];
    4a8c:	00800034 	movhi	r2,0
    4a90:	109c6004 	addi	r2,r2,29056
    4a94:	10c00683 	ldbu	r3,26(r2)
    4a98:	00800034 	movhi	r2,0
    4a9c:	109c9204 	addi	r2,r2,29256
    4aa0:	10c00b05 	stb	r3,44(r2)
    spi_command_string_tx[45] = rxdata[27];
    4aa4:	00800034 	movhi	r2,0
    4aa8:	109c6004 	addi	r2,r2,29056
    4aac:	10c006c3 	ldbu	r3,27(r2)
    4ab0:	00800034 	movhi	r2,0
    4ab4:	109c9204 	addi	r2,r2,29256
    4ab8:	10c00b45 	stb	r3,45(r2)
    spi_command_string_tx[46] = rxdata[28];
    4abc:	00800034 	movhi	r2,0
    4ac0:	109c6004 	addi	r2,r2,29056
    4ac4:	10c00703 	ldbu	r3,28(r2)
    4ac8:	00800034 	movhi	r2,0
    4acc:	109c9204 	addi	r2,r2,29256
    4ad0:	10c00b85 	stb	r3,46(r2)
    spi_command_string_tx[47] = rxdata[29];
    4ad4:	00800034 	movhi	r2,0
    4ad8:	109c6004 	addi	r2,r2,29056
    4adc:	10c00743 	ldbu	r3,29(r2)
    4ae0:	00800034 	movhi	r2,0
    4ae4:	109c9204 	addi	r2,r2,29256
    4ae8:	10c00bc5 	stb	r3,47(r2)
    spi_command_string_tx[48] = rxdata[30];
    4aec:	00800034 	movhi	r2,0
    4af0:	109c6004 	addi	r2,r2,29056
    4af4:	10c00783 	ldbu	r3,30(r2)
    4af8:	00800034 	movhi	r2,0
    4afc:	109c9204 	addi	r2,r2,29256
    4b00:	10c00c05 	stb	r3,48(r2)
    spi_command_string_tx[49] = rxdata[31];
    4b04:	00800034 	movhi	r2,0
    4b08:	109c6004 	addi	r2,r2,29056
    4b0c:	10c007c3 	ldbu	r3,31(r2)
    4b10:	00800034 	movhi	r2,0
    4b14:	109c9204 	addi	r2,r2,29256
    4b18:	10c00c45 	stb	r3,49(r2)
    spi_command_string_tx[50] = rxdata[32];
    4b1c:	00800034 	movhi	r2,0
    4b20:	109c6004 	addi	r2,r2,29056
    4b24:	10c00803 	ldbu	r3,32(r2)
    4b28:	00800034 	movhi	r2,0
    4b2c:	109c9204 	addi	r2,r2,29256
    4b30:	10c00c85 	stb	r3,50(r2)
    spi_command_string_tx[51] = rxdata[33];
    4b34:	00800034 	movhi	r2,0
    4b38:	109c6004 	addi	r2,r2,29056
    4b3c:	10c00843 	ldbu	r3,33(r2)
    4b40:	00800034 	movhi	r2,0
    4b44:	109c9204 	addi	r2,r2,29256
    4b48:	10c00cc5 	stb	r3,51(r2)
    spi_command_string_tx[52] = rxdata[34];
    4b4c:	00800034 	movhi	r2,0
    4b50:	109c6004 	addi	r2,r2,29056
    4b54:	10c00883 	ldbu	r3,34(r2)
    4b58:	00800034 	movhi	r2,0
    4b5c:	109c9204 	addi	r2,r2,29256
    4b60:	10c00d05 	stb	r3,52(r2)
    spi_command_string_tx[53] = rxdata[35];
    4b64:	00800034 	movhi	r2,0
    4b68:	109c6004 	addi	r2,r2,29056
    4b6c:	10c008c3 	ldbu	r3,35(r2)
    4b70:	00800034 	movhi	r2,0
    4b74:	109c9204 	addi	r2,r2,29256
    4b78:	10c00d45 	stb	r3,53(r2)
    spi_command_string_tx[54] = rxdata[36];
    4b7c:	00800034 	movhi	r2,0
    4b80:	109c6004 	addi	r2,r2,29056
    4b84:	10c00903 	ldbu	r3,36(r2)
    4b88:	00800034 	movhi	r2,0
    4b8c:	109c9204 	addi	r2,r2,29256
    4b90:	10c00d85 	stb	r3,54(r2)
    spi_command_string_tx[55] = rxdata[37];
    4b94:	00800034 	movhi	r2,0
    4b98:	109c6004 	addi	r2,r2,29056
    4b9c:	10c00943 	ldbu	r3,37(r2)
    4ba0:	00800034 	movhi	r2,0
    4ba4:	109c9204 	addi	r2,r2,29256
    4ba8:	10c00dc5 	stb	r3,55(r2)
    spi_command_string_tx[56] = rxdata[38];
    4bac:	00800034 	movhi	r2,0
    4bb0:	109c6004 	addi	r2,r2,29056
    4bb4:	10c00983 	ldbu	r3,38(r2)
    4bb8:	00800034 	movhi	r2,0
    4bbc:	109c9204 	addi	r2,r2,29256
    4bc0:	10c00e05 	stb	r3,56(r2)
    spi_command_string_tx[57] = rxdata[39];
    4bc4:	00800034 	movhi	r2,0
    4bc8:	109c6004 	addi	r2,r2,29056
    4bcc:	10c009c3 	ldbu	r3,39(r2)
    4bd0:	00800034 	movhi	r2,0
    4bd4:	109c9204 	addi	r2,r2,29256
    4bd8:	10c00e45 	stb	r3,57(r2)
    spi_command_string_tx[58] = rxdata[40];
    4bdc:	00800034 	movhi	r2,0
    4be0:	109c6004 	addi	r2,r2,29056
    4be4:	10c00a03 	ldbu	r3,40(r2)
    4be8:	00800034 	movhi	r2,0
    4bec:	109c9204 	addi	r2,r2,29256
    4bf0:	10c00e85 	stb	r3,58(r2)
    spi_command_string_tx[59] = rxdata[41];
    4bf4:	00800034 	movhi	r2,0
    4bf8:	109c6004 	addi	r2,r2,29056
    4bfc:	10c00a43 	ldbu	r3,41(r2)
    4c00:	00800034 	movhi	r2,0
    4c04:	109c9204 	addi	r2,r2,29256
    4c08:	10c00ec5 	stb	r3,59(r2)
    spi_command_string_tx[60] = rxdata[42];
    4c0c:	00800034 	movhi	r2,0
    4c10:	109c6004 	addi	r2,r2,29056
    4c14:	10c00a83 	ldbu	r3,42(r2)
    4c18:	00800034 	movhi	r2,0
    4c1c:	109c9204 	addi	r2,r2,29256
    4c20:	10c00f05 	stb	r3,60(r2)
    spi_command_string_tx[61] = rxdata[43];
    4c24:	00800034 	movhi	r2,0
    4c28:	109c6004 	addi	r2,r2,29056
    4c2c:	10c00ac3 	ldbu	r3,43(r2)
    4c30:	00800034 	movhi	r2,0
    4c34:	109c9204 	addi	r2,r2,29256
    4c38:	10c00f45 	stb	r3,61(r2)
    spi_command_string_tx[62] = rxdata[44];
    4c3c:	00800034 	movhi	r2,0
    4c40:	109c6004 	addi	r2,r2,29056
    4c44:	10c00b03 	ldbu	r3,44(r2)
    4c48:	00800034 	movhi	r2,0
    4c4c:	109c9204 	addi	r2,r2,29256
    4c50:	10c00f85 	stb	r3,62(r2)
    spi_command_string_tx[63] = rxdata[45];
    4c54:	00800034 	movhi	r2,0
    4c58:	109c6004 	addi	r2,r2,29056
    4c5c:	10c00b43 	ldbu	r3,45(r2)
    4c60:	00800034 	movhi	r2,0
    4c64:	109c9204 	addi	r2,r2,29256
    4c68:	10c00fc5 	stb	r3,63(r2)
    spi_command_string_tx[64] = rxdata[46];
    4c6c:	00800034 	movhi	r2,0
    4c70:	109c6004 	addi	r2,r2,29056
    4c74:	10c00b83 	ldbu	r3,46(r2)
    4c78:	00800034 	movhi	r2,0
    4c7c:	109c9204 	addi	r2,r2,29256
    4c80:	10c01005 	stb	r3,64(r2)
    spi_command_string_tx[65] = rxdata[47];
    4c84:	00800034 	movhi	r2,0
    4c88:	109c6004 	addi	r2,r2,29056
    4c8c:	10c00bc3 	ldbu	r3,47(r2)
    4c90:	00800034 	movhi	r2,0
    4c94:	109c9204 	addi	r2,r2,29256
    4c98:	10c01045 	stb	r3,65(r2)
    spi_command_string_tx[66] = rxdata[48];
    4c9c:	00800034 	movhi	r2,0
    4ca0:	109c6004 	addi	r2,r2,29056
    4ca4:	10c00c03 	ldbu	r3,48(r2)
    4ca8:	00800034 	movhi	r2,0
    4cac:	109c9204 	addi	r2,r2,29256
    4cb0:	10c01085 	stb	r3,66(r2)
    spi_command_string_tx[67] = rxdata[49];
    4cb4:	00800034 	movhi	r2,0
    4cb8:	109c6004 	addi	r2,r2,29056
    4cbc:	10c00c43 	ldbu	r3,49(r2)
    4cc0:	00800034 	movhi	r2,0
    4cc4:	109c9204 	addi	r2,r2,29256
    4cc8:	10c010c5 	stb	r3,67(r2)
    spi_command_string_tx[68] = rxdata[50];
    4ccc:	00800034 	movhi	r2,0
    4cd0:	109c6004 	addi	r2,r2,29056
    4cd4:	10c00c83 	ldbu	r3,50(r2)
    4cd8:	00800034 	movhi	r2,0
    4cdc:	109c9204 	addi	r2,r2,29256
    4ce0:	10c01105 	stb	r3,68(r2)
    spi_command_string_tx[69] = rxdata[51];
    4ce4:	00800034 	movhi	r2,0
    4ce8:	109c6004 	addi	r2,r2,29056
    4cec:	10c00cc3 	ldbu	r3,51(r2)
    4cf0:	00800034 	movhi	r2,0
    4cf4:	109c9204 	addi	r2,r2,29256
    4cf8:	10c01145 	stb	r3,69(r2)
    spi_command_string_tx[70] = rxdata[52];
    4cfc:	00800034 	movhi	r2,0
    4d00:	109c6004 	addi	r2,r2,29056
    4d04:	10c00d03 	ldbu	r3,52(r2)
    4d08:	00800034 	movhi	r2,0
    4d0c:	109c9204 	addi	r2,r2,29256
    4d10:	10c01185 	stb	r3,70(r2)
    spi_command_string_tx[71] = rxdata[53];
    4d14:	00800034 	movhi	r2,0
    4d18:	109c6004 	addi	r2,r2,29056
    4d1c:	10c00d43 	ldbu	r3,53(r2)
    4d20:	00800034 	movhi	r2,0
    4d24:	109c9204 	addi	r2,r2,29256
    4d28:	10c011c5 	stb	r3,71(r2)
    spi_command_string_tx[72] = rxdata[54];
    4d2c:	00800034 	movhi	r2,0
    4d30:	109c6004 	addi	r2,r2,29056
    4d34:	10c00d83 	ldbu	r3,54(r2)
    4d38:	00800034 	movhi	r2,0
    4d3c:	109c9204 	addi	r2,r2,29256
    4d40:	10c01205 	stb	r3,72(r2)
    spi_command_string_tx[73] = rxdata[55];
    4d44:	00800034 	movhi	r2,0
    4d48:	109c6004 	addi	r2,r2,29056
    4d4c:	10c00dc3 	ldbu	r3,55(r2)
    4d50:	00800034 	movhi	r2,0
    4d54:	109c9204 	addi	r2,r2,29256
    4d58:	10c01245 	stb	r3,73(r2)
    spi_command_string_tx[74] = rxdata[56];
    4d5c:	00800034 	movhi	r2,0
    4d60:	109c6004 	addi	r2,r2,29056
    4d64:	10c00e03 	ldbu	r3,56(r2)
    4d68:	00800034 	movhi	r2,0
    4d6c:	109c9204 	addi	r2,r2,29256
    4d70:	10c01285 	stb	r3,74(r2)
    spi_command_string_tx[75] = rxdata[57];
    4d74:	00800034 	movhi	r2,0
    4d78:	109c6004 	addi	r2,r2,29056
    4d7c:	10c00e43 	ldbu	r3,57(r2)
    4d80:	00800034 	movhi	r2,0
    4d84:	109c9204 	addi	r2,r2,29256
    4d88:	10c012c5 	stb	r3,75(r2)
    spi_command_string_tx[76] = rxdata[58];
    4d8c:	00800034 	movhi	r2,0
    4d90:	109c6004 	addi	r2,r2,29056
    4d94:	10c00e83 	ldbu	r3,58(r2)
    4d98:	00800034 	movhi	r2,0
    4d9c:	109c9204 	addi	r2,r2,29256
    4da0:	10c01305 	stb	r3,76(r2)
    spi_command_string_tx[77] = rxdata[59];
    4da4:	00800034 	movhi	r2,0
    4da8:	109c6004 	addi	r2,r2,29056
    4dac:	10c00ec3 	ldbu	r3,59(r2)
    4db0:	00800034 	movhi	r2,0
    4db4:	109c9204 	addi	r2,r2,29256
    4db8:	10c01345 	stb	r3,77(r2)
    spi_command_string_tx[78] = rxdata[60];
    4dbc:	00800034 	movhi	r2,0
    4dc0:	109c6004 	addi	r2,r2,29056
    4dc4:	10c00f03 	ldbu	r3,60(r2)
    4dc8:	00800034 	movhi	r2,0
    4dcc:	109c9204 	addi	r2,r2,29256
    4dd0:	10c01385 	stb	r3,78(r2)
    spi_command_string_tx[79] = rxdata[61];
    4dd4:	00800034 	movhi	r2,0
    4dd8:	109c6004 	addi	r2,r2,29056
    4ddc:	10c00f43 	ldbu	r3,61(r2)
    4de0:	00800034 	movhi	r2,0
    4de4:	109c9204 	addi	r2,r2,29256
    4de8:	10c013c5 	stb	r3,79(r2)
    spi_command_string_tx[80] = rxdata[62];
    4dec:	00800034 	movhi	r2,0
    4df0:	109c6004 	addi	r2,r2,29056
    4df4:	10c00f83 	ldbu	r3,62(r2)
    4df8:	00800034 	movhi	r2,0
    4dfc:	109c9204 	addi	r2,r2,29256
    4e00:	10c01405 	stb	r3,80(r2)
    spi_command_string_tx[81] = rxdata[63];
    4e04:	00800034 	movhi	r2,0
    4e08:	109c6004 	addi	r2,r2,29056
    4e0c:	10c00fc3 	ldbu	r3,63(r2)
    4e10:	00800034 	movhi	r2,0
    4e14:	109c9204 	addi	r2,r2,29256
    4e18:	10c01445 	stb	r3,81(r2)
    spi_command_string_tx[82] = rxdata[64];
    4e1c:	00800034 	movhi	r2,0
    4e20:	109c6004 	addi	r2,r2,29056
    4e24:	10c01003 	ldbu	r3,64(r2)
    4e28:	00800034 	movhi	r2,0
    4e2c:	109c9204 	addi	r2,r2,29256
    4e30:	10c01485 	stb	r3,82(r2)
    spi_command_string_tx[83] = rxdata[65];
    4e34:	00800034 	movhi	r2,0
    4e38:	109c6004 	addi	r2,r2,29056
    4e3c:	10c01043 	ldbu	r3,65(r2)
    4e40:	00800034 	movhi	r2,0
    4e44:	109c9204 	addi	r2,r2,29256
    4e48:	10c014c5 	stb	r3,83(r2)
    spi_command_string_tx[84] = rxdata[66];
    4e4c:	00800034 	movhi	r2,0
    4e50:	109c6004 	addi	r2,r2,29056
    4e54:	10c01083 	ldbu	r3,66(r2)
    4e58:	00800034 	movhi	r2,0
    4e5c:	109c9204 	addi	r2,r2,29256
    4e60:	10c01505 	stb	r3,84(r2)
    spi_command_string_tx[85] = rxdata[67];
    4e64:	00800034 	movhi	r2,0
    4e68:	109c6004 	addi	r2,r2,29056
    4e6c:	10c010c3 	ldbu	r3,67(r2)
    4e70:	00800034 	movhi	r2,0
    4e74:	109c9204 	addi	r2,r2,29256
    4e78:	10c01545 	stb	r3,85(r2)
    spi_command_string_tx[86] = rxdata[68];
    4e7c:	00800034 	movhi	r2,0
    4e80:	109c6004 	addi	r2,r2,29056
    4e84:	10c01103 	ldbu	r3,68(r2)
    4e88:	00800034 	movhi	r2,0
    4e8c:	109c9204 	addi	r2,r2,29256
    4e90:	10c01585 	stb	r3,86(r2)
    spi_command_string_tx[87] = rxdata[69];
    4e94:	00800034 	movhi	r2,0
    4e98:	109c6004 	addi	r2,r2,29056
    4e9c:	10c01143 	ldbu	r3,69(r2)
    4ea0:	00800034 	movhi	r2,0
    4ea4:	109c9204 	addi	r2,r2,29256
    4ea8:	10c015c5 	stb	r3,87(r2)
    spi_command_string_tx[88] = rxdata[70];
    4eac:	00800034 	movhi	r2,0
    4eb0:	109c6004 	addi	r2,r2,29056
    4eb4:	10c01183 	ldbu	r3,70(r2)
    4eb8:	00800034 	movhi	r2,0
    4ebc:	109c9204 	addi	r2,r2,29256
    4ec0:	10c01605 	stb	r3,88(r2)
    spi_command_string_tx[89] = rxdata[71];
    4ec4:	00800034 	movhi	r2,0
    4ec8:	109c6004 	addi	r2,r2,29056
    4ecc:	10c011c3 	ldbu	r3,71(r2)
    4ed0:	00800034 	movhi	r2,0
    4ed4:	109c9204 	addi	r2,r2,29256
    4ed8:	10c01645 	stb	r3,89(r2)
    spi_command_string_tx[90] = rxdata[72];
    4edc:	00800034 	movhi	r2,0
    4ee0:	109c6004 	addi	r2,r2,29056
    4ee4:	10c01203 	ldbu	r3,72(r2)
    4ee8:	00800034 	movhi	r2,0
    4eec:	109c9204 	addi	r2,r2,29256
    4ef0:	10c01685 	stb	r3,90(r2)
    spi_command_string_tx[91] = rxdata[73];
    4ef4:	00800034 	movhi	r2,0
    4ef8:	109c6004 	addi	r2,r2,29056
    4efc:	10c01243 	ldbu	r3,73(r2)
    4f00:	00800034 	movhi	r2,0
    4f04:	109c9204 	addi	r2,r2,29256
    4f08:	10c016c5 	stb	r3,91(r2)
    spi_command_string_tx[92] = rxdata[74];
    4f0c:	00800034 	movhi	r2,0
    4f10:	109c6004 	addi	r2,r2,29056
    4f14:	10c01283 	ldbu	r3,74(r2)
    4f18:	00800034 	movhi	r2,0
    4f1c:	109c9204 	addi	r2,r2,29256
    4f20:	10c01705 	stb	r3,92(r2)
    spi_command_string_tx[93] = rxdata[75];
    4f24:	00800034 	movhi	r2,0
    4f28:	109c6004 	addi	r2,r2,29056
    4f2c:	10c012c3 	ldbu	r3,75(r2)
    4f30:	00800034 	movhi	r2,0
    4f34:	109c9204 	addi	r2,r2,29256
    4f38:	10c01745 	stb	r3,93(r2)
    spi_command_string_tx[94] = rxdata[76];
    4f3c:	00800034 	movhi	r2,0
    4f40:	109c6004 	addi	r2,r2,29056
    4f44:	10c01303 	ldbu	r3,76(r2)
    4f48:	00800034 	movhi	r2,0
    4f4c:	109c9204 	addi	r2,r2,29256
    4f50:	10c01785 	stb	r3,94(r2)
    spi_command_string_tx[95] = rxdata[77];
    4f54:	00800034 	movhi	r2,0
    4f58:	109c6004 	addi	r2,r2,29056
    4f5c:	10c01343 	ldbu	r3,77(r2)
    4f60:	00800034 	movhi	r2,0
    4f64:	109c9204 	addi	r2,r2,29256
    4f68:	10c017c5 	stb	r3,95(r2)
    spi_command_string_tx[96] = rxdata[78];
    4f6c:	00800034 	movhi	r2,0
    4f70:	109c6004 	addi	r2,r2,29056
    4f74:	10c01383 	ldbu	r3,78(r2)
    4f78:	00800034 	movhi	r2,0
    4f7c:	109c9204 	addi	r2,r2,29256
    4f80:	10c01805 	stb	r3,96(r2)
    spi_command_string_tx[97] = rxdata[79];
    4f84:	00800034 	movhi	r2,0
    4f88:	109c6004 	addi	r2,r2,29056
    4f8c:	10c013c3 	ldbu	r3,79(r2)
    4f90:	00800034 	movhi	r2,0
    4f94:	109c9204 	addi	r2,r2,29256
    4f98:	10c01845 	stb	r3,97(r2)
    spi_command_string_tx[98] = rxdata[80];
    4f9c:	00800034 	movhi	r2,0
    4fa0:	109c6004 	addi	r2,r2,29056
    4fa4:	10c01403 	ldbu	r3,80(r2)
    4fa8:	00800034 	movhi	r2,0
    4fac:	109c9204 	addi	r2,r2,29256
    4fb0:	10c01885 	stb	r3,98(r2)
    spi_command_string_tx[99] = rxdata[81];
    4fb4:	00800034 	movhi	r2,0
    4fb8:	109c6004 	addi	r2,r2,29056
    4fbc:	10c01443 	ldbu	r3,81(r2)
    4fc0:	00800034 	movhi	r2,0
    4fc4:	109c9204 	addi	r2,r2,29256
    4fc8:	10c018c5 	stb	r3,99(r2)
    spi_command_string_tx[100] = rxdata[82];
    4fcc:	00800034 	movhi	r2,0
    4fd0:	109c6004 	addi	r2,r2,29056
    4fd4:	10c01483 	ldbu	r3,82(r2)
    4fd8:	00800034 	movhi	r2,0
    4fdc:	109c9204 	addi	r2,r2,29256
    4fe0:	10c01905 	stb	r3,100(r2)
    spi_command_string_tx[101] = rxdata[83];
    4fe4:	00800034 	movhi	r2,0
    4fe8:	109c6004 	addi	r2,r2,29056
    4fec:	10c014c3 	ldbu	r3,83(r2)
    4ff0:	00800034 	movhi	r2,0
    4ff4:	109c9204 	addi	r2,r2,29256
    4ff8:	10c01945 	stb	r3,101(r2)
    spi_command_string_tx[102] = rxdata[84];
    4ffc:	00800034 	movhi	r2,0
    5000:	109c6004 	addi	r2,r2,29056
    5004:	10c01503 	ldbu	r3,84(r2)
    5008:	00800034 	movhi	r2,0
    500c:	109c9204 	addi	r2,r2,29256
    5010:	10c01985 	stb	r3,102(r2)
    spi_command_string_tx[103] = rxdata[85];
    5014:	00800034 	movhi	r2,0
    5018:	109c6004 	addi	r2,r2,29056
    501c:	10c01543 	ldbu	r3,85(r2)
    5020:	00800034 	movhi	r2,0
    5024:	109c9204 	addi	r2,r2,29256
    5028:	10c019c5 	stb	r3,103(r2)
    spi_command_string_tx[104] = rxdata[86];
    502c:	00800034 	movhi	r2,0
    5030:	109c6004 	addi	r2,r2,29056
    5034:	10c01583 	ldbu	r3,86(r2)
    5038:	00800034 	movhi	r2,0
    503c:	109c9204 	addi	r2,r2,29256
    5040:	10c01a05 	stb	r3,104(r2)
    spi_command_string_tx[105] = rxdata[87];
    5044:	00800034 	movhi	r2,0
    5048:	109c6004 	addi	r2,r2,29056
    504c:	10c015c3 	ldbu	r3,87(r2)
    5050:	00800034 	movhi	r2,0
    5054:	109c9204 	addi	r2,r2,29256
    5058:	10c01a45 	stb	r3,105(r2)
    spi_command_string_tx[106] = rxdata[88];
    505c:	00800034 	movhi	r2,0
    5060:	109c6004 	addi	r2,r2,29056
    5064:	10c01603 	ldbu	r3,88(r2)
    5068:	00800034 	movhi	r2,0
    506c:	109c9204 	addi	r2,r2,29256
    5070:	10c01a85 	stb	r3,106(r2)
    spi_command_string_tx[107] = rxdata[89];
    5074:	00800034 	movhi	r2,0
    5078:	109c6004 	addi	r2,r2,29056
    507c:	10c01643 	ldbu	r3,89(r2)
    5080:	00800034 	movhi	r2,0
    5084:	109c9204 	addi	r2,r2,29256
    5088:	10c01ac5 	stb	r3,107(r2)
    spi_command_string_tx[108] = rxdata[90];
    508c:	00800034 	movhi	r2,0
    5090:	109c6004 	addi	r2,r2,29056
    5094:	10c01683 	ldbu	r3,90(r2)
    5098:	00800034 	movhi	r2,0
    509c:	109c9204 	addi	r2,r2,29256
    50a0:	10c01b05 	stb	r3,108(r2)
    spi_command_string_tx[109] = rxdata[91];
    50a4:	00800034 	movhi	r2,0
    50a8:	109c6004 	addi	r2,r2,29056
    50ac:	10c016c3 	ldbu	r3,91(r2)
    50b0:	00800034 	movhi	r2,0
    50b4:	109c9204 	addi	r2,r2,29256
    50b8:	10c01b45 	stb	r3,109(r2)
    spi_command_string_tx[110] = rxdata[92];
    50bc:	00800034 	movhi	r2,0
    50c0:	109c6004 	addi	r2,r2,29056
    50c4:	10c01703 	ldbu	r3,92(r2)
    50c8:	00800034 	movhi	r2,0
    50cc:	109c9204 	addi	r2,r2,29256
    50d0:	10c01b85 	stb	r3,110(r2)
    spi_command_string_tx[111] = rxdata[93];
    50d4:	00800034 	movhi	r2,0
    50d8:	109c6004 	addi	r2,r2,29056
    50dc:	10c01743 	ldbu	r3,93(r2)
    50e0:	00800034 	movhi	r2,0
    50e4:	109c9204 	addi	r2,r2,29256
    50e8:	10c01bc5 	stb	r3,111(r2)
    spi_command_string_tx[112] = rxdata[94];
    50ec:	00800034 	movhi	r2,0
    50f0:	109c6004 	addi	r2,r2,29056
    50f4:	10c01783 	ldbu	r3,94(r2)
    50f8:	00800034 	movhi	r2,0
    50fc:	109c9204 	addi	r2,r2,29256
    5100:	10c01c05 	stb	r3,112(r2)
    spi_command_string_tx[113] = rxdata[95];
    5104:	00800034 	movhi	r2,0
    5108:	109c6004 	addi	r2,r2,29056
    510c:	10c017c3 	ldbu	r3,95(r2)
    5110:	00800034 	movhi	r2,0
    5114:	109c9204 	addi	r2,r2,29256
    5118:	10c01c45 	stb	r3,113(r2)
    spi_command_string_tx[114] = rxdata[96];
    511c:	00800034 	movhi	r2,0
    5120:	109c6004 	addi	r2,r2,29056
    5124:	10c01803 	ldbu	r3,96(r2)
    5128:	00800034 	movhi	r2,0
    512c:	109c9204 	addi	r2,r2,29256
    5130:	10c01c85 	stb	r3,114(r2)
    spi_command_string_tx[115] = rxdata[97];
    5134:	00800034 	movhi	r2,0
    5138:	109c6004 	addi	r2,r2,29056
    513c:	10c01843 	ldbu	r3,97(r2)
    5140:	00800034 	movhi	r2,0
    5144:	109c9204 	addi	r2,r2,29256
    5148:	10c01cc5 	stb	r3,115(r2)
    spi_command_string_tx[116] = rxdata[98];
    514c:	00800034 	movhi	r2,0
    5150:	109c6004 	addi	r2,r2,29056
    5154:	10c01883 	ldbu	r3,98(r2)
    5158:	00800034 	movhi	r2,0
    515c:	109c9204 	addi	r2,r2,29256
    5160:	10c01d05 	stb	r3,116(r2)
    spi_command_string_tx[117] = rxdata[99];
    5164:	00800034 	movhi	r2,0
    5168:	109c6004 	addi	r2,r2,29056
    516c:	10c018c3 	ldbu	r3,99(r2)
    5170:	00800034 	movhi	r2,0
    5174:	109c9204 	addi	r2,r2,29256
    5178:	10c01d45 	stb	r3,117(r2)
    spi_command_string_tx[118] = rxdata[100];
    517c:	00800034 	movhi	r2,0
    5180:	109c6004 	addi	r2,r2,29056
    5184:	10c01903 	ldbu	r3,100(r2)
    5188:	00800034 	movhi	r2,0
    518c:	109c9204 	addi	r2,r2,29256
    5190:	10c01d85 	stb	r3,118(r2)
    spi_command_string_tx[119] = rxdata[101];
    5194:	00800034 	movhi	r2,0
    5198:	109c6004 	addi	r2,r2,29056
    519c:	10c01943 	ldbu	r3,101(r2)
    51a0:	00800034 	movhi	r2,0
    51a4:	109c9204 	addi	r2,r2,29256
    51a8:	10c01dc5 	stb	r3,119(r2)
    spi_command_string_tx[120] = rxdata[102];
    51ac:	00800034 	movhi	r2,0
    51b0:	109c6004 	addi	r2,r2,29056
    51b4:	10c01983 	ldbu	r3,102(r2)
    51b8:	00800034 	movhi	r2,0
    51bc:	109c9204 	addi	r2,r2,29256
    51c0:	10c01e05 	stb	r3,120(r2)
    spi_command_string_tx[121] = rxdata[103];
    51c4:	00800034 	movhi	r2,0
    51c8:	109c6004 	addi	r2,r2,29056
    51cc:	10c019c3 	ldbu	r3,103(r2)
    51d0:	00800034 	movhi	r2,0
    51d4:	109c9204 	addi	r2,r2,29256
    51d8:	10c01e45 	stb	r3,121(r2)
    spi_command_string_tx[122] = rxdata[104];
    51dc:	00800034 	movhi	r2,0
    51e0:	109c6004 	addi	r2,r2,29056
    51e4:	10c01a03 	ldbu	r3,104(r2)
    51e8:	00800034 	movhi	r2,0
    51ec:	109c9204 	addi	r2,r2,29256
    51f0:	10c01e85 	stb	r3,122(r2)
    spi_command_string_tx[123] = rxdata[105];
    51f4:	00800034 	movhi	r2,0
    51f8:	109c6004 	addi	r2,r2,29056
    51fc:	10c01a43 	ldbu	r3,105(r2)
    5200:	00800034 	movhi	r2,0
    5204:	109c9204 	addi	r2,r2,29256
    5208:	10c01ec5 	stb	r3,123(r2)
    spi_command_string_tx[124] = rxdata[106];
    520c:	00800034 	movhi	r2,0
    5210:	109c6004 	addi	r2,r2,29056
    5214:	10c01a83 	ldbu	r3,106(r2)
    5218:	00800034 	movhi	r2,0
    521c:	109c9204 	addi	r2,r2,29256
    5220:	10c01f05 	stb	r3,124(r2)
    spi_command_string_tx[125] = rxdata[107];
    5224:	00800034 	movhi	r2,0
    5228:	109c6004 	addi	r2,r2,29056
    522c:	10c01ac3 	ldbu	r3,107(r2)
    5230:	00800034 	movhi	r2,0
    5234:	109c9204 	addi	r2,r2,29256
    5238:	10c01f45 	stb	r3,125(r2)
    spi_command_string_tx[126] = rxdata[108];
    523c:	00800034 	movhi	r2,0
    5240:	109c6004 	addi	r2,r2,29056
    5244:	10c01b03 	ldbu	r3,108(r2)
    5248:	00800034 	movhi	r2,0
    524c:	109c9204 	addi	r2,r2,29256
    5250:	10c01f85 	stb	r3,126(r2)
    spi_command_string_tx[127] = rxdata[109];
    5254:	00800034 	movhi	r2,0
    5258:	109c6004 	addi	r2,r2,29056
    525c:	10c01b43 	ldbu	r3,109(r2)
    5260:	00800034 	movhi	r2,0
    5264:	109c9204 	addi	r2,r2,29256
    5268:	10c01fc5 	stb	r3,127(r2)
    spi_command_string_tx[128] = rxdata[110];
    526c:	00800034 	movhi	r2,0
    5270:	109c6004 	addi	r2,r2,29056
    5274:	10c01b83 	ldbu	r3,110(r2)
    5278:	00800034 	movhi	r2,0
    527c:	109c9204 	addi	r2,r2,29256
    5280:	10c02005 	stb	r3,128(r2)
    spi_command_string_tx[129] = rxdata[111];
    5284:	00800034 	movhi	r2,0
    5288:	109c6004 	addi	r2,r2,29056
    528c:	10c01bc3 	ldbu	r3,111(r2)
    5290:	00800034 	movhi	r2,0
    5294:	109c9204 	addi	r2,r2,29256
    5298:	10c02045 	stb	r3,129(r2)
    spi_command_string_tx[130] = rxdata[112];
    529c:	00800034 	movhi	r2,0
    52a0:	109c6004 	addi	r2,r2,29056
    52a4:	10c01c03 	ldbu	r3,112(r2)
    52a8:	00800034 	movhi	r2,0
    52ac:	109c9204 	addi	r2,r2,29256
    52b0:	10c02085 	stb	r3,130(r2)
    spi_command_string_tx[131] = rxdata[113];
    52b4:	00800034 	movhi	r2,0
    52b8:	109c6004 	addi	r2,r2,29056
    52bc:	10c01c43 	ldbu	r3,113(r2)
    52c0:	00800034 	movhi	r2,0
    52c4:	109c9204 	addi	r2,r2,29256
    52c8:	10c020c5 	stb	r3,131(r2)
    spi_command_string_tx[132] = rxdata[114];
    52cc:	00800034 	movhi	r2,0
    52d0:	109c6004 	addi	r2,r2,29056
    52d4:	10c01c83 	ldbu	r3,114(r2)
    52d8:	00800034 	movhi	r2,0
    52dc:	109c9204 	addi	r2,r2,29256
    52e0:	10c02105 	stb	r3,132(r2)
    spi_command_string_tx[133] = rxdata[115];
    52e4:	00800034 	movhi	r2,0
    52e8:	109c6004 	addi	r2,r2,29056
    52ec:	10c01cc3 	ldbu	r3,115(r2)
    52f0:	00800034 	movhi	r2,0
    52f4:	109c9204 	addi	r2,r2,29256
    52f8:	10c02145 	stb	r3,133(r2)
    spi_command_string_tx[134] = rxdata[116];
    52fc:	00800034 	movhi	r2,0
    5300:	109c6004 	addi	r2,r2,29056
    5304:	10c01d03 	ldbu	r3,116(r2)
    5308:	00800034 	movhi	r2,0
    530c:	109c9204 	addi	r2,r2,29256
    5310:	10c02185 	stb	r3,134(r2)
    spi_command_string_tx[135] = rxdata[117];
    5314:	00800034 	movhi	r2,0
    5318:	109c6004 	addi	r2,r2,29056
    531c:	10c01d43 	ldbu	r3,117(r2)
    5320:	00800034 	movhi	r2,0
    5324:	109c9204 	addi	r2,r2,29256
    5328:	10c021c5 	stb	r3,135(r2)
    spi_command_string_tx[136] = rxdata[118];
    532c:	00800034 	movhi	r2,0
    5330:	109c6004 	addi	r2,r2,29056
    5334:	10c01d83 	ldbu	r3,118(r2)
    5338:	00800034 	movhi	r2,0
    533c:	109c9204 	addi	r2,r2,29256
    5340:	10c02205 	stb	r3,136(r2)
    spi_command_string_tx[137] = rxdata[119];
    5344:	00800034 	movhi	r2,0
    5348:	109c6004 	addi	r2,r2,29056
    534c:	10c01dc3 	ldbu	r3,119(r2)
    5350:	00800034 	movhi	r2,0
    5354:	109c9204 	addi	r2,r2,29256
    5358:	10c02245 	stb	r3,137(r2)
    spi_command_string_tx[138] = rxdata[120];
    535c:	00800034 	movhi	r2,0
    5360:	109c6004 	addi	r2,r2,29056
    5364:	10c01e03 	ldbu	r3,120(r2)
    5368:	00800034 	movhi	r2,0
    536c:	109c9204 	addi	r2,r2,29256
    5370:	10c02285 	stb	r3,138(r2)
    spi_command_string_tx[139] = rxdata[121];
    5374:	00800034 	movhi	r2,0
    5378:	109c6004 	addi	r2,r2,29056
    537c:	10c01e43 	ldbu	r3,121(r2)
    5380:	00800034 	movhi	r2,0
    5384:	109c9204 	addi	r2,r2,29256
    5388:	10c022c5 	stb	r3,139(r2)
    spi_command_string_tx[140] = rxdata[122];
    538c:	00800034 	movhi	r2,0
    5390:	109c6004 	addi	r2,r2,29056
    5394:	10c01e83 	ldbu	r3,122(r2)
    5398:	00800034 	movhi	r2,0
    539c:	109c9204 	addi	r2,r2,29256
    53a0:	10c02305 	stb	r3,140(r2)
    spi_command_string_tx[141] = rxdata[123];
    53a4:	00800034 	movhi	r2,0
    53a8:	109c6004 	addi	r2,r2,29056
    53ac:	10c01ec3 	ldbu	r3,123(r2)
    53b0:	00800034 	movhi	r2,0
    53b4:	109c9204 	addi	r2,r2,29256
    53b8:	10c02345 	stb	r3,141(r2)
    spi_command_string_tx[142] = rxdata[124];
    53bc:	00800034 	movhi	r2,0
    53c0:	109c6004 	addi	r2,r2,29056
    53c4:	10c01f03 	ldbu	r3,124(r2)
    53c8:	00800034 	movhi	r2,0
    53cc:	109c9204 	addi	r2,r2,29256
    53d0:	10c02385 	stb	r3,142(r2)
    spi_command_string_tx[143] = rxdata[125];
    53d4:	00800034 	movhi	r2,0
    53d8:	109c6004 	addi	r2,r2,29056
    53dc:	10c01f43 	ldbu	r3,125(r2)
    53e0:	00800034 	movhi	r2,0
    53e4:	109c9204 	addi	r2,r2,29256
    53e8:	10c023c5 	stb	r3,143(r2)
    spi_command_string_tx[144] = rxdata[126];
    53ec:	00800034 	movhi	r2,0
    53f0:	109c6004 	addi	r2,r2,29056
    53f4:	10c01f83 	ldbu	r3,126(r2)
    53f8:	00800034 	movhi	r2,0
    53fc:	109c9204 	addi	r2,r2,29256
    5400:	10c02405 	stb	r3,144(r2)
    spi_command_string_tx[145] = rxdata[127];
    5404:	00800034 	movhi	r2,0
    5408:	109c6004 	addi	r2,r2,29056
    540c:	10c01fc3 	ldbu	r3,127(r2)
    5410:	00800034 	movhi	r2,0
    5414:	109c9204 	addi	r2,r2,29256
    5418:	10c02445 	stb	r3,145(r2)

    spi_command_string_tx[146] = rxdata[128];
    541c:	00800034 	movhi	r2,0
    5420:	109c6004 	addi	r2,r2,29056
    5424:	10c02003 	ldbu	r3,128(r2)
    5428:	00800034 	movhi	r2,0
    542c:	109c9204 	addi	r2,r2,29256
    5430:	10c02485 	stb	r3,146(r2)
    spi_command_string_tx[147] = rxdata[129];
    5434:	00800034 	movhi	r2,0
    5438:	109c6004 	addi	r2,r2,29056
    543c:	10c02043 	ldbu	r3,129(r2)
    5440:	00800034 	movhi	r2,0
    5444:	109c9204 	addi	r2,r2,29256
    5448:	10c024c5 	stb	r3,147(r2)
    spi_command_string_tx[148] = rxdata[130];
    544c:	00800034 	movhi	r2,0
    5450:	109c6004 	addi	r2,r2,29056
    5454:	10c02083 	ldbu	r3,130(r2)
    5458:	00800034 	movhi	r2,0
    545c:	109c9204 	addi	r2,r2,29256
    5460:	10c02505 	stb	r3,148(r2)
    spi_command_string_tx[149] = rxdata[131];
    5464:	00800034 	movhi	r2,0
    5468:	109c6004 	addi	r2,r2,29056
    546c:	10c020c3 	ldbu	r3,131(r2)
    5470:	00800034 	movhi	r2,0
    5474:	109c9204 	addi	r2,r2,29256
    5478:	10c02545 	stb	r3,149(r2)
    spi_command_string_tx[150] = rxdata[132];
    547c:	00800034 	movhi	r2,0
    5480:	109c6004 	addi	r2,r2,29056
    5484:	10c02103 	ldbu	r3,132(r2)
    5488:	00800034 	movhi	r2,0
    548c:	109c9204 	addi	r2,r2,29256
    5490:	10c02585 	stb	r3,150(r2)
    spi_command_string_tx[151] = rxdata[133];
    5494:	00800034 	movhi	r2,0
    5498:	109c6004 	addi	r2,r2,29056
    549c:	10c02143 	ldbu	r3,133(r2)
    54a0:	00800034 	movhi	r2,0
    54a4:	109c9204 	addi	r2,r2,29256
    54a8:	10c025c5 	stb	r3,151(r2)
    spi_command_string_tx[152] = rxdata[134];
    54ac:	00800034 	movhi	r2,0
    54b0:	109c6004 	addi	r2,r2,29056
    54b4:	10c02183 	ldbu	r3,134(r2)
    54b8:	00800034 	movhi	r2,0
    54bc:	109c9204 	addi	r2,r2,29256
    54c0:	10c02605 	stb	r3,152(r2)
    spi_command_string_tx[153] = rxdata[135];
    54c4:	00800034 	movhi	r2,0
    54c8:	109c6004 	addi	r2,r2,29056
    54cc:	10c021c3 	ldbu	r3,135(r2)
    54d0:	00800034 	movhi	r2,0
    54d4:	109c9204 	addi	r2,r2,29256
    54d8:	10c02645 	stb	r3,153(r2)
}
    54dc:	0001883a 	nop
    54e0:	e037883a 	mov	sp,fp
    54e4:	df000017 	ldw	fp,0(sp)
    54e8:	dec00104 	addi	sp,sp,4
    54ec:	f800283a 	ret

000054f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    54f0:	defff904 	addi	sp,sp,-28
    54f4:	dfc00615 	stw	ra,24(sp)
    54f8:	df000515 	stw	fp,20(sp)
    54fc:	df000504 	addi	fp,sp,20
    5500:	e13ffc15 	stw	r4,-16(fp)
    5504:	e17ffd15 	stw	r5,-12(fp)
    5508:	e1bffe15 	stw	r6,-8(fp)
    550c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5510:	e0800217 	ldw	r2,8(fp)
    5514:	d8800015 	stw	r2,0(sp)
    5518:	e1ffff17 	ldw	r7,-4(fp)
    551c:	e1bffe17 	ldw	r6,-8(fp)
    5520:	e17ffd17 	ldw	r5,-12(fp)
    5524:	e13ffc17 	ldw	r4,-16(fp)
    5528:	00056a00 	call	56a0 <alt_iic_isr_register>
}  
    552c:	e037883a 	mov	sp,fp
    5530:	dfc00117 	ldw	ra,4(sp)
    5534:	df000017 	ldw	fp,0(sp)
    5538:	dec00204 	addi	sp,sp,8
    553c:	f800283a 	ret

00005540 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5540:	defff904 	addi	sp,sp,-28
    5544:	df000615 	stw	fp,24(sp)
    5548:	df000604 	addi	fp,sp,24
    554c:	e13ffe15 	stw	r4,-8(fp)
    5550:	e17fff15 	stw	r5,-4(fp)
    5554:	e0bfff17 	ldw	r2,-4(fp)
    5558:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    555c:	0005303a 	rdctl	r2,status
    5560:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5564:	e0fffb17 	ldw	r3,-20(fp)
    5568:	00bfff84 	movi	r2,-2
    556c:	1884703a 	and	r2,r3,r2
    5570:	1001703a 	wrctl	status,r2
  
  return context;
    5574:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5578:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    557c:	00c00044 	movi	r3,1
    5580:	e0bffa17 	ldw	r2,-24(fp)
    5584:	1884983a 	sll	r2,r3,r2
    5588:	1007883a 	mov	r3,r2
    558c:	d0a00f17 	ldw	r2,-32708(gp)
    5590:	1884b03a 	or	r2,r3,r2
    5594:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5598:	d0a00f17 	ldw	r2,-32708(gp)
    559c:	100170fa 	wrctl	ienable,r2
    55a0:	e0bffc17 	ldw	r2,-16(fp)
    55a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55a8:	e0bffd17 	ldw	r2,-12(fp)
    55ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    55b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    55b4:	0001883a 	nop
}
    55b8:	e037883a 	mov	sp,fp
    55bc:	df000017 	ldw	fp,0(sp)
    55c0:	dec00104 	addi	sp,sp,4
    55c4:	f800283a 	ret

000055c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    55c8:	defff904 	addi	sp,sp,-28
    55cc:	df000615 	stw	fp,24(sp)
    55d0:	df000604 	addi	fp,sp,24
    55d4:	e13ffe15 	stw	r4,-8(fp)
    55d8:	e17fff15 	stw	r5,-4(fp)
    55dc:	e0bfff17 	ldw	r2,-4(fp)
    55e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55e4:	0005303a 	rdctl	r2,status
    55e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55ec:	e0fffb17 	ldw	r3,-20(fp)
    55f0:	00bfff84 	movi	r2,-2
    55f4:	1884703a 	and	r2,r3,r2
    55f8:	1001703a 	wrctl	status,r2
  
  return context;
    55fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5600:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5604:	00c00044 	movi	r3,1
    5608:	e0bffa17 	ldw	r2,-24(fp)
    560c:	1884983a 	sll	r2,r3,r2
    5610:	0084303a 	nor	r2,zero,r2
    5614:	1007883a 	mov	r3,r2
    5618:	d0a00f17 	ldw	r2,-32708(gp)
    561c:	1884703a 	and	r2,r3,r2
    5620:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5624:	d0a00f17 	ldw	r2,-32708(gp)
    5628:	100170fa 	wrctl	ienable,r2
    562c:	e0bffc17 	ldw	r2,-16(fp)
    5630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5634:	e0bffd17 	ldw	r2,-12(fp)
    5638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    563c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5640:	0001883a 	nop
}
    5644:	e037883a 	mov	sp,fp
    5648:	df000017 	ldw	fp,0(sp)
    564c:	dec00104 	addi	sp,sp,4
    5650:	f800283a 	ret

00005654 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5654:	defffc04 	addi	sp,sp,-16
    5658:	df000315 	stw	fp,12(sp)
    565c:	df000304 	addi	fp,sp,12
    5660:	e13ffe15 	stw	r4,-8(fp)
    5664:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5668:	000530fa 	rdctl	r2,ienable
    566c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5670:	00c00044 	movi	r3,1
    5674:	e0bfff17 	ldw	r2,-4(fp)
    5678:	1884983a 	sll	r2,r3,r2
    567c:	1007883a 	mov	r3,r2
    5680:	e0bffd17 	ldw	r2,-12(fp)
    5684:	1884703a 	and	r2,r3,r2
    5688:	1004c03a 	cmpne	r2,r2,zero
    568c:	10803fcc 	andi	r2,r2,255
}
    5690:	e037883a 	mov	sp,fp
    5694:	df000017 	ldw	fp,0(sp)
    5698:	dec00104 	addi	sp,sp,4
    569c:	f800283a 	ret

000056a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    56a0:	defff504 	addi	sp,sp,-44
    56a4:	dfc00a15 	stw	ra,40(sp)
    56a8:	df000915 	stw	fp,36(sp)
    56ac:	df000904 	addi	fp,sp,36
    56b0:	e13ffc15 	stw	r4,-16(fp)
    56b4:	e17ffd15 	stw	r5,-12(fp)
    56b8:	e1bffe15 	stw	r6,-8(fp)
    56bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    56c0:	00bffa84 	movi	r2,-22
    56c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    56c8:	e0bffd17 	ldw	r2,-12(fp)
    56cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    56d0:	e0bff817 	ldw	r2,-32(fp)
    56d4:	10800808 	cmpgei	r2,r2,32
    56d8:	1000271e 	bne	r2,zero,5778 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    56dc:	0005303a 	rdctl	r2,status
    56e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56e4:	e0fffb17 	ldw	r3,-20(fp)
    56e8:	00bfff84 	movi	r2,-2
    56ec:	1884703a 	and	r2,r3,r2
    56f0:	1001703a 	wrctl	status,r2
  
  return context;
    56f4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    56f8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    56fc:	00800034 	movhi	r2,0
    5700:	109cc404 	addi	r2,r2,29456
    5704:	e0fff817 	ldw	r3,-32(fp)
    5708:	180690fa 	slli	r3,r3,3
    570c:	10c5883a 	add	r2,r2,r3
    5710:	e0fffe17 	ldw	r3,-8(fp)
    5714:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5718:	00800034 	movhi	r2,0
    571c:	109cc404 	addi	r2,r2,29456
    5720:	e0fff817 	ldw	r3,-32(fp)
    5724:	180690fa 	slli	r3,r3,3
    5728:	10c5883a 	add	r2,r2,r3
    572c:	10800104 	addi	r2,r2,4
    5730:	e0ffff17 	ldw	r3,-4(fp)
    5734:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5738:	e0bffe17 	ldw	r2,-8(fp)
    573c:	10000526 	beq	r2,zero,5754 <alt_iic_isr_register+0xb4>
    5740:	e0bff817 	ldw	r2,-32(fp)
    5744:	100b883a 	mov	r5,r2
    5748:	e13ffc17 	ldw	r4,-16(fp)
    574c:	00055400 	call	5540 <alt_ic_irq_enable>
    5750:	00000406 	br	5764 <alt_iic_isr_register+0xc4>
    5754:	e0bff817 	ldw	r2,-32(fp)
    5758:	100b883a 	mov	r5,r2
    575c:	e13ffc17 	ldw	r4,-16(fp)
    5760:	00055c80 	call	55c8 <alt_ic_irq_disable>
    5764:	e0bff715 	stw	r2,-36(fp)
    5768:	e0bffa17 	ldw	r2,-24(fp)
    576c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5770:	e0bff917 	ldw	r2,-28(fp)
    5774:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5778:	e0bff717 	ldw	r2,-36(fp)
}
    577c:	e037883a 	mov	sp,fp
    5780:	dfc00117 	ldw	ra,4(sp)
    5784:	df000017 	ldw	fp,0(sp)
    5788:	dec00204 	addi	sp,sp,8
    578c:	f800283a 	ret

00005790 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    5790:	defffc04 	addi	sp,sp,-16
    5794:	df000315 	stw	fp,12(sp)
    5798:	df000304 	addi	fp,sp,12
    579c:	e13ffd15 	stw	r4,-12(fp)
    57a0:	e17ffe15 	stw	r5,-8(fp)
    57a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    57a8:	e0fffe17 	ldw	r3,-8(fp)
    57ac:	e0bffd17 	ldw	r2,-12(fp)
    57b0:	18800c26 	beq	r3,r2,57e4 <alt_load_section+0x54>
  {
    while( to != end )
    57b4:	00000806 	br	57d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    57b8:	e0bffe17 	ldw	r2,-8(fp)
    57bc:	10c00104 	addi	r3,r2,4
    57c0:	e0fffe15 	stw	r3,-8(fp)
    57c4:	e0fffd17 	ldw	r3,-12(fp)
    57c8:	19000104 	addi	r4,r3,4
    57cc:	e13ffd15 	stw	r4,-12(fp)
    57d0:	18c00017 	ldw	r3,0(r3)
    57d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    57d8:	e0fffe17 	ldw	r3,-8(fp)
    57dc:	e0bfff17 	ldw	r2,-4(fp)
    57e0:	18bff51e 	bne	r3,r2,57b8 <__alt_mem_epcs_flash+0xffff47b8>
    {
      *to++ = *from++;
    }
  }
}
    57e4:	0001883a 	nop
    57e8:	e037883a 	mov	sp,fp
    57ec:	df000017 	ldw	fp,0(sp)
    57f0:	dec00104 	addi	sp,sp,4
    57f4:	f800283a 	ret

000057f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    57f8:	defffe04 	addi	sp,sp,-8
    57fc:	dfc00115 	stw	ra,4(sp)
    5800:	df000015 	stw	fp,0(sp)
    5804:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5808:	01800034 	movhi	r6,0
    580c:	319c5304 	addi	r6,r6,29004
    5810:	01400034 	movhi	r5,0
    5814:	295baf04 	addi	r5,r5,28348
    5818:	01000034 	movhi	r4,0
    581c:	211baf04 	addi	r4,r4,28348
    5820:	00057900 	call	5790 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5824:	01800034 	movhi	r6,0
    5828:	31909104 	addi	r6,r6,16964
    582c:	01400034 	movhi	r5,0
    5830:	29500804 	addi	r5,r5,16416
    5834:	01000034 	movhi	r4,0
    5838:	21100804 	addi	r4,r4,16416
    583c:	00057900 	call	5790 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5840:	01800034 	movhi	r6,0
    5844:	319baf04 	addi	r6,r6,28348
    5848:	01400034 	movhi	r5,0
    584c:	295ba304 	addi	r5,r5,28300
    5850:	01000034 	movhi	r4,0
    5854:	211ba304 	addi	r4,r4,28300
    5858:	00057900 	call	5790 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    585c:	000634c0 	call	634c <alt_dcache_flush_all>
  alt_icache_flush_all();
    5860:	00064d40 	call	64d4 <alt_icache_flush_all>
}
    5864:	0001883a 	nop
    5868:	e037883a 	mov	sp,fp
    586c:	dfc00117 	ldw	ra,4(sp)
    5870:	df000017 	ldw	fp,0(sp)
    5874:	dec00204 	addi	sp,sp,8
    5878:	f800283a 	ret

0000587c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    587c:	defffd04 	addi	sp,sp,-12
    5880:	dfc00215 	stw	ra,8(sp)
    5884:	df000115 	stw	fp,4(sp)
    5888:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    588c:	0009883a 	mov	r4,zero
    5890:	000594c0 	call	594c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    5894:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5898:	00059840 	call	5984 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    589c:	01800034 	movhi	r6,0
    58a0:	319ba304 	addi	r6,r6,28300
    58a4:	01400034 	movhi	r5,0
    58a8:	295ba304 	addi	r5,r5,28300
    58ac:	01000034 	movhi	r4,0
    58b0:	211ba304 	addi	r4,r4,28300
    58b4:	00066680 	call	6668 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    58b8:	d0a01017 	ldw	r2,-32704(gp)
    58bc:	d0e01117 	ldw	r3,-32700(gp)
    58c0:	d1201217 	ldw	r4,-32696(gp)
    58c4:	200d883a 	mov	r6,r4
    58c8:	180b883a 	mov	r5,r3
    58cc:	1009883a 	mov	r4,r2
    58d0:	00042c40 	call	42c4 <main>
    58d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    58d8:	01000044 	movi	r4,1
    58dc:	000627c0 	call	627c <close>
  exit (result);
    58e0:	e13fff17 	ldw	r4,-4(fp)
    58e4:	00064a00 	call	64a0 <_exit>

000058e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    58e8:	defffd04 	addi	sp,sp,-12
    58ec:	dfc00215 	stw	ra,8(sp)
    58f0:	df000115 	stw	fp,4(sp)
    58f4:	df000104 	addi	fp,sp,4
    58f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    58fc:	e13fff17 	ldw	r4,-4(fp)
    5900:	00060e80 	call	60e8 <alt_busy_sleep>
}
    5904:	e037883a 	mov	sp,fp
    5908:	dfc00117 	ldw	ra,4(sp)
    590c:	df000017 	ldw	fp,0(sp)
    5910:	dec00204 	addi	sp,sp,8
    5914:	f800283a 	ret

00005918 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    5918:	defffd04 	addi	sp,sp,-12
    591c:	dfc00215 	stw	ra,8(sp)
    5920:	df000115 	stw	fp,4(sp)
    5924:	df000104 	addi	fp,sp,4
    5928:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    592c:	d1600404 	addi	r5,gp,-32752
    5930:	e13fff17 	ldw	r4,-4(fp)
    5934:	00063fc0 	call	63fc <alt_dev_llist_insert>
}
    5938:	e037883a 	mov	sp,fp
    593c:	dfc00117 	ldw	ra,4(sp)
    5940:	df000017 	ldw	fp,0(sp)
    5944:	dec00204 	addi	sp,sp,8
    5948:	f800283a 	ret

0000594c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    594c:	defffd04 	addi	sp,sp,-12
    5950:	dfc00215 	stw	ra,8(sp)
    5954:	df000115 	stw	fp,4(sp)
    5958:	df000104 	addi	fp,sp,4
    595c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
    5960:	000699c0 	call	699c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5964:	00800044 	movi	r2,1
    5968:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    596c:	0001883a 	nop
    5970:	e037883a 	mov	sp,fp
    5974:	dfc00117 	ldw	ra,4(sp)
    5978:	df000017 	ldw	fp,0(sp)
    597c:	dec00204 	addi	sp,sp,8
    5980:	f800283a 	ret

00005984 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5984:	defffe04 	addi	sp,sp,-8
    5988:	dfc00115 	stw	ra,4(sp)
    598c:	df000015 	stw	fp,0(sp)
    5990:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
    5994:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
    5998:	01000034 	movhi	r4,0
    599c:	211bcb04 	addi	r4,r4,28460
    59a0:	00059180 	call	5918 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    59a4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    59a8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
    59ac:	01000034 	movhi	r4,0
    59b0:	211bd604 	addi	r4,r4,28504
    59b4:	00059180 	call	5918 <alt_dev_reg>
}
    59b8:	0001883a 	nop
    59bc:	e037883a 	mov	sp,fp
    59c0:	dfc00117 	ldw	ra,4(sp)
    59c4:	df000017 	ldw	fp,0(sp)
    59c8:	dec00204 	addi	sp,sp,8
    59cc:	f800283a 	ret

000059d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    59d0:	defffa04 	addi	sp,sp,-24
    59d4:	dfc00515 	stw	ra,20(sp)
    59d8:	df000415 	stw	fp,16(sp)
    59dc:	df000404 	addi	fp,sp,16
    59e0:	e13ffd15 	stw	r4,-12(fp)
    59e4:	e17ffe15 	stw	r5,-8(fp)
    59e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    59ec:	e0bffd17 	ldw	r2,-12(fp)
    59f0:	10800017 	ldw	r2,0(r2)
    59f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    59f8:	e0bffc17 	ldw	r2,-16(fp)
    59fc:	10c00a04 	addi	r3,r2,40
    5a00:	e0bffd17 	ldw	r2,-12(fp)
    5a04:	10800217 	ldw	r2,8(r2)
    5a08:	100f883a 	mov	r7,r2
    5a0c:	e1bfff17 	ldw	r6,-4(fp)
    5a10:	e17ffe17 	ldw	r5,-8(fp)
    5a14:	1809883a 	mov	r4,r3
    5a18:	0005a900 	call	5a90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5a1c:	e037883a 	mov	sp,fp
    5a20:	dfc00117 	ldw	ra,4(sp)
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00204 	addi	sp,sp,8
    5a2c:	f800283a 	ret

00005a30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5a30:	defffa04 	addi	sp,sp,-24
    5a34:	dfc00515 	stw	ra,20(sp)
    5a38:	df000415 	stw	fp,16(sp)
    5a3c:	df000404 	addi	fp,sp,16
    5a40:	e13ffd15 	stw	r4,-12(fp)
    5a44:	e17ffe15 	stw	r5,-8(fp)
    5a48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5a4c:	e0bffd17 	ldw	r2,-12(fp)
    5a50:	10800017 	ldw	r2,0(r2)
    5a54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5a58:	e0bffc17 	ldw	r2,-16(fp)
    5a5c:	10c00a04 	addi	r3,r2,40
    5a60:	e0bffd17 	ldw	r2,-12(fp)
    5a64:	10800217 	ldw	r2,8(r2)
    5a68:	100f883a 	mov	r7,r2
    5a6c:	e1bfff17 	ldw	r6,-4(fp)
    5a70:	e17ffe17 	ldw	r5,-8(fp)
    5a74:	1809883a 	mov	r4,r3
    5a78:	0005b7c0 	call	5b7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5a7c:	e037883a 	mov	sp,fp
    5a80:	dfc00117 	ldw	ra,4(sp)
    5a84:	df000017 	ldw	fp,0(sp)
    5a88:	dec00204 	addi	sp,sp,8
    5a8c:	f800283a 	ret

00005a90 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    5a90:	defff704 	addi	sp,sp,-36
    5a94:	df000815 	stw	fp,32(sp)
    5a98:	df000804 	addi	fp,sp,32
    5a9c:	e13ffc15 	stw	r4,-16(fp)
    5aa0:	e17ffd15 	stw	r5,-12(fp)
    5aa4:	e1bffe15 	stw	r6,-8(fp)
    5aa8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5aac:	e0bffc17 	ldw	r2,-16(fp)
    5ab0:	10800017 	ldw	r2,0(r2)
    5ab4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    5ab8:	e0bffd17 	ldw	r2,-12(fp)
    5abc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    5ac0:	e0bffe17 	ldw	r2,-8(fp)
    5ac4:	e0fffd17 	ldw	r3,-12(fp)
    5ac8:	1885883a 	add	r2,r3,r2
    5acc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    5ad0:	00001206 	br	5b1c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5ad4:	e0bff917 	ldw	r2,-28(fp)
    5ad8:	10800037 	ldwio	r2,0(r2)
    5adc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5ae0:	e0bffb17 	ldw	r2,-20(fp)
    5ae4:	10a0000c 	andi	r2,r2,32768
    5ae8:	10000626 	beq	r2,zero,5b04 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5aec:	e0bff817 	ldw	r2,-32(fp)
    5af0:	10c00044 	addi	r3,r2,1
    5af4:	e0fff815 	stw	r3,-32(fp)
    5af8:	e0fffb17 	ldw	r3,-20(fp)
    5afc:	10c00005 	stb	r3,0(r2)
    5b00:	00000606 	br	5b1c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    5b04:	e0fff817 	ldw	r3,-32(fp)
    5b08:	e0bffd17 	ldw	r2,-12(fp)
    5b0c:	1880071e 	bne	r3,r2,5b2c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    5b10:	e0bfff17 	ldw	r2,-4(fp)
    5b14:	1090000c 	andi	r2,r2,16384
    5b18:	1000061e 	bne	r2,zero,5b34 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5b1c:	e0fff817 	ldw	r3,-32(fp)
    5b20:	e0bffa17 	ldw	r2,-24(fp)
    5b24:	18bfeb36 	bltu	r3,r2,5ad4 <__alt_mem_epcs_flash+0xffff4ad4>
    5b28:	00000306 	br	5b38 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5b2c:	0001883a 	nop
    5b30:	00000106 	br	5b38 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    5b34:	0001883a 	nop
    
  }

  if (ptr != buffer)
    5b38:	e0fff817 	ldw	r3,-32(fp)
    5b3c:	e0bffd17 	ldw	r2,-12(fp)
    5b40:	18800426 	beq	r3,r2,5b54 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    5b44:	e0fff817 	ldw	r3,-32(fp)
    5b48:	e0bffd17 	ldw	r2,-12(fp)
    5b4c:	1885c83a 	sub	r2,r3,r2
    5b50:	00000606 	br	5b6c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    5b54:	e0bfff17 	ldw	r2,-4(fp)
    5b58:	1090000c 	andi	r2,r2,16384
    5b5c:	10000226 	beq	r2,zero,5b68 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    5b60:	00bffd44 	movi	r2,-11
    5b64:	00000106 	br	5b6c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    5b68:	00bffec4 	movi	r2,-5
}
    5b6c:	e037883a 	mov	sp,fp
    5b70:	df000017 	ldw	fp,0(sp)
    5b74:	dec00104 	addi	sp,sp,4
    5b78:	f800283a 	ret

00005b7c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5b7c:	defff904 	addi	sp,sp,-28
    5b80:	df000615 	stw	fp,24(sp)
    5b84:	df000604 	addi	fp,sp,24
    5b88:	e13ffc15 	stw	r4,-16(fp)
    5b8c:	e17ffd15 	stw	r5,-12(fp)
    5b90:	e1bffe15 	stw	r6,-8(fp)
    5b94:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5b98:	e0bffc17 	ldw	r2,-16(fp)
    5b9c:	10800017 	ldw	r2,0(r2)
    5ba0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    5ba4:	e0bffe17 	ldw	r2,-8(fp)
    5ba8:	e0fffd17 	ldw	r3,-12(fp)
    5bac:	1885883a 	add	r2,r3,r2
    5bb0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    5bb4:	00000e06 	br	5bf0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5bb8:	e0bffa17 	ldw	r2,-24(fp)
    5bbc:	10800104 	addi	r2,r2,4
    5bc0:	10800037 	ldwio	r2,0(r2)
    5bc4:	10bfffec 	andhi	r2,r2,65535
    5bc8:	10000926 	beq	r2,zero,5bf0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5bcc:	e0fffa17 	ldw	r3,-24(fp)
    5bd0:	e0bffd17 	ldw	r2,-12(fp)
    5bd4:	11000044 	addi	r4,r2,1
    5bd8:	e13ffd15 	stw	r4,-12(fp)
    5bdc:	10800003 	ldbu	r2,0(r2)
    5be0:	10803fcc 	andi	r2,r2,255
    5be4:	1080201c 	xori	r2,r2,128
    5be8:	10bfe004 	addi	r2,r2,-128
    5bec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5bf0:	e0fffd17 	ldw	r3,-12(fp)
    5bf4:	e0bffb17 	ldw	r2,-20(fp)
    5bf8:	18bfef36 	bltu	r3,r2,5bb8 <__alt_mem_epcs_flash+0xffff4bb8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5bfc:	e0bffe17 	ldw	r2,-8(fp)
}
    5c00:	e037883a 	mov	sp,fp
    5c04:	df000017 	ldw	fp,0(sp)
    5c08:	dec00104 	addi	sp,sp,4
    5c0c:	f800283a 	ret

00005c10 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5c10:	defff404 	addi	sp,sp,-48
    5c14:	df000b15 	stw	fp,44(sp)
    5c18:	df000b04 	addi	fp,sp,44
    5c1c:	e13ffc15 	stw	r4,-16(fp)
    5c20:	e17ffd15 	stw	r5,-12(fp)
    5c24:	e1bffe15 	stw	r6,-8(fp)
    5c28:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    5c2c:	e0ffff17 	ldw	r3,-4(fp)
    5c30:	e0bffe17 	ldw	r2,-8(fp)
    5c34:	1885883a 	add	r2,r3,r2
    5c38:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    5c3c:	e0c00217 	ldw	r3,8(fp)
    5c40:	e0800117 	ldw	r2,4(fp)
    5c44:	1885883a 	add	r2,r3,r2
    5c48:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    5c4c:	e0800117 	ldw	r2,4(fp)
    5c50:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    5c54:	e0bffe17 	ldw	r2,-8(fp)
    5c58:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    5c5c:	00800044 	movi	r2,1
    5c60:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5c64:	e0bffc17 	ldw	r2,-16(fp)
    5c68:	10800504 	addi	r2,r2,20
    5c6c:	1009883a 	mov	r4,r2
    5c70:	00c00044 	movi	r3,1
    5c74:	e0bffd17 	ldw	r2,-12(fp)
    5c78:	1884983a 	sll	r2,r3,r2
    5c7c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5c80:	e0800317 	ldw	r2,12(fp)
    5c84:	1080008c 	andi	r2,r2,2
    5c88:	1000051e 	bne	r2,zero,5ca0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    5c8c:	e0bffc17 	ldw	r2,-16(fp)
    5c90:	10800304 	addi	r2,r2,12
    5c94:	1007883a 	mov	r3,r2
    5c98:	00810004 	movi	r2,1024
    5c9c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5ca0:	e0bffc17 	ldw	r2,-16(fp)
    5ca4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5ca8:	e0bffc17 	ldw	r2,-16(fp)
    5cac:	10800204 	addi	r2,r2,8
    5cb0:	10800037 	ldwio	r2,0(r2)
    5cb4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5cb8:	e0bffa17 	ldw	r2,-24(fp)
    5cbc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5cc0:	10000226 	beq	r2,zero,5ccc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5cc4:	e0bff717 	ldw	r2,-36(fp)
    5cc8:	1000031e 	bne	r2,zero,5cd8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5ccc:	e0bffa17 	ldw	r2,-24(fp)
    5cd0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5cd4:	103ff426 	beq	r2,zero,5ca8 <__alt_mem_epcs_flash+0xffff4ca8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    5cd8:	e0bffa17 	ldw	r2,-24(fp)
    5cdc:	1080100c 	andi	r2,r2,64
    5ce0:	10001e26 	beq	r2,zero,5d5c <alt_avalon_spi_command+0x14c>
    5ce4:	e0bff717 	ldw	r2,-36(fp)
    5ce8:	00801c0e 	bge	zero,r2,5d5c <alt_avalon_spi_command+0x14c>
    {
      credits--;
    5cec:	e0bff717 	ldw	r2,-36(fp)
    5cf0:	10bfffc4 	addi	r2,r2,-1
    5cf4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    5cf8:	e0ffff17 	ldw	r3,-4(fp)
    5cfc:	e0bff817 	ldw	r2,-32(fp)
    5d00:	18800a2e 	bgeu	r3,r2,5d2c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    5d04:	e0bffc17 	ldw	r2,-16(fp)
    5d08:	10800104 	addi	r2,r2,4
    5d0c:	1009883a 	mov	r4,r2
    5d10:	e0bfff17 	ldw	r2,-4(fp)
    5d14:	10c00044 	addi	r3,r2,1
    5d18:	e0ffff15 	stw	r3,-4(fp)
    5d1c:	10800003 	ldbu	r2,0(r2)
    5d20:	10803fcc 	andi	r2,r2,255
    5d24:	20800035 	stwio	r2,0(r4)
    5d28:	00000c06 	br	5d5c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    5d2c:	e0bff517 	ldw	r2,-44(fp)
    5d30:	10000826 	beq	r2,zero,5d54 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    5d34:	e0bff517 	ldw	r2,-44(fp)
    5d38:	10bfffc4 	addi	r2,r2,-1
    5d3c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    5d40:	e0bffc17 	ldw	r2,-16(fp)
    5d44:	10800104 	addi	r2,r2,4
    5d48:	0007883a 	mov	r3,zero
    5d4c:	10c00035 	stwio	r3,0(r2)
    5d50:	00000206 	br	5d5c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    5d54:	00bf0004 	movi	r2,-1024
    5d58:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    5d5c:	e0bffa17 	ldw	r2,-24(fp)
    5d60:	1080200c 	andi	r2,r2,128
    5d64:	103fd026 	beq	r2,zero,5ca8 <__alt_mem_epcs_flash+0xffff4ca8>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5d68:	e0bffc17 	ldw	r2,-16(fp)
    5d6c:	10800037 	ldwio	r2,0(r2)
    5d70:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    5d74:	e0bff617 	ldw	r2,-40(fp)
    5d78:	10000426 	beq	r2,zero,5d8c <alt_avalon_spi_command+0x17c>
        read_ignore--;
    5d7c:	e0bff617 	ldw	r2,-40(fp)
    5d80:	10bfffc4 	addi	r2,r2,-1
    5d84:	e0bff615 	stw	r2,-40(fp)
    5d88:	00000506 	br	5da0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    5d8c:	e0800217 	ldw	r2,8(fp)
    5d90:	10c00044 	addi	r3,r2,1
    5d94:	e0c00215 	stw	r3,8(fp)
    5d98:	e0fffb17 	ldw	r3,-20(fp)
    5d9c:	10c00005 	stb	r3,0(r2)
      credits++;
    5da0:	e0bff717 	ldw	r2,-36(fp)
    5da4:	10800044 	addi	r2,r2,1
    5da8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    5dac:	e0bff617 	ldw	r2,-40(fp)
    5db0:	103fbd1e 	bne	r2,zero,5ca8 <__alt_mem_epcs_flash+0xffff4ca8>
    5db4:	e0c00217 	ldw	r3,8(fp)
    5db8:	e0bff917 	ldw	r2,-28(fp)
    5dbc:	18bfba1e 	bne	r3,r2,5ca8 <__alt_mem_epcs_flash+0xffff4ca8>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5dc0:	e0bffc17 	ldw	r2,-16(fp)
    5dc4:	10800204 	addi	r2,r2,8
    5dc8:	10800037 	ldwio	r2,0(r2)
    5dcc:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    5dd0:	e0bffa17 	ldw	r2,-24(fp)
    5dd4:	1080080c 	andi	r2,r2,32
    5dd8:	103ff926 	beq	r2,zero,5dc0 <__alt_mem_epcs_flash+0xffff4dc0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    5ddc:	e0800317 	ldw	r2,12(fp)
    5de0:	1080004c 	andi	r2,r2,1
    5de4:	1000041e 	bne	r2,zero,5df8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    5de8:	e0bffc17 	ldw	r2,-16(fp)
    5dec:	10800304 	addi	r2,r2,12
    5df0:	0007883a 	mov	r3,zero
    5df4:	10c00035 	stwio	r3,0(r2)

  return read_length;
    5df8:	e0800117 	ldw	r2,4(fp)
}
    5dfc:	e037883a 	mov	sp,fp
    5e00:	df000017 	ldw	fp,0(sp)
    5e04:	dec00104 	addi	sp,sp,4
    5e08:	f800283a 	ret

00005e0c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5e0c:	defffa04 	addi	sp,sp,-24
    5e10:	dfc00515 	stw	ra,20(sp)
    5e14:	df000415 	stw	fp,16(sp)
    5e18:	df000404 	addi	fp,sp,16
    5e1c:	e13ffd15 	stw	r4,-12(fp)
    5e20:	e17ffe15 	stw	r5,-8(fp)
    5e24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    5e28:	e0bffd17 	ldw	r2,-12(fp)
    5e2c:	10800017 	ldw	r2,0(r2)
    5e30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    5e34:	e0bffc17 	ldw	r2,-16(fp)
    5e38:	10c00a04 	addi	r3,r2,40
    5e3c:	e0bffd17 	ldw	r2,-12(fp)
    5e40:	10800217 	ldw	r2,8(r2)
    5e44:	100f883a 	mov	r7,r2
    5e48:	e1bfff17 	ldw	r6,-4(fp)
    5e4c:	e17ffe17 	ldw	r5,-8(fp)
    5e50:	1809883a 	mov	r4,r3
    5e54:	0005f080 	call	5f08 <altera_avalon_uart_read>
      fd->fd_flags);
}
    5e58:	e037883a 	mov	sp,fp
    5e5c:	dfc00117 	ldw	ra,4(sp)
    5e60:	df000017 	ldw	fp,0(sp)
    5e64:	dec00204 	addi	sp,sp,8
    5e68:	f800283a 	ret

00005e6c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5e6c:	defffa04 	addi	sp,sp,-24
    5e70:	dfc00515 	stw	ra,20(sp)
    5e74:	df000415 	stw	fp,16(sp)
    5e78:	df000404 	addi	fp,sp,16
    5e7c:	e13ffd15 	stw	r4,-12(fp)
    5e80:	e17ffe15 	stw	r5,-8(fp)
    5e84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    5e88:	e0bffd17 	ldw	r2,-12(fp)
    5e8c:	10800017 	ldw	r2,0(r2)
    5e90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    5e94:	e0bffc17 	ldw	r2,-16(fp)
    5e98:	10c00a04 	addi	r3,r2,40
    5e9c:	e0bffd17 	ldw	r2,-12(fp)
    5ea0:	10800217 	ldw	r2,8(r2)
    5ea4:	100f883a 	mov	r7,r2
    5ea8:	e1bfff17 	ldw	r6,-4(fp)
    5eac:	e17ffe17 	ldw	r5,-8(fp)
    5eb0:	1809883a 	mov	r4,r3
    5eb4:	00060080 	call	6008 <altera_avalon_uart_write>
      fd->fd_flags);
}
    5eb8:	e037883a 	mov	sp,fp
    5ebc:	dfc00117 	ldw	ra,4(sp)
    5ec0:	df000017 	ldw	fp,0(sp)
    5ec4:	dec00204 	addi	sp,sp,8
    5ec8:	f800283a 	ret

00005ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5ecc:	defffe04 	addi	sp,sp,-8
    5ed0:	dfc00115 	stw	ra,4(sp)
    5ed4:	df000015 	stw	fp,0(sp)
    5ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5edc:	d0a00717 	ldw	r2,-32740(gp)
    5ee0:	10000326 	beq	r2,zero,5ef0 <alt_get_errno+0x24>
    5ee4:	d0a00717 	ldw	r2,-32740(gp)
    5ee8:	103ee83a 	callr	r2
    5eec:	00000106 	br	5ef4 <alt_get_errno+0x28>
    5ef0:	d0a01404 	addi	r2,gp,-32688
}
    5ef4:	e037883a 	mov	sp,fp
    5ef8:	dfc00117 	ldw	ra,4(sp)
    5efc:	df000017 	ldw	fp,0(sp)
    5f00:	dec00204 	addi	sp,sp,8
    5f04:	f800283a 	ret

00005f08 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    5f08:	defff804 	addi	sp,sp,-32
    5f0c:	dfc00715 	stw	ra,28(sp)
    5f10:	df000615 	stw	fp,24(sp)
    5f14:	df000604 	addi	fp,sp,24
    5f18:	e13ffc15 	stw	r4,-16(fp)
    5f1c:	e17ffd15 	stw	r5,-12(fp)
    5f20:	e1bffe15 	stw	r6,-8(fp)
    5f24:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    5f28:	e0bfff17 	ldw	r2,-4(fp)
    5f2c:	1090000c 	andi	r2,r2,16384
    5f30:	1005003a 	cmpeq	r2,r2,zero
    5f34:	10803fcc 	andi	r2,r2,255
    5f38:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    5f3c:	e0bffc17 	ldw	r2,-16(fp)
    5f40:	10800017 	ldw	r2,0(r2)
    5f44:	10800204 	addi	r2,r2,8
    5f48:	10800037 	ldwio	r2,0(r2)
    5f4c:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    5f50:	e0bffc17 	ldw	r2,-16(fp)
    5f54:	10800017 	ldw	r2,0(r2)
    5f58:	10800204 	addi	r2,r2,8
    5f5c:	0007883a 	mov	r3,zero
    5f60:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    5f64:	e0bffb17 	ldw	r2,-20(fp)
    5f68:	1080200c 	andi	r2,r2,128
    5f6c:	10000b26 	beq	r2,zero,5f9c <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    5f70:	e0bffc17 	ldw	r2,-16(fp)
    5f74:	10800017 	ldw	r2,0(r2)
    5f78:	10800037 	ldwio	r2,0(r2)
    5f7c:	1007883a 	mov	r3,r2
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    5f88:	e0bffb17 	ldw	r2,-20(fp)
    5f8c:	108000cc 	andi	r2,r2,3
    5f90:	1000021e 	bne	r2,zero,5f9c <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    5f94:	00800044 	movi	r2,1
    5f98:	00000706 	br	5fb8 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
    5f9c:	e0bffa17 	ldw	r2,-24(fp)
    5fa0:	103fe61e 	bne	r2,zero,5f3c <__alt_mem_epcs_flash+0xffff4f3c>

  ALT_ERRNO = EWOULDBLOCK;
    5fa4:	0005ecc0 	call	5ecc <alt_get_errno>
    5fa8:	1007883a 	mov	r3,r2
    5fac:	008002c4 	movi	r2,11
    5fb0:	18800015 	stw	r2,0(r3)
 
  return 0;
    5fb4:	0005883a 	mov	r2,zero
}
    5fb8:	e037883a 	mov	sp,fp
    5fbc:	dfc00117 	ldw	ra,4(sp)
    5fc0:	df000017 	ldw	fp,0(sp)
    5fc4:	dec00204 	addi	sp,sp,8
    5fc8:	f800283a 	ret

00005fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5fcc:	defffe04 	addi	sp,sp,-8
    5fd0:	dfc00115 	stw	ra,4(sp)
    5fd4:	df000015 	stw	fp,0(sp)
    5fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5fdc:	d0a00717 	ldw	r2,-32740(gp)
    5fe0:	10000326 	beq	r2,zero,5ff0 <alt_get_errno+0x24>
    5fe4:	d0a00717 	ldw	r2,-32740(gp)
    5fe8:	103ee83a 	callr	r2
    5fec:	00000106 	br	5ff4 <alt_get_errno+0x28>
    5ff0:	d0a01404 	addi	r2,gp,-32688
}
    5ff4:	e037883a 	mov	sp,fp
    5ff8:	dfc00117 	ldw	ra,4(sp)
    5ffc:	df000017 	ldw	fp,0(sp)
    6000:	dec00204 	addi	sp,sp,8
    6004:	f800283a 	ret

00006008 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    6008:	defff704 	addi	sp,sp,-36
    600c:	dfc00815 	stw	ra,32(sp)
    6010:	df000715 	stw	fp,28(sp)
    6014:	df000704 	addi	fp,sp,28
    6018:	e13ffc15 	stw	r4,-16(fp)
    601c:	e17ffd15 	stw	r5,-12(fp)
    6020:	e1bffe15 	stw	r6,-8(fp)
    6024:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    6028:	e0bfff17 	ldw	r2,-4(fp)
    602c:	1090000c 	andi	r2,r2,16384
    6030:	1005003a 	cmpeq	r2,r2,zero
    6034:	10803fcc 	andi	r2,r2,255
    6038:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    603c:	e0bffe17 	ldw	r2,-8(fp)
    6040:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    6044:	e0bffc17 	ldw	r2,-16(fp)
    6048:	10800017 	ldw	r2,0(r2)
    604c:	10800204 	addi	r2,r2,8
    6050:	10800037 	ldwio	r2,0(r2)
    6054:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    6058:	e0bffb17 	ldw	r2,-20(fp)
    605c:	1080100c 	andi	r2,r2,64
    6060:	10000f26 	beq	r2,zero,60a0 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    6064:	e0bffc17 	ldw	r2,-16(fp)
    6068:	10800017 	ldw	r2,0(r2)
    606c:	10800104 	addi	r2,r2,4
    6070:	1009883a 	mov	r4,r2
    6074:	e0bffd17 	ldw	r2,-12(fp)
    6078:	10c00044 	addi	r3,r2,1
    607c:	e0fffd15 	stw	r3,-12(fp)
    6080:	10800003 	ldbu	r2,0(r2)
    6084:	10803fcc 	andi	r2,r2,255
    6088:	1080201c 	xori	r2,r2,128
    608c:	10bfe004 	addi	r2,r2,-128
    6090:	20800035 	stwio	r2,0(r4)
      count--;
    6094:	e0bff917 	ldw	r2,-28(fp)
    6098:	10bfffc4 	addi	r2,r2,-1
    609c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    60a0:	e0bffa17 	ldw	r2,-24(fp)
    60a4:	10000226 	beq	r2,zero,60b0 <altera_avalon_uart_write+0xa8>
    60a8:	e0bff917 	ldw	r2,-28(fp)
    60ac:	103fe51e 	bne	r2,zero,6044 <__alt_mem_epcs_flash+0xffff5044>

  if (count)
    60b0:	e0bff917 	ldw	r2,-28(fp)
    60b4:	10000426 	beq	r2,zero,60c8 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
    60b8:	0005fcc0 	call	5fcc <alt_get_errno>
    60bc:	1007883a 	mov	r3,r2
    60c0:	008002c4 	movi	r2,11
    60c4:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
    60c8:	e0fffe17 	ldw	r3,-8(fp)
    60cc:	e0bff917 	ldw	r2,-28(fp)
    60d0:	1885c83a 	sub	r2,r3,r2
}
    60d4:	e037883a 	mov	sp,fp
    60d8:	dfc00117 	ldw	ra,4(sp)
    60dc:	df000017 	ldw	fp,0(sp)
    60e0:	dec00204 	addi	sp,sp,8
    60e4:	f800283a 	ret

000060e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    60e8:	defffa04 	addi	sp,sp,-24
    60ec:	dfc00515 	stw	ra,20(sp)
    60f0:	df000415 	stw	fp,16(sp)
    60f4:	df000404 	addi	fp,sp,16
    60f8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    60fc:	008000c4 	movi	r2,3
    6100:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    6104:	e0fffd17 	ldw	r3,-12(fp)
    6108:	008003f4 	movhi	r2,15
    610c:	10909004 	addi	r2,r2,16960
    6110:	1885383a 	mul	r2,r3,r2
    6114:	100b883a 	mov	r5,r2
    6118:	01017db4 	movhi	r4,1526
    611c:	21384004 	addi	r4,r4,-7936
    6120:	0006dd00 	call	6dd0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6124:	100b883a 	mov	r5,r2
    6128:	01200034 	movhi	r4,32768
    612c:	213fffc4 	addi	r4,r4,-1
    6130:	0006dd00 	call	6dd0 <__udivsi3>
    6134:	100b883a 	mov	r5,r2
    6138:	e13fff17 	ldw	r4,-4(fp)
    613c:	0006dd00 	call	6dd0 <__udivsi3>
    6140:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6144:	e0bffe17 	ldw	r2,-8(fp)
    6148:	10002a26 	beq	r2,zero,61f4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    614c:	e03ffc15 	stw	zero,-16(fp)
    6150:	00001706 	br	61b0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6154:	00a00034 	movhi	r2,32768
    6158:	10bfffc4 	addi	r2,r2,-1
    615c:	10bfffc4 	addi	r2,r2,-1
    6160:	103ffe1e 	bne	r2,zero,615c <__alt_mem_epcs_flash+0xffff515c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    6164:	e0fffd17 	ldw	r3,-12(fp)
    6168:	008003f4 	movhi	r2,15
    616c:	10909004 	addi	r2,r2,16960
    6170:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    6174:	100b883a 	mov	r5,r2
    6178:	01017db4 	movhi	r4,1526
    617c:	21384004 	addi	r4,r4,-7936
    6180:	0006dd00 	call	6dd0 <__udivsi3>
    6184:	100b883a 	mov	r5,r2
    6188:	01200034 	movhi	r4,32768
    618c:	213fffc4 	addi	r4,r4,-1
    6190:	0006dd00 	call	6dd0 <__udivsi3>
    6194:	1007883a 	mov	r3,r2
    6198:	e0bfff17 	ldw	r2,-4(fp)
    619c:	10c5c83a 	sub	r2,r2,r3
    61a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    61a4:	e0bffc17 	ldw	r2,-16(fp)
    61a8:	10800044 	addi	r2,r2,1
    61ac:	e0bffc15 	stw	r2,-16(fp)
    61b0:	e0fffc17 	ldw	r3,-16(fp)
    61b4:	e0bffe17 	ldw	r2,-8(fp)
    61b8:	18bfe616 	blt	r3,r2,6154 <__alt_mem_epcs_flash+0xffff5154>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    61bc:	e0fffd17 	ldw	r3,-12(fp)
    61c0:	008003f4 	movhi	r2,15
    61c4:	10909004 	addi	r2,r2,16960
    61c8:	1885383a 	mul	r2,r3,r2
    61cc:	100b883a 	mov	r5,r2
    61d0:	01017db4 	movhi	r4,1526
    61d4:	21384004 	addi	r4,r4,-7936
    61d8:	0006dd00 	call	6dd0 <__udivsi3>
    61dc:	1007883a 	mov	r3,r2
    61e0:	e0bfff17 	ldw	r2,-4(fp)
    61e4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    61e8:	10bfffc4 	addi	r2,r2,-1
    61ec:	103ffe1e 	bne	r2,zero,61e8 <__alt_mem_epcs_flash+0xffff51e8>
    61f0:	00000d06 	br	6228 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    61f4:	e0fffd17 	ldw	r3,-12(fp)
    61f8:	008003f4 	movhi	r2,15
    61fc:	10909004 	addi	r2,r2,16960
    6200:	1885383a 	mul	r2,r3,r2
    6204:	100b883a 	mov	r5,r2
    6208:	01017db4 	movhi	r4,1526
    620c:	21384004 	addi	r4,r4,-7936
    6210:	0006dd00 	call	6dd0 <__udivsi3>
    6214:	1007883a 	mov	r3,r2
    6218:	e0bfff17 	ldw	r2,-4(fp)
    621c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    6220:	10bfffc4 	addi	r2,r2,-1
    6224:	00bffe16 	blt	zero,r2,6220 <__alt_mem_epcs_flash+0xffff5220>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    6228:	0005883a 	mov	r2,zero
}
    622c:	e037883a 	mov	sp,fp
    6230:	dfc00117 	ldw	ra,4(sp)
    6234:	df000017 	ldw	fp,0(sp)
    6238:	dec00204 	addi	sp,sp,8
    623c:	f800283a 	ret

00006240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6240:	defffe04 	addi	sp,sp,-8
    6244:	dfc00115 	stw	ra,4(sp)
    6248:	df000015 	stw	fp,0(sp)
    624c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6250:	d0a00717 	ldw	r2,-32740(gp)
    6254:	10000326 	beq	r2,zero,6264 <alt_get_errno+0x24>
    6258:	d0a00717 	ldw	r2,-32740(gp)
    625c:	103ee83a 	callr	r2
    6260:	00000106 	br	6268 <alt_get_errno+0x28>
    6264:	d0a01404 	addi	r2,gp,-32688
}
    6268:	e037883a 	mov	sp,fp
    626c:	dfc00117 	ldw	ra,4(sp)
    6270:	df000017 	ldw	fp,0(sp)
    6274:	dec00204 	addi	sp,sp,8
    6278:	f800283a 	ret

0000627c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    627c:	defffb04 	addi	sp,sp,-20
    6280:	dfc00415 	stw	ra,16(sp)
    6284:	df000315 	stw	fp,12(sp)
    6288:	df000304 	addi	fp,sp,12
    628c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6290:	e0bfff17 	ldw	r2,-4(fp)
    6294:	10000616 	blt	r2,zero,62b0 <close+0x34>
    6298:	e0bfff17 	ldw	r2,-4(fp)
    629c:	10c00324 	muli	r3,r2,12
    62a0:	00800034 	movhi	r2,0
    62a4:	109beb04 	addi	r2,r2,28588
    62a8:	1885883a 	add	r2,r3,r2
    62ac:	00000106 	br	62b4 <close+0x38>
    62b0:	0005883a 	mov	r2,zero
    62b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    62b8:	e0bffd17 	ldw	r2,-12(fp)
    62bc:	10001926 	beq	r2,zero,6324 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    62c0:	e0bffd17 	ldw	r2,-12(fp)
    62c4:	10800017 	ldw	r2,0(r2)
    62c8:	10800417 	ldw	r2,16(r2)
    62cc:	10000626 	beq	r2,zero,62e8 <close+0x6c>
    62d0:	e0bffd17 	ldw	r2,-12(fp)
    62d4:	10800017 	ldw	r2,0(r2)
    62d8:	10800417 	ldw	r2,16(r2)
    62dc:	e13ffd17 	ldw	r4,-12(fp)
    62e0:	103ee83a 	callr	r2
    62e4:	00000106 	br	62ec <close+0x70>
    62e8:	0005883a 	mov	r2,zero
    62ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    62f0:	e13fff17 	ldw	r4,-4(fp)
    62f4:	00069380 	call	6938 <alt_release_fd>
    if (rval < 0)
    62f8:	e0bffe17 	ldw	r2,-8(fp)
    62fc:	1000070e 	bge	r2,zero,631c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    6300:	00062400 	call	6240 <alt_get_errno>
    6304:	1007883a 	mov	r3,r2
    6308:	e0bffe17 	ldw	r2,-8(fp)
    630c:	0085c83a 	sub	r2,zero,r2
    6310:	18800015 	stw	r2,0(r3)
      return -1;
    6314:	00bfffc4 	movi	r2,-1
    6318:	00000706 	br	6338 <close+0xbc>
    }
    return 0;
    631c:	0005883a 	mov	r2,zero
    6320:	00000506 	br	6338 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6324:	00062400 	call	6240 <alt_get_errno>
    6328:	1007883a 	mov	r3,r2
    632c:	00801444 	movi	r2,81
    6330:	18800015 	stw	r2,0(r3)
    return -1;
    6334:	00bfffc4 	movi	r2,-1
  }
}
    6338:	e037883a 	mov	sp,fp
    633c:	dfc00117 	ldw	ra,4(sp)
    6340:	df000017 	ldw	fp,0(sp)
    6344:	dec00204 	addi	sp,sp,8
    6348:	f800283a 	ret

0000634c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    634c:	defffe04 	addi	sp,sp,-8
    6350:	df000115 	stw	fp,4(sp)
    6354:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    6358:	e03fff15 	stw	zero,-4(fp)
    635c:	00000506 	br	6374 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    6360:	e0bfff17 	ldw	r2,-4(fp)
    6364:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    6368:	e0bfff17 	ldw	r2,-4(fp)
    636c:	10800804 	addi	r2,r2,32
    6370:	e0bfff15 	stw	r2,-4(fp)
    6374:	e0bfff17 	ldw	r2,-4(fp)
    6378:	10820030 	cmpltui	r2,r2,2048
    637c:	103ff81e 	bne	r2,zero,6360 <__alt_mem_epcs_flash+0xffff5360>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    6380:	0001883a 	nop
    6384:	e037883a 	mov	sp,fp
    6388:	df000017 	ldw	fp,0(sp)
    638c:	dec00104 	addi	sp,sp,4
    6390:	f800283a 	ret

00006394 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    6394:	defffc04 	addi	sp,sp,-16
    6398:	df000315 	stw	fp,12(sp)
    639c:	df000304 	addi	fp,sp,12
    63a0:	e13ffd15 	stw	r4,-12(fp)
    63a4:	e17ffe15 	stw	r5,-8(fp)
    63a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    63ac:	e0bfff17 	ldw	r2,-4(fp)
}
    63b0:	e037883a 	mov	sp,fp
    63b4:	df000017 	ldw	fp,0(sp)
    63b8:	dec00104 	addi	sp,sp,4
    63bc:	f800283a 	ret

000063c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    63c0:	defffe04 	addi	sp,sp,-8
    63c4:	dfc00115 	stw	ra,4(sp)
    63c8:	df000015 	stw	fp,0(sp)
    63cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    63d0:	d0a00717 	ldw	r2,-32740(gp)
    63d4:	10000326 	beq	r2,zero,63e4 <alt_get_errno+0x24>
    63d8:	d0a00717 	ldw	r2,-32740(gp)
    63dc:	103ee83a 	callr	r2
    63e0:	00000106 	br	63e8 <alt_get_errno+0x28>
    63e4:	d0a01404 	addi	r2,gp,-32688
}
    63e8:	e037883a 	mov	sp,fp
    63ec:	dfc00117 	ldw	ra,4(sp)
    63f0:	df000017 	ldw	fp,0(sp)
    63f4:	dec00204 	addi	sp,sp,8
    63f8:	f800283a 	ret

000063fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    63fc:	defffa04 	addi	sp,sp,-24
    6400:	dfc00515 	stw	ra,20(sp)
    6404:	df000415 	stw	fp,16(sp)
    6408:	df000404 	addi	fp,sp,16
    640c:	e13ffe15 	stw	r4,-8(fp)
    6410:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6414:	e0bffe17 	ldw	r2,-8(fp)
    6418:	10000326 	beq	r2,zero,6428 <alt_dev_llist_insert+0x2c>
    641c:	e0bffe17 	ldw	r2,-8(fp)
    6420:	10800217 	ldw	r2,8(r2)
    6424:	1000061e 	bne	r2,zero,6440 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    6428:	00063c00 	call	63c0 <alt_get_errno>
    642c:	1007883a 	mov	r3,r2
    6430:	00800584 	movi	r2,22
    6434:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    6438:	00bffa84 	movi	r2,-22
    643c:	00001306 	br	648c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    6440:	e0bffe17 	ldw	r2,-8(fp)
    6444:	e0ffff17 	ldw	r3,-4(fp)
    6448:	e0fffc15 	stw	r3,-16(fp)
    644c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6450:	e0bffd17 	ldw	r2,-12(fp)
    6454:	e0fffc17 	ldw	r3,-16(fp)
    6458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    645c:	e0bffc17 	ldw	r2,-16(fp)
    6460:	10c00017 	ldw	r3,0(r2)
    6464:	e0bffd17 	ldw	r2,-12(fp)
    6468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    646c:	e0bffc17 	ldw	r2,-16(fp)
    6470:	10800017 	ldw	r2,0(r2)
    6474:	e0fffd17 	ldw	r3,-12(fp)
    6478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    647c:	e0bffc17 	ldw	r2,-16(fp)
    6480:	e0fffd17 	ldw	r3,-12(fp)
    6484:	10c00015 	stw	r3,0(r2)

  return 0;  
    6488:	0005883a 	mov	r2,zero
}
    648c:	e037883a 	mov	sp,fp
    6490:	dfc00117 	ldw	ra,4(sp)
    6494:	df000017 	ldw	fp,0(sp)
    6498:	dec00204 	addi	sp,sp,8
    649c:	f800283a 	ret

000064a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    64a0:	defffd04 	addi	sp,sp,-12
    64a4:	df000215 	stw	fp,8(sp)
    64a8:	df000204 	addi	fp,sp,8
    64ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    64b0:	0001883a 	nop
    64b4:	e0bfff17 	ldw	r2,-4(fp)
    64b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    64bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    64c0:	10000226 	beq	r2,zero,64cc <_exit+0x2c>
    ALT_SIM_FAIL();
    64c4:	002af070 	cmpltui	zero,zero,43969
    64c8:	00000106 	br	64d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    64cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    64d0:	003fff06 	br	64d0 <__alt_mem_epcs_flash+0xffff54d0>

000064d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    64d4:	defffe04 	addi	sp,sp,-8
    64d8:	dfc00115 	stw	ra,4(sp)
    64dc:	df000015 	stw	fp,0(sp)
    64e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    64e4:	01440004 	movi	r5,4096
    64e8:	0009883a 	mov	r4,zero
    64ec:	0006bfc0 	call	6bfc <alt_icache_flush>
#endif
}
    64f0:	0001883a 	nop
    64f4:	e037883a 	mov	sp,fp
    64f8:	dfc00117 	ldw	ra,4(sp)
    64fc:	df000017 	ldw	fp,0(sp)
    6500:	dec00204 	addi	sp,sp,8
    6504:	f800283a 	ret

00006508 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    6508:	defffe04 	addi	sp,sp,-8
    650c:	df000115 	stw	fp,4(sp)
    6510:	df000104 	addi	fp,sp,4
    6514:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    6518:	e0bfff17 	ldw	r2,-4(fp)
    651c:	10bffe84 	addi	r2,r2,-6
    6520:	10c00428 	cmpgeui	r3,r2,16
    6524:	18001a1e 	bne	r3,zero,6590 <alt_exception_cause_generated_bad_addr+0x88>
    6528:	100690ba 	slli	r3,r2,2
    652c:	00800034 	movhi	r2,0
    6530:	10995004 	addi	r2,r2,25920
    6534:	1885883a 	add	r2,r3,r2
    6538:	10800017 	ldw	r2,0(r2)
    653c:	1000683a 	jmp	r2
    6540:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6544:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6548:	00006590 	cmplti	zero,zero,406
    654c:	00006590 	cmplti	zero,zero,406
    6550:	00006590 	cmplti	zero,zero,406
    6554:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6558:	00006588 	cmpgei	zero,zero,406
    655c:	00006590 	cmplti	zero,zero,406
    6560:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6564:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6568:	00006590 	cmplti	zero,zero,406
    656c:	00006580 	call	658 <__alt_mem_ram-0x39a8>
    6570:	00006588 	cmpgei	zero,zero,406
    6574:	00006590 	cmplti	zero,zero,406
    6578:	00006590 	cmplti	zero,zero,406
    657c:	00006580 	call	658 <__alt_mem_ram-0x39a8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6580:	00800044 	movi	r2,1
    6584:	00000306 	br	6594 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    6588:	0005883a 	mov	r2,zero
    658c:	00000106 	br	6594 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    6590:	0005883a 	mov	r2,zero
  }
}
    6594:	e037883a 	mov	sp,fp
    6598:	df000017 	ldw	fp,0(sp)
    659c:	dec00104 	addi	sp,sp,4
    65a0:	f800283a 	ret

000065a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    65a4:	defff904 	addi	sp,sp,-28
    65a8:	dfc00615 	stw	ra,24(sp)
    65ac:	df000515 	stw	fp,20(sp)
    65b0:	df000504 	addi	fp,sp,20
    65b4:	e13ffc15 	stw	r4,-16(fp)
    65b8:	e17ffd15 	stw	r5,-12(fp)
    65bc:	e1bffe15 	stw	r6,-8(fp)
    65c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    65c4:	e1bfff17 	ldw	r6,-4(fp)
    65c8:	e17ffe17 	ldw	r5,-8(fp)
    65cc:	e13ffd17 	ldw	r4,-12(fp)
    65d0:	00067e40 	call	67e4 <open>
    65d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    65d8:	e0bffb17 	ldw	r2,-20(fp)
    65dc:	10001c16 	blt	r2,zero,6650 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    65e0:	00800034 	movhi	r2,0
    65e4:	109beb04 	addi	r2,r2,28588
    65e8:	e0fffb17 	ldw	r3,-20(fp)
    65ec:	18c00324 	muli	r3,r3,12
    65f0:	10c5883a 	add	r2,r2,r3
    65f4:	10c00017 	ldw	r3,0(r2)
    65f8:	e0bffc17 	ldw	r2,-16(fp)
    65fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    6600:	00800034 	movhi	r2,0
    6604:	109beb04 	addi	r2,r2,28588
    6608:	e0fffb17 	ldw	r3,-20(fp)
    660c:	18c00324 	muli	r3,r3,12
    6610:	10c5883a 	add	r2,r2,r3
    6614:	10800104 	addi	r2,r2,4
    6618:	10c00017 	ldw	r3,0(r2)
    661c:	e0bffc17 	ldw	r2,-16(fp)
    6620:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6624:	00800034 	movhi	r2,0
    6628:	109beb04 	addi	r2,r2,28588
    662c:	e0fffb17 	ldw	r3,-20(fp)
    6630:	18c00324 	muli	r3,r3,12
    6634:	10c5883a 	add	r2,r2,r3
    6638:	10800204 	addi	r2,r2,8
    663c:	10c00017 	ldw	r3,0(r2)
    6640:	e0bffc17 	ldw	r2,-16(fp)
    6644:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6648:	e13ffb17 	ldw	r4,-20(fp)
    664c:	00069380 	call	6938 <alt_release_fd>
  }
} 
    6650:	0001883a 	nop
    6654:	e037883a 	mov	sp,fp
    6658:	dfc00117 	ldw	ra,4(sp)
    665c:	df000017 	ldw	fp,0(sp)
    6660:	dec00204 	addi	sp,sp,8
    6664:	f800283a 	ret

00006668 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6668:	defffb04 	addi	sp,sp,-20
    666c:	dfc00415 	stw	ra,16(sp)
    6670:	df000315 	stw	fp,12(sp)
    6674:	df000304 	addi	fp,sp,12
    6678:	e13ffd15 	stw	r4,-12(fp)
    667c:	e17ffe15 	stw	r5,-8(fp)
    6680:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6684:	01c07fc4 	movi	r7,511
    6688:	01800044 	movi	r6,1
    668c:	e17ffd17 	ldw	r5,-12(fp)
    6690:	01000034 	movhi	r4,0
    6694:	211bee04 	addi	r4,r4,28600
    6698:	00065a40 	call	65a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    669c:	01c07fc4 	movi	r7,511
    66a0:	000d883a 	mov	r6,zero
    66a4:	e17ffe17 	ldw	r5,-8(fp)
    66a8:	01000034 	movhi	r4,0
    66ac:	211beb04 	addi	r4,r4,28588
    66b0:	00065a40 	call	65a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    66b4:	01c07fc4 	movi	r7,511
    66b8:	01800044 	movi	r6,1
    66bc:	e17fff17 	ldw	r5,-4(fp)
    66c0:	01000034 	movhi	r4,0
    66c4:	211bf104 	addi	r4,r4,28612
    66c8:	00065a40 	call	65a4 <alt_open_fd>
}  
    66cc:	0001883a 	nop
    66d0:	e037883a 	mov	sp,fp
    66d4:	dfc00117 	ldw	ra,4(sp)
    66d8:	df000017 	ldw	fp,0(sp)
    66dc:	dec00204 	addi	sp,sp,8
    66e0:	f800283a 	ret

000066e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    66e4:	defffe04 	addi	sp,sp,-8
    66e8:	dfc00115 	stw	ra,4(sp)
    66ec:	df000015 	stw	fp,0(sp)
    66f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    66f4:	d0a00717 	ldw	r2,-32740(gp)
    66f8:	10000326 	beq	r2,zero,6708 <alt_get_errno+0x24>
    66fc:	d0a00717 	ldw	r2,-32740(gp)
    6700:	103ee83a 	callr	r2
    6704:	00000106 	br	670c <alt_get_errno+0x28>
    6708:	d0a01404 	addi	r2,gp,-32688
}
    670c:	e037883a 	mov	sp,fp
    6710:	dfc00117 	ldw	ra,4(sp)
    6714:	df000017 	ldw	fp,0(sp)
    6718:	dec00204 	addi	sp,sp,8
    671c:	f800283a 	ret

00006720 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6720:	defffd04 	addi	sp,sp,-12
    6724:	df000215 	stw	fp,8(sp)
    6728:	df000204 	addi	fp,sp,8
    672c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6730:	e0bfff17 	ldw	r2,-4(fp)
    6734:	10800217 	ldw	r2,8(r2)
    6738:	10d00034 	orhi	r3,r2,16384
    673c:	e0bfff17 	ldw	r2,-4(fp)
    6740:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6744:	e03ffe15 	stw	zero,-8(fp)
    6748:	00001d06 	br	67c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    674c:	00800034 	movhi	r2,0
    6750:	109beb04 	addi	r2,r2,28588
    6754:	e0fffe17 	ldw	r3,-8(fp)
    6758:	18c00324 	muli	r3,r3,12
    675c:	10c5883a 	add	r2,r2,r3
    6760:	10c00017 	ldw	r3,0(r2)
    6764:	e0bfff17 	ldw	r2,-4(fp)
    6768:	10800017 	ldw	r2,0(r2)
    676c:	1880111e 	bne	r3,r2,67b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6770:	00800034 	movhi	r2,0
    6774:	109beb04 	addi	r2,r2,28588
    6778:	e0fffe17 	ldw	r3,-8(fp)
    677c:	18c00324 	muli	r3,r3,12
    6780:	10c5883a 	add	r2,r2,r3
    6784:	10800204 	addi	r2,r2,8
    6788:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    678c:	1000090e 	bge	r2,zero,67b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    6790:	e0bffe17 	ldw	r2,-8(fp)
    6794:	10c00324 	muli	r3,r2,12
    6798:	00800034 	movhi	r2,0
    679c:	109beb04 	addi	r2,r2,28588
    67a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    67a4:	e0bfff17 	ldw	r2,-4(fp)
    67a8:	18800226 	beq	r3,r2,67b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    67ac:	00bffcc4 	movi	r2,-13
    67b0:	00000806 	br	67d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    67b4:	e0bffe17 	ldw	r2,-8(fp)
    67b8:	10800044 	addi	r2,r2,1
    67bc:	e0bffe15 	stw	r2,-8(fp)
    67c0:	d0a00617 	ldw	r2,-32744(gp)
    67c4:	1007883a 	mov	r3,r2
    67c8:	e0bffe17 	ldw	r2,-8(fp)
    67cc:	18bfdf2e 	bgeu	r3,r2,674c <__alt_mem_epcs_flash+0xffff574c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    67d0:	0005883a 	mov	r2,zero
}
    67d4:	e037883a 	mov	sp,fp
    67d8:	df000017 	ldw	fp,0(sp)
    67dc:	dec00104 	addi	sp,sp,4
    67e0:	f800283a 	ret

000067e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    67e4:	defff604 	addi	sp,sp,-40
    67e8:	dfc00915 	stw	ra,36(sp)
    67ec:	df000815 	stw	fp,32(sp)
    67f0:	df000804 	addi	fp,sp,32
    67f4:	e13ffd15 	stw	r4,-12(fp)
    67f8:	e17ffe15 	stw	r5,-8(fp)
    67fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6800:	00bfffc4 	movi	r2,-1
    6804:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    6808:	00bffb44 	movi	r2,-19
    680c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6810:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6814:	d1600404 	addi	r5,gp,-32752
    6818:	e13ffd17 	ldw	r4,-12(fp)
    681c:	00069c00 	call	69c0 <alt_find_dev>
    6820:	e0bff815 	stw	r2,-32(fp)
    6824:	e0bff817 	ldw	r2,-32(fp)
    6828:	1000051e 	bne	r2,zero,6840 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    682c:	e13ffd17 	ldw	r4,-12(fp)
    6830:	0006a500 	call	6a50 <alt_find_file>
    6834:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    6838:	00800044 	movi	r2,1
    683c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6840:	e0bff817 	ldw	r2,-32(fp)
    6844:	10002926 	beq	r2,zero,68ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6848:	e13ff817 	ldw	r4,-32(fp)
    684c:	0006b580 	call	6b58 <alt_get_fd>
    6850:	e0bff915 	stw	r2,-28(fp)
    6854:	e0bff917 	ldw	r2,-28(fp)
    6858:	1000030e 	bge	r2,zero,6868 <open+0x84>
    {
      status = index;
    685c:	e0bff917 	ldw	r2,-28(fp)
    6860:	e0bffa15 	stw	r2,-24(fp)
    6864:	00002306 	br	68f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    6868:	e0bff917 	ldw	r2,-28(fp)
    686c:	10c00324 	muli	r3,r2,12
    6870:	00800034 	movhi	r2,0
    6874:	109beb04 	addi	r2,r2,28588
    6878:	1885883a 	add	r2,r3,r2
    687c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6880:	e0fffe17 	ldw	r3,-8(fp)
    6884:	00900034 	movhi	r2,16384
    6888:	10bfffc4 	addi	r2,r2,-1
    688c:	1886703a 	and	r3,r3,r2
    6890:	e0bffc17 	ldw	r2,-16(fp)
    6894:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6898:	e0bffb17 	ldw	r2,-20(fp)
    689c:	1000051e 	bne	r2,zero,68b4 <open+0xd0>
    68a0:	e13ffc17 	ldw	r4,-16(fp)
    68a4:	00067200 	call	6720 <alt_file_locked>
    68a8:	e0bffa15 	stw	r2,-24(fp)
    68ac:	e0bffa17 	ldw	r2,-24(fp)
    68b0:	10001016 	blt	r2,zero,68f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    68b4:	e0bff817 	ldw	r2,-32(fp)
    68b8:	10800317 	ldw	r2,12(r2)
    68bc:	10000826 	beq	r2,zero,68e0 <open+0xfc>
    68c0:	e0bff817 	ldw	r2,-32(fp)
    68c4:	10800317 	ldw	r2,12(r2)
    68c8:	e1ffff17 	ldw	r7,-4(fp)
    68cc:	e1bffe17 	ldw	r6,-8(fp)
    68d0:	e17ffd17 	ldw	r5,-12(fp)
    68d4:	e13ffc17 	ldw	r4,-16(fp)
    68d8:	103ee83a 	callr	r2
    68dc:	00000106 	br	68e4 <open+0x100>
    68e0:	0005883a 	mov	r2,zero
    68e4:	e0bffa15 	stw	r2,-24(fp)
    68e8:	00000206 	br	68f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    68ec:	00bffb44 	movi	r2,-19
    68f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    68f4:	e0bffa17 	ldw	r2,-24(fp)
    68f8:	1000090e 	bge	r2,zero,6920 <open+0x13c>
  {
    alt_release_fd (index);  
    68fc:	e13ff917 	ldw	r4,-28(fp)
    6900:	00069380 	call	6938 <alt_release_fd>
    ALT_ERRNO = -status;
    6904:	00066e40 	call	66e4 <alt_get_errno>
    6908:	1007883a 	mov	r3,r2
    690c:	e0bffa17 	ldw	r2,-24(fp)
    6910:	0085c83a 	sub	r2,zero,r2
    6914:	18800015 	stw	r2,0(r3)
    return -1;
    6918:	00bfffc4 	movi	r2,-1
    691c:	00000106 	br	6924 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    6920:	e0bff917 	ldw	r2,-28(fp)
}
    6924:	e037883a 	mov	sp,fp
    6928:	dfc00117 	ldw	ra,4(sp)
    692c:	df000017 	ldw	fp,0(sp)
    6930:	dec00204 	addi	sp,sp,8
    6934:	f800283a 	ret

00006938 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6938:	defffe04 	addi	sp,sp,-8
    693c:	df000115 	stw	fp,4(sp)
    6940:	df000104 	addi	fp,sp,4
    6944:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    6948:	e0bfff17 	ldw	r2,-4(fp)
    694c:	108000d0 	cmplti	r2,r2,3
    6950:	10000d1e 	bne	r2,zero,6988 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    6954:	00800034 	movhi	r2,0
    6958:	109beb04 	addi	r2,r2,28588
    695c:	e0ffff17 	ldw	r3,-4(fp)
    6960:	18c00324 	muli	r3,r3,12
    6964:	10c5883a 	add	r2,r2,r3
    6968:	10800204 	addi	r2,r2,8
    696c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    6970:	00800034 	movhi	r2,0
    6974:	109beb04 	addi	r2,r2,28588
    6978:	e0ffff17 	ldw	r3,-4(fp)
    697c:	18c00324 	muli	r3,r3,12
    6980:	10c5883a 	add	r2,r2,r3
    6984:	10000015 	stw	zero,0(r2)
  }
}
    6988:	0001883a 	nop
    698c:	e037883a 	mov	sp,fp
    6990:	df000017 	ldw	fp,0(sp)
    6994:	dec00104 	addi	sp,sp,4
    6998:	f800283a 	ret

0000699c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    699c:	deffff04 	addi	sp,sp,-4
    69a0:	df000015 	stw	fp,0(sp)
    69a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    69a8:	000170fa 	wrctl	ienable,zero
}
    69ac:	0001883a 	nop
    69b0:	e037883a 	mov	sp,fp
    69b4:	df000017 	ldw	fp,0(sp)
    69b8:	dec00104 	addi	sp,sp,4
    69bc:	f800283a 	ret

000069c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    69c0:	defffa04 	addi	sp,sp,-24
    69c4:	dfc00515 	stw	ra,20(sp)
    69c8:	df000415 	stw	fp,16(sp)
    69cc:	df000404 	addi	fp,sp,16
    69d0:	e13ffe15 	stw	r4,-8(fp)
    69d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    69d8:	e0bfff17 	ldw	r2,-4(fp)
    69dc:	10800017 	ldw	r2,0(r2)
    69e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    69e4:	e13ffe17 	ldw	r4,-8(fp)
    69e8:	0006cbc0 	call	6cbc <strlen>
    69ec:	10800044 	addi	r2,r2,1
    69f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    69f4:	00000d06 	br	6a2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	10800217 	ldw	r2,8(r2)
    6a00:	e0fffd17 	ldw	r3,-12(fp)
    6a04:	180d883a 	mov	r6,r3
    6a08:	e17ffe17 	ldw	r5,-8(fp)
    6a0c:	1009883a 	mov	r4,r2
    6a10:	0006c8c0 	call	6c8c <memcmp>
    6a14:	1000021e 	bne	r2,zero,6a20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6a18:	e0bffc17 	ldw	r2,-16(fp)
    6a1c:	00000706 	br	6a3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6a20:	e0bffc17 	ldw	r2,-16(fp)
    6a24:	10800017 	ldw	r2,0(r2)
    6a28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6a2c:	e0fffc17 	ldw	r3,-16(fp)
    6a30:	e0bfff17 	ldw	r2,-4(fp)
    6a34:	18bff01e 	bne	r3,r2,69f8 <__alt_mem_epcs_flash+0xffff59f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6a38:	0005883a 	mov	r2,zero
}
    6a3c:	e037883a 	mov	sp,fp
    6a40:	dfc00117 	ldw	ra,4(sp)
    6a44:	df000017 	ldw	fp,0(sp)
    6a48:	dec00204 	addi	sp,sp,8
    6a4c:	f800283a 	ret

00006a50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6a50:	defffb04 	addi	sp,sp,-20
    6a54:	dfc00415 	stw	ra,16(sp)
    6a58:	df000315 	stw	fp,12(sp)
    6a5c:	df000304 	addi	fp,sp,12
    6a60:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6a64:	d0a00217 	ldw	r2,-32760(gp)
    6a68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6a6c:	00003106 	br	6b34 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6a70:	e0bffd17 	ldw	r2,-12(fp)
    6a74:	10800217 	ldw	r2,8(r2)
    6a78:	1009883a 	mov	r4,r2
    6a7c:	0006cbc0 	call	6cbc <strlen>
    6a80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6a84:	e0bffd17 	ldw	r2,-12(fp)
    6a88:	10c00217 	ldw	r3,8(r2)
    6a8c:	e0bffe17 	ldw	r2,-8(fp)
    6a90:	10bfffc4 	addi	r2,r2,-1
    6a94:	1885883a 	add	r2,r3,r2
    6a98:	10800003 	ldbu	r2,0(r2)
    6a9c:	10803fcc 	andi	r2,r2,255
    6aa0:	1080201c 	xori	r2,r2,128
    6aa4:	10bfe004 	addi	r2,r2,-128
    6aa8:	10800bd8 	cmpnei	r2,r2,47
    6aac:	1000031e 	bne	r2,zero,6abc <alt_find_file+0x6c>
    {
      len -= 1;
    6ab0:	e0bffe17 	ldw	r2,-8(fp)
    6ab4:	10bfffc4 	addi	r2,r2,-1
    6ab8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6abc:	e0bffe17 	ldw	r2,-8(fp)
    6ac0:	e0ffff17 	ldw	r3,-4(fp)
    6ac4:	1885883a 	add	r2,r3,r2
    6ac8:	10800003 	ldbu	r2,0(r2)
    6acc:	10803fcc 	andi	r2,r2,255
    6ad0:	1080201c 	xori	r2,r2,128
    6ad4:	10bfe004 	addi	r2,r2,-128
    6ad8:	10800be0 	cmpeqi	r2,r2,47
    6adc:	1000081e 	bne	r2,zero,6b00 <alt_find_file+0xb0>
    6ae0:	e0bffe17 	ldw	r2,-8(fp)
    6ae4:	e0ffff17 	ldw	r3,-4(fp)
    6ae8:	1885883a 	add	r2,r3,r2
    6aec:	10800003 	ldbu	r2,0(r2)
    6af0:	10803fcc 	andi	r2,r2,255
    6af4:	1080201c 	xori	r2,r2,128
    6af8:	10bfe004 	addi	r2,r2,-128
    6afc:	10000a1e 	bne	r2,zero,6b28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    6b00:	e0bffd17 	ldw	r2,-12(fp)
    6b04:	10800217 	ldw	r2,8(r2)
    6b08:	e0fffe17 	ldw	r3,-8(fp)
    6b0c:	180d883a 	mov	r6,r3
    6b10:	e17fff17 	ldw	r5,-4(fp)
    6b14:	1009883a 	mov	r4,r2
    6b18:	0006c8c0 	call	6c8c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6b1c:	1000021e 	bne	r2,zero,6b28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6b20:	e0bffd17 	ldw	r2,-12(fp)
    6b24:	00000706 	br	6b44 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6b28:	e0bffd17 	ldw	r2,-12(fp)
    6b2c:	10800017 	ldw	r2,0(r2)
    6b30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6b34:	e0fffd17 	ldw	r3,-12(fp)
    6b38:	d0a00204 	addi	r2,gp,-32760
    6b3c:	18bfcc1e 	bne	r3,r2,6a70 <__alt_mem_epcs_flash+0xffff5a70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6b40:	0005883a 	mov	r2,zero
}
    6b44:	e037883a 	mov	sp,fp
    6b48:	dfc00117 	ldw	ra,4(sp)
    6b4c:	df000017 	ldw	fp,0(sp)
    6b50:	dec00204 	addi	sp,sp,8
    6b54:	f800283a 	ret

00006b58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6b58:	defffc04 	addi	sp,sp,-16
    6b5c:	df000315 	stw	fp,12(sp)
    6b60:	df000304 	addi	fp,sp,12
    6b64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6b68:	00bffa04 	movi	r2,-24
    6b6c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6b70:	e03ffd15 	stw	zero,-12(fp)
    6b74:	00001906 	br	6bdc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    6b78:	00800034 	movhi	r2,0
    6b7c:	109beb04 	addi	r2,r2,28588
    6b80:	e0fffd17 	ldw	r3,-12(fp)
    6b84:	18c00324 	muli	r3,r3,12
    6b88:	10c5883a 	add	r2,r2,r3
    6b8c:	10800017 	ldw	r2,0(r2)
    6b90:	10000f1e 	bne	r2,zero,6bd0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    6b94:	00800034 	movhi	r2,0
    6b98:	109beb04 	addi	r2,r2,28588
    6b9c:	e0fffd17 	ldw	r3,-12(fp)
    6ba0:	18c00324 	muli	r3,r3,12
    6ba4:	10c5883a 	add	r2,r2,r3
    6ba8:	e0ffff17 	ldw	r3,-4(fp)
    6bac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6bb0:	d0e00617 	ldw	r3,-32744(gp)
    6bb4:	e0bffd17 	ldw	r2,-12(fp)
    6bb8:	1880020e 	bge	r3,r2,6bc4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    6bbc:	e0bffd17 	ldw	r2,-12(fp)
    6bc0:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    6bc4:	e0bffd17 	ldw	r2,-12(fp)
    6bc8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    6bcc:	00000606 	br	6be8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6bd0:	e0bffd17 	ldw	r2,-12(fp)
    6bd4:	10800044 	addi	r2,r2,1
    6bd8:	e0bffd15 	stw	r2,-12(fp)
    6bdc:	e0bffd17 	ldw	r2,-12(fp)
    6be0:	10800810 	cmplti	r2,r2,32
    6be4:	103fe41e 	bne	r2,zero,6b78 <__alt_mem_epcs_flash+0xffff5b78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6be8:	e0bffe17 	ldw	r2,-8(fp)
}
    6bec:	e037883a 	mov	sp,fp
    6bf0:	df000017 	ldw	fp,0(sp)
    6bf4:	dec00104 	addi	sp,sp,4
    6bf8:	f800283a 	ret

00006bfc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    6bfc:	defffb04 	addi	sp,sp,-20
    6c00:	df000415 	stw	fp,16(sp)
    6c04:	df000404 	addi	fp,sp,16
    6c08:	e13ffe15 	stw	r4,-8(fp)
    6c0c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    6c10:	e0bfff17 	ldw	r2,-4(fp)
    6c14:	10840070 	cmpltui	r2,r2,4097
    6c18:	1000021e 	bne	r2,zero,6c24 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    6c1c:	00840004 	movi	r2,4096
    6c20:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    6c24:	e0fffe17 	ldw	r3,-8(fp)
    6c28:	e0bfff17 	ldw	r2,-4(fp)
    6c2c:	1885883a 	add	r2,r3,r2
    6c30:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6c34:	e0bffe17 	ldw	r2,-8(fp)
    6c38:	e0bffc15 	stw	r2,-16(fp)
    6c3c:	00000506 	br	6c54 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6c40:	e0bffc17 	ldw	r2,-16(fp)
    6c44:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    6c48:	e0bffc17 	ldw	r2,-16(fp)
    6c4c:	10800804 	addi	r2,r2,32
    6c50:	e0bffc15 	stw	r2,-16(fp)
    6c54:	e0fffc17 	ldw	r3,-16(fp)
    6c58:	e0bffd17 	ldw	r2,-12(fp)
    6c5c:	18bff836 	bltu	r3,r2,6c40 <__alt_mem_epcs_flash+0xffff5c40>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6c60:	e0bffe17 	ldw	r2,-8(fp)
    6c64:	108007cc 	andi	r2,r2,31
    6c68:	10000226 	beq	r2,zero,6c74 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6c6c:	e0bffc17 	ldw	r2,-16(fp)
    6c70:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6c74:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6c78:	0001883a 	nop
    6c7c:	e037883a 	mov	sp,fp
    6c80:	df000017 	ldw	fp,0(sp)
    6c84:	dec00104 	addi	sp,sp,4
    6c88:	f800283a 	ret

00006c8c <memcmp>:
    6c8c:	218d883a 	add	r6,r4,r6
    6c90:	21800826 	beq	r4,r6,6cb4 <memcmp+0x28>
    6c94:	20800003 	ldbu	r2,0(r4)
    6c98:	28c00003 	ldbu	r3,0(r5)
    6c9c:	10c00226 	beq	r2,r3,6ca8 <memcmp+0x1c>
    6ca0:	10c5c83a 	sub	r2,r2,r3
    6ca4:	f800283a 	ret
    6ca8:	21000044 	addi	r4,r4,1
    6cac:	29400044 	addi	r5,r5,1
    6cb0:	003ff706 	br	6c90 <__alt_mem_epcs_flash+0xffff5c90>
    6cb4:	0005883a 	mov	r2,zero
    6cb8:	f800283a 	ret

00006cbc <strlen>:
    6cbc:	2005883a 	mov	r2,r4
    6cc0:	10c00007 	ldb	r3,0(r2)
    6cc4:	18000226 	beq	r3,zero,6cd0 <strlen+0x14>
    6cc8:	10800044 	addi	r2,r2,1
    6ccc:	003ffc06 	br	6cc0 <__alt_mem_epcs_flash+0xffff5cc0>
    6cd0:	1105c83a 	sub	r2,r2,r4
    6cd4:	f800283a 	ret

00006cd8 <__divsi3>:
    6cd8:	20001b16 	blt	r4,zero,6d48 <__divsi3+0x70>
    6cdc:	000f883a 	mov	r7,zero
    6ce0:	28001616 	blt	r5,zero,6d3c <__divsi3+0x64>
    6ce4:	200d883a 	mov	r6,r4
    6ce8:	29001a2e 	bgeu	r5,r4,6d54 <__divsi3+0x7c>
    6cec:	00800804 	movi	r2,32
    6cf0:	00c00044 	movi	r3,1
    6cf4:	00000106 	br	6cfc <__divsi3+0x24>
    6cf8:	10000d26 	beq	r2,zero,6d30 <__divsi3+0x58>
    6cfc:	294b883a 	add	r5,r5,r5
    6d00:	10bfffc4 	addi	r2,r2,-1
    6d04:	18c7883a 	add	r3,r3,r3
    6d08:	293ffb36 	bltu	r5,r4,6cf8 <__alt_mem_epcs_flash+0xffff5cf8>
    6d0c:	0005883a 	mov	r2,zero
    6d10:	18000726 	beq	r3,zero,6d30 <__divsi3+0x58>
    6d14:	0005883a 	mov	r2,zero
    6d18:	31400236 	bltu	r6,r5,6d24 <__divsi3+0x4c>
    6d1c:	314dc83a 	sub	r6,r6,r5
    6d20:	10c4b03a 	or	r2,r2,r3
    6d24:	1806d07a 	srli	r3,r3,1
    6d28:	280ad07a 	srli	r5,r5,1
    6d2c:	183ffa1e 	bne	r3,zero,6d18 <__alt_mem_epcs_flash+0xffff5d18>
    6d30:	38000126 	beq	r7,zero,6d38 <__divsi3+0x60>
    6d34:	0085c83a 	sub	r2,zero,r2
    6d38:	f800283a 	ret
    6d3c:	014bc83a 	sub	r5,zero,r5
    6d40:	39c0005c 	xori	r7,r7,1
    6d44:	003fe706 	br	6ce4 <__alt_mem_epcs_flash+0xffff5ce4>
    6d48:	0109c83a 	sub	r4,zero,r4
    6d4c:	01c00044 	movi	r7,1
    6d50:	003fe306 	br	6ce0 <__alt_mem_epcs_flash+0xffff5ce0>
    6d54:	00c00044 	movi	r3,1
    6d58:	003fee06 	br	6d14 <__alt_mem_epcs_flash+0xffff5d14>

00006d5c <__modsi3>:
    6d5c:	20001716 	blt	r4,zero,6dbc <__modsi3+0x60>
    6d60:	000f883a 	mov	r7,zero
    6d64:	2005883a 	mov	r2,r4
    6d68:	28001216 	blt	r5,zero,6db4 <__modsi3+0x58>
    6d6c:	2900162e 	bgeu	r5,r4,6dc8 <__modsi3+0x6c>
    6d70:	01800804 	movi	r6,32
    6d74:	00c00044 	movi	r3,1
    6d78:	00000106 	br	6d80 <__modsi3+0x24>
    6d7c:	30000a26 	beq	r6,zero,6da8 <__modsi3+0x4c>
    6d80:	294b883a 	add	r5,r5,r5
    6d84:	31bfffc4 	addi	r6,r6,-1
    6d88:	18c7883a 	add	r3,r3,r3
    6d8c:	293ffb36 	bltu	r5,r4,6d7c <__alt_mem_epcs_flash+0xffff5d7c>
    6d90:	18000526 	beq	r3,zero,6da8 <__modsi3+0x4c>
    6d94:	1806d07a 	srli	r3,r3,1
    6d98:	11400136 	bltu	r2,r5,6da0 <__modsi3+0x44>
    6d9c:	1145c83a 	sub	r2,r2,r5
    6da0:	280ad07a 	srli	r5,r5,1
    6da4:	183ffb1e 	bne	r3,zero,6d94 <__alt_mem_epcs_flash+0xffff5d94>
    6da8:	38000126 	beq	r7,zero,6db0 <__modsi3+0x54>
    6dac:	0085c83a 	sub	r2,zero,r2
    6db0:	f800283a 	ret
    6db4:	014bc83a 	sub	r5,zero,r5
    6db8:	003fec06 	br	6d6c <__alt_mem_epcs_flash+0xffff5d6c>
    6dbc:	0109c83a 	sub	r4,zero,r4
    6dc0:	01c00044 	movi	r7,1
    6dc4:	003fe706 	br	6d64 <__alt_mem_epcs_flash+0xffff5d64>
    6dc8:	00c00044 	movi	r3,1
    6dcc:	003ff106 	br	6d94 <__alt_mem_epcs_flash+0xffff5d94>

00006dd0 <__udivsi3>:
    6dd0:	200d883a 	mov	r6,r4
    6dd4:	2900152e 	bgeu	r5,r4,6e2c <__udivsi3+0x5c>
    6dd8:	28001416 	blt	r5,zero,6e2c <__udivsi3+0x5c>
    6ddc:	00800804 	movi	r2,32
    6de0:	00c00044 	movi	r3,1
    6de4:	00000206 	br	6df0 <__udivsi3+0x20>
    6de8:	10000e26 	beq	r2,zero,6e24 <__udivsi3+0x54>
    6dec:	28000516 	blt	r5,zero,6e04 <__udivsi3+0x34>
    6df0:	294b883a 	add	r5,r5,r5
    6df4:	10bfffc4 	addi	r2,r2,-1
    6df8:	18c7883a 	add	r3,r3,r3
    6dfc:	293ffa36 	bltu	r5,r4,6de8 <__alt_mem_epcs_flash+0xffff5de8>
    6e00:	18000826 	beq	r3,zero,6e24 <__udivsi3+0x54>
    6e04:	0005883a 	mov	r2,zero
    6e08:	31400236 	bltu	r6,r5,6e14 <__udivsi3+0x44>
    6e0c:	314dc83a 	sub	r6,r6,r5
    6e10:	10c4b03a 	or	r2,r2,r3
    6e14:	1806d07a 	srli	r3,r3,1
    6e18:	280ad07a 	srli	r5,r5,1
    6e1c:	183ffa1e 	bne	r3,zero,6e08 <__alt_mem_epcs_flash+0xffff5e08>
    6e20:	f800283a 	ret
    6e24:	0005883a 	mov	r2,zero
    6e28:	f800283a 	ret
    6e2c:	00c00044 	movi	r3,1
    6e30:	003ff406 	br	6e04 <__alt_mem_epcs_flash+0xffff5e04>

00006e34 <__umodsi3>:
    6e34:	2005883a 	mov	r2,r4
    6e38:	2900122e 	bgeu	r5,r4,6e84 <__umodsi3+0x50>
    6e3c:	28001116 	blt	r5,zero,6e84 <__umodsi3+0x50>
    6e40:	01800804 	movi	r6,32
    6e44:	00c00044 	movi	r3,1
    6e48:	00000206 	br	6e54 <__umodsi3+0x20>
    6e4c:	30000c26 	beq	r6,zero,6e80 <__umodsi3+0x4c>
    6e50:	28000516 	blt	r5,zero,6e68 <__umodsi3+0x34>
    6e54:	294b883a 	add	r5,r5,r5
    6e58:	31bfffc4 	addi	r6,r6,-1
    6e5c:	18c7883a 	add	r3,r3,r3
    6e60:	293ffa36 	bltu	r5,r4,6e4c <__alt_mem_epcs_flash+0xffff5e4c>
    6e64:	18000626 	beq	r3,zero,6e80 <__umodsi3+0x4c>
    6e68:	1806d07a 	srli	r3,r3,1
    6e6c:	11400136 	bltu	r2,r5,6e74 <__umodsi3+0x40>
    6e70:	1145c83a 	sub	r2,r2,r5
    6e74:	280ad07a 	srli	r5,r5,1
    6e78:	183ffb1e 	bne	r3,zero,6e68 <__alt_mem_epcs_flash+0xffff5e68>
    6e7c:	f800283a 	ret
    6e80:	f800283a 	ret
    6e84:	00c00044 	movi	r3,1
    6e88:	003ff706 	br	6e68 <__alt_mem_epcs_flash+0xffff5e68>
